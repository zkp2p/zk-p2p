{
  "address": "0xB084f36C5B7193af8Dd17025b36FBe2DD496a06f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "contract IPoseidon",
          "name": "_poseidon",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxOnRampAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_onRampCooldownPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sustainabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sustainabilityFeeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "venmoIdHash",
          "type": "bytes32"
        }
      ],
      "name": "AccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "DepositClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "venmoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "name": "DepositReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "IntentExpirationPeriodSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onRamper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "IntentFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "IntentPruned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "venmoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "IntentSignaled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxOnRampAmount",
          "type": "uint256"
        }
      ],
      "name": "MaxOnRampAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "MinDepositAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiveProcessor",
          "type": "address"
        }
      ],
      "name": "NewReceiveProcessorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registrationProcessor",
          "type": "address"
        }
      ],
      "name": "NewRegistrationProcessorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sendProcessor",
          "type": "address"
        }
      ],
      "name": "NewSendProcessorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "onRampCooldownPeriod",
          "type": "uint256"
        }
      ],
      "name": "OnRampCooldownPeriodSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "SustainabilityFeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SustainabilityFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "UserAddedToDenylist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "approvedUser",
          "type": "bytes32"
        }
      ],
      "name": "UserRemovedFromDenylist",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "addAccountToDenylist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "cancelIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outstandingIntentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountDeposits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "depositor",
                  "type": "address"
                },
                {
                  "internalType": "uint256[3]",
                  "name": "packedVenmoId",
                  "type": "uint256[3]"
                },
                {
                  "internalType": "uint256",
                  "name": "depositAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingDeposits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "outstandingIntentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "conversionRate",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "intentHashes",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct Ramp.Deposit",
              "name": "deposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Ramp.DepositWithAvailableLiquidity[]",
          "name": "accountDeposits",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "venmoIdHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256[]",
              "name": "deposits",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Ramp.AccountInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getDeniedUsers",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "internalType": "uint256[3]",
              "name": "packedVenmoId",
              "type": "uint256[3]"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outstandingIntentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "conversionRate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "intentHashes",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct Ramp.Deposit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_depositIds",
          "type": "uint256[]"
        }
      ],
      "name": "getDepositFromIds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "depositor",
                  "type": "address"
                },
                {
                  "internalType": "uint256[3]",
                  "name": "packedVenmoId",
                  "type": "uint256[3]"
                },
                {
                  "internalType": "uint256",
                  "name": "depositAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingDeposits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "outstandingIntentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "conversionRate",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "intentHashes",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct Ramp.Deposit",
              "name": "deposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Ramp.DepositWithAvailableLiquidity[]",
          "name": "depositArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_intentHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "getIntentsWithOnRamperId",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "onRamper",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deposit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intentTimestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Ramp.Intent",
              "name": "intent",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "onRamperIdHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Ramp.IntentWithOnRamperId[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getLastOnRampTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getVenmoIdCurrentIntentHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistrationProcessor",
          "name": "_registrationProcessor",
          "type": "address"
        },
        {
          "internalType": "contract ISendProcessor",
          "name": "_sendProcessor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intentExpirationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "intents",
      "outputs": [
        {
          "internalType": "address",
          "name": "onRamper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intentTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "isDeniedUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxOnRampAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "_packedVenmoId",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_receiveAmount",
          "type": "uint256"
        }
      ],
      "name": "offRamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[12]",
          "name": "_signals",
          "type": "uint256[12]"
        }
      ],
      "name": "onRamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onRampCooldownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poseidon",
      "outputs": [
        {
          "internalType": "contract IPoseidon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[5]",
          "name": "_signals",
          "type": "uint256[5]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationProcessor",
      "outputs": [
        {
          "internalType": "contract IRegistrationProcessor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_approvedUser",
          "type": "bytes32"
        }
      ],
      "name": "removeAccountFromDenylist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendProcessor",
      "outputs": [
        {
          "internalType": "contract ISendProcessor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "setIntentExpirationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxOnRampAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxOnRampAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_onRampCooldownPeriod",
          "type": "uint256"
        }
      ],
      "name": "setOnRampCooldownPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistrationProcessor",
          "name": "_registrationProcessor",
          "type": "address"
        }
      ],
      "name": "setRegistrationProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISendProcessor",
          "name": "_sendProcessor",
          "type": "address"
        }
      ],
      "name": "setSendProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setSustainabilityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setSustainabilityFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "signalIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sustainabilityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sustainabilityFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_depositIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3760dd7f2c870f9a35fe5316261592a24cb5507982238a676e429554dbcf45a",
  "receipt": {
    "to": null,
    "from": "0xdd93E0f5fC32c86A568d87Cb4f08598f55E980F3",
    "contractAddress": "0xB084f36C5B7193af8Dd17025b36FBe2DD496a06f",
    "transactionIndex": 1,
    "gasUsed": "3566644",
    "logsBloom": "0x
    "blockHash": "0xf690338b394d55f513d4a27b9e996c0d5eb72112a233f0d0fb966a56f836afdf",
    "transactionHash": "0xa3760dd7f2c870f9a35fe5316261592a24cb5507982238a676e429554dbcf45a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 6681004,
        "transactionHash": "0xa3760dd7f2c870f9a35fe5316261592a24cb5507982238a676e429554dbcf45a",
        "address": "0xB084f36C5B7193af8Dd17025b36FBe2DD496a06f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dd93e0f5fc32c86a568d87cb4f08598f55e980f3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf690338b394d55f513d4a27b9e996c0d5eb72112a233f0d0fb966a56f836afdf"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6681004,
        "transactionHash": "0xa3760dd7f2c870f9a35fe5316261592a24cb5507982238a676e429554dbcf45a",
        "address": "0xB084f36C5B7193af8Dd17025b36FBe2DD496a06f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dd93e0f5fc32c86a568d87cb4f08598f55e980f3",
          "0x000000000000000000000000dd93e0f5fc32c86a568d87cb4f08598f55e980f3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf690338b394d55f513d4a27b9e996c0d5eb72112a233f0d0fb966a56f836afdf"
      }
    ],
    "blockNumber": 6681004,
    "cumulativeGasUsed": "3613557",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdd93E0f5fC32c86A568d87Cb4f08598f55E980F3",
    "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
    "0xC87eFE0445fbA1FDb8a73553F293272B7bE91c64",
    "20000000",
    "250000000",
    "86400",
    "21600",
    "0",
    "0x0bC26FF515411396DD588Abd6Ef6846E04470227"
  ],
  "numDeployments": 1,
  "solcInputHash": "3235f00afe52b593578a06ba6b1f711c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"contract IPoseidon\",\"name\":\"_poseidon\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxOnRampAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_onRampCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sustainabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sustainabilityFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"venmoIdHash\",\"type\":\"bytes32\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"DepositClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"venmoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intentExpirationPeriod\",\"type\":\"uint256\"}],\"name\":\"IntentExpirationPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onRamper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"IntentFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"IntentPruned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"venmoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IntentSignaled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxOnRampAmount\",\"type\":\"uint256\"}],\"name\":\"MaxOnRampAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"MinDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveProcessor\",\"type\":\"address\"}],\"name\":\"NewReceiveProcessorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registrationProcessor\",\"type\":\"address\"}],\"name\":\"NewRegistrationProcessorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendProcessor\",\"type\":\"address\"}],\"name\":\"NewSendProcessorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onRampCooldownPeriod\",\"type\":\"uint256\"}],\"name\":\"OnRampCooldownPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SustainabilityFeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SustainabilityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deniedUser\",\"type\":\"bytes32\"}],\"name\":\"UserAddedToDenylist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"approvedUser\",\"type\":\"bytes32\"}],\"name\":\"UserRemovedFromDenylist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_deniedUser\",\"type\":\"bytes32\"}],\"name\":\"addAccountToDenylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"cancelIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"packedVenmoId\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct Ramp.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct Ramp.DepositWithAvailableLiquidity[]\",\"name\":\"accountDeposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"venmoIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Ramp.AccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDeniedUsers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"packedVenmoId\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct Ramp.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositIds\",\"type\":\"uint256[]\"}],\"name\":\"getDepositFromIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"packedVenmoId\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct Ramp.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct Ramp.DepositWithAvailableLiquidity[]\",\"name\":\"depositArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_intentHashes\",\"type\":\"bytes32[]\"}],\"name\":\"getIntentsWithOnRamperId\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"onRamper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intentTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Ramp.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"onRamperIdHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Ramp.IntentWithOnRamperId[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLastOnRampTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getVenmoIdCurrentIntentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistrationProcessor\",\"name\":\"_registrationProcessor\",\"type\":\"address\"},{\"internalType\":\"contract ISendProcessor\",\"name\":\"_sendProcessor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intentExpirationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"intents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"onRamper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intentTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_deniedUser\",\"type\":\"bytes32\"}],\"name\":\"isDeniedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOnRampAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_packedVenmoId\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receiveAmount\",\"type\":\"uint256\"}],\"name\":\"offRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[12]\",\"name\":\"_signals\",\"type\":\"uint256[12]\"}],\"name\":\"onRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onRampCooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poseidon\",\"outputs\":[{\"internalType\":\"contract IPoseidon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_signals\",\"type\":\"uint256[5]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationProcessor\",\"outputs\":[{\"internalType\":\"contract IRegistrationProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_approvedUser\",\"type\":\"bytes32\"}],\"name\":\"removeAccountFromDenylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendProcessor\",\"outputs\":[{\"internalType\":\"contract ISendProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"}],\"name\":\"setIntentExpirationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxOnRampAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxOnRampAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_onRampCooldownPeriod\",\"type\":\"uint256\"}],\"name\":\"setOnRampCooldownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistrationProcessor\",\"name\":\"_registrationProcessor\",\"type\":\"address\"}],\"name\":\"setRegistrationProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISendProcessor\",\"name\":\"_sendProcessor\",\"type\":\"address\"}],\"name\":\"setSendProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSustainabilityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setSustainabilityFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"signalIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainabilityFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAccountToDenylist(bytes32)\":{\"params\":{\"_deniedUser\":\"Poseidon hash of the venmoId being banned\"}},\"cancelIntent(bytes32)\":{\"params\":{\"_intentHash\":\"Hash of intent being cancelled\"}},\"initialize(address,address)\":{\"params\":{\"_registrationProcessor\":\"Registration processor address\",\"_sendProcessor\":\"Send processor address\"}},\"offRamp(uint256[3],uint256,uint256)\":{\"params\":{\"_depositAmount\":\"The amount of USDC to off-ramp\",\"_packedVenmoId\":\"The packed venmo id of the account owner (we pack for easy use with poseidon)\",\"_receiveAmount\":\"The amount of USD to receive\"}},\"onRamp(uint256[2],uint256[2][2],uint256[2],uint256[12])\":{\"params\":{\"_a\":\"Parameter of zk proof\",\"_b\":\"Parameter of zk proof\",\"_c\":\"Parameter of zk proof\",\"_signals\":\"Encoded public signals of the zk proof, contains mailserverHash, fromEmail, timestamp, onRamperIdHash,                  nullifier, intentHash\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(uint256[2],uint256[2][2],uint256[2],uint256[5])\":{\"params\":{\"_a\":\"Parameter of zk proof\",\"_b\":\"Parameter of zk proof\",\"_c\":\"Parameter of zk proof\",\"_signals\":\"Encoded public signals of the zk proof, contains mailserverHash, fromEmail, userIdHash\"}},\"removeAccountFromDenylist(bytes32)\":{\"params\":{\"_approvedUser\":\"Poseidon hash of the venmoId being approved\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setIntentExpirationPeriod(uint256)\":{\"params\":{\"_intentExpirationPeriod\":\"New intent expiration period\"}},\"setMaxOnRampAmount(uint256)\":{\"params\":{\"_maxOnRampAmount\":\"The new max on ramp amount\"}},\"setMinDepositAmount(uint256)\":{\"params\":{\"_minDepositAmount\":\"The new minimum deposit amount\"}},\"setOnRampCooldownPeriod(uint256)\":{\"params\":{\"_onRampCooldownPeriod\":\"New on-ramp cooldown period\"}},\"setRegistrationProcessor(address)\":{\"params\":{\"_registrationProcessor\":\"New registration proccesor address\"}},\"setSendProcessor(address)\":{\"params\":{\"_sendProcessor\":\"New send proccesor address\"}},\"setSustainabilityFee(uint256)\":{\"params\":{\"_fee\":\"The new sustainability fee in precise units (10**18, ie 10% = 1e17)\"}},\"setSustainabilityFeeRecipient(address)\":{\"params\":{\"_feeRecipient\":\"The new fee recipient address\"}},\"signalIntent(uint256,uint256,address)\":{\"params\":{\"_amount\":\"The amount of USDC the user wants to on-ramp\",\"_depositId\":\"The ID of the deposit the on-ramper intends to use for \",\"_to\":\"Address to forward funds to (can be same as onRamper)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawDeposit(uint256[])\":{\"params\":{\"_depositIds\":\"Array of depositIds the depositor is attempting to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAccountToDenylist(bytes32)\":{\"notice\":\"Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to signal an intent on the user's deposit they will be denied.\"},\"cancelIntent(bytes32)\":{\"notice\":\"Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new intent. Deposit state is updated to reflect the cancelled intent.\"},\"initialize(address,address)\":{\"notice\":\"Initialize Ramp with the addresses of the Processors\"},\"offRamp(uint256[3],uint256,uint256)\":{\"notice\":\"Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount of USDC.\"},\"onRamp(uint256[2],uint256[2][2],uint256[2],uint256[12])\":{\"notice\":\"Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated, intent is removed, and deposit state is updated. USDC is transferred to the on-ramper.\"},\"register(uint256[2],uint256[2][2],uint256[2],uint256[5])\":{\"notice\":\"Registers a new account by pulling the hash of the account id from the proof and assigning the account owner to the sender of the transaction. One venmo account can be registered to multiple Ethereum addresses.\"},\"removeAccountFromDenylist(bytes32)\":{\"notice\":\"Removes a venmoId from a depositor's deny list.\"},\"setIntentExpirationPeriod(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent locking up a depositor's funds.\"},\"setMaxOnRampAmount(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than this amount a user must make multiple transactions.\"},\"setMinDepositAmount(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\"},\"setOnRampCooldownPeriod(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this amount of time before they can signalIntent to on-ramp again.\"},\"setRegistrationProcessor(address)\":{\"notice\":\"GOVERNANCE ONLY: Updates the registration processor address used for validating and interpreting zk proofs.\"},\"setSendProcessor(address)\":{\"notice\":\"GOVERNANCE ONLY: Updates the send processor address used for validating and interpreting zk proofs.\"},\"setSustainabilityFee(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp.\"},\"setSustainabilityFeeRecipient(address)\":{\"notice\":\"GOVERNANCE ONLY: Updates the recepient of sustainability fees.\"},\"signalIntent(uint256,uint256,address)\":{\"notice\":\"Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of address (tracked using venmoId). Caller must not be on the depositor's deny list. If there are prunable intents then they will be deleted from the deposit to be able to maintain state hygiene.\"},\"withdrawDeposit(uint256[])\":{\"notice\":\"Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be returned. Deposit will be deleted as long as there are no more outstanding intents.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ramp.sol\":\"Ramp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Ramp.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Bytes32ArrayUtils } from \\\"./external/Bytes32ArrayUtils.sol\\\";\\nimport { Uint256ArrayUtils } from \\\"./external/Uint256ArrayUtils.sol\\\";\\n\\nimport { IPoseidon } from \\\"./interfaces/IPoseidon.sol\\\";\\nimport { IRegistrationProcessor } from \\\"./interfaces/IRegistrationProcessor.sol\\\";\\nimport { ISendProcessor } from \\\"./interfaces/ISendProcessor.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract Ramp is Ownable {\\n\\n    using Bytes32ArrayUtils for bytes32[];\\n    using Uint256ArrayUtils for uint256[];\\n\\n    /* ============ Events ============ */\\n    event AccountRegistered(address indexed accountOwner, bytes32 indexed venmoIdHash);\\n    event DepositReceived(\\n        uint256 indexed depositId,\\n        bytes32 indexed venmoId,\\n        uint256 amount,\\n        uint256 conversionRate\\n    );\\n    event IntentSignaled(\\n        bytes32 indexed intentHash,\\n        uint256 indexed depositId,\\n        bytes32 indexed venmoId,\\n        address to,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event IntentPruned(\\n        bytes32 indexed intentHash,\\n        uint256 indexed depositId\\n    );\\n    // Do we want to emit the onRamper or the venmoId\\n    event IntentFulfilled(\\n        bytes32 indexed intentHash,\\n        uint256 indexed depositId,\\n        address indexed onRamper,\\n        address to,\\n        uint256 amount,\\n        uint256 feeAmount\\n    );\\n    // Do we want to emit the depositor or the venmoId\\n    event DepositWithdrawn(\\n        uint256 indexed depositId,\\n        address indexed depositor,\\n        uint256 amount\\n    );\\n\\n    event DepositClosed(uint256 depositId, address depositor);\\n    event UserAddedToDenylist(bytes32 listOwner, bytes32 deniedUser);\\n    event UserRemovedFromDenylist(bytes32 listOwner, bytes32 approvedUser);\\n    event MinDepositAmountSet(uint256 minDepositAmount);\\n    event MaxOnRampAmountSet(uint256 maxOnRampAmount);\\n    event IntentExpirationPeriodSet(uint256 intentExpirationPeriod);\\n    event OnRampCooldownPeriodSet(uint256 onRampCooldownPeriod);\\n    event SustainabilityFeeUpdated(uint256 fee);\\n    event SustainabilityFeeRecipientUpdated(address feeRecipient);\\n    event NewSendProcessorSet(address sendProcessor);\\n    event NewRegistrationProcessorSet(address registrationProcessor);\\n    event NewReceiveProcessorSet(address receiveProcessor);\\n\\n    /* ============ Structs ============ */\\n\\n    // Each Account is tied to a GlobalAccount via its associated venmoIdHash. Each account is represented by an Ethereum address\\n    // and is allowed to have at most 5 deposits associated with it.\\n    struct AccountInfo {\\n        bytes32 venmoIdHash;                // Poseidon hash of account's venmoId\\n        uint256[] deposits;                 // Array of open account deposits\\n    }\\n\\n    struct Deposit {\\n        address depositor;\\n        uint256[3] packedVenmoId;\\n        uint256 depositAmount;              // Amount of USDC deposited\\n        uint256 remainingDeposits;          // Amount of remaining deposited liquidity\\n        uint256 outstandingIntentAmount;    // Amount of outstanding intents (may include expired intents)\\n        uint256 conversionRate;             // Conversion required by off-ramper between USDC/USD\\n        bytes32[] intentHashes;             // Array of hashes of all open intents (may include some expired if not pruned)\\n    }\\n\\n    struct DepositWithAvailableLiquidity {\\n        uint256 depositId;                  // ID of the deposit\\n        Deposit deposit;                    // Deposit struct\\n        uint256 availableLiquidity;         // Amount of liquidity available to signal intents (net of expired intents)\\n    }\\n\\n    struct Intent {\\n        address onRamper;                   // On-ramper's address\\n        address to;                         // Address to forward funds to (can be same as onRamper)\\n        uint256 deposit;                    // ID of the deposit the intent is signaling on\\n        uint256 amount;                     // Amount of USDC the on-ramper signals intent for on-chain\\n        uint256 intentTimestamp;            // Timestamp of when the intent was signaled\\n    }\\n\\n    struct IntentWithOnRamperId {\\n        Intent intent;                      // Intent struct\\n        bytes32 onRamperIdHash;             // Poseidon hash of the on-ramper's venmoId\\n    }\\n\\n    struct DenyList {\\n        bytes32[] deniedUsers;              // Array of venmoIdHashes that are denied from taking depositors liquidity\\n        mapping(bytes32 => bool) isDenied;  // Mapping of venmoIdHash to boolean indicating if the user is denied\\n    }\\n\\n    // A Global Account is defined as an account represented by one venmoIdHash. This is used to enforce limitations on actions across\\n    // all Ethereum addresses that are associated with that venmoId. In this case we use it to enforce a cooldown period between on ramps,\\n    // restrict each venmo account to one outstanding intent at a time, and to enforce deny lists.\\n    struct GlobalAccountInfo {\\n        bytes32 currentIntentHash;          // Hash of the current open intent (if exists)\\n        uint256 lastOnrampTimestamp;        // Timestamp of the last on-ramp transaction used to check if cooldown period elapsed\\n        DenyList denyList;                  // Deny list of the account\\n    }\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRegisteredUser() {\\n        require(accounts[msg.sender].venmoIdHash != bytes32(0), \\\"Caller must be registered user\\\");\\n        _;\\n    }\\n\\n    /* ============ Constants ============ */\\n    uint256 internal constant PRECISE_UNIT = 1e18;\\n    uint256 internal constant MAX_DEPOSITS = 5;       // An account can only have max 5 different deposit parameterizations to prevent locking funds\\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant MAX_SUSTAINABILITY_FEE = 5e16;   // 5% max sustainability fee\\n    \\n    /* ============ State Variables ============ */\\n    IERC20 public immutable usdc;                                   // USDC token contract\\n    IPoseidon public immutable poseidon;                            // Poseidon hashing contract\\n    IRegistrationProcessor public registrationProcessor;            // Address of registration processor contract, verifies registration e-mails\\n    ISendProcessor public sendProcessor;                            // Address of send processor contract, verifies onRamp emails\\n\\n    bool internal isInitialized;                                    // Indicates if contract has been initialized\\n\\n    mapping(bytes32 => GlobalAccountInfo) internal globalAccount;   // Mapping of venmoIdHash to information used to enforce actions across Ethereum accounts\\n    mapping(address => AccountInfo) internal accounts;              // Mapping of Ethereum accounts to their account information (venmoIdHash and deposits)\\n    mapping(uint256 => Deposit) public deposits;                    // Mapping of depositIds to deposit structs\\n    mapping(bytes32 => Intent) public intents;                      // Mapping of intentHashes to intent structs\\n\\n    uint256 public minDepositAmount;                                // Minimum amount of USDC that can be deposited\\n    uint256 public maxOnRampAmount;                                 // Maximum amount of USDC that can be on-ramped in a single transaction\\n    uint256 public onRampCooldownPeriod;                            // Time period that must elapse between completing an on-ramp and signaling a new intent\\n    uint256 public intentExpirationPeriod;                          // Time period after which an intent can be pruned from the system\\n    uint256 public sustainabilityFee;                               // Fee charged to on-rampers in preciseUnits (1e16 = 1%)\\n    address public sustainabilityFeeRecipient;                      // Address that receives the sustainability fee\\n\\n    uint256 public depositCounter;                                  // Counter for depositIds\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _owner,\\n        IERC20 _usdc,\\n        IPoseidon _poseidon,\\n        uint256 _minDepositAmount,\\n        uint256 _maxOnRampAmount,\\n        uint256 _intentExpirationPeriod,\\n        uint256 _onRampCooldownPeriod,\\n        uint256 _sustainabilityFee,\\n        address _sustainabilityFeeRecipient\\n    )\\n        Ownable()\\n    {\\n        usdc = _usdc;\\n        poseidon = _poseidon;\\n        minDepositAmount = _minDepositAmount;\\n        maxOnRampAmount = _maxOnRampAmount;\\n        intentExpirationPeriod = _intentExpirationPeriod;\\n        onRampCooldownPeriod = _onRampCooldownPeriod;\\n        sustainabilityFee = _sustainabilityFee;\\n        sustainabilityFeeRecipient = _sustainabilityFeeRecipient;\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Initialize Ramp with the addresses of the Processors\\n     *\\n     * @param _registrationProcessor    Registration processor address\\n     * @param _sendProcessor            Send processor address\\n     */\\n    function initialize(\\n        IRegistrationProcessor _registrationProcessor,\\n        ISendProcessor _sendProcessor\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n\\n        registrationProcessor = _registrationProcessor;\\n        sendProcessor = _sendProcessor;\\n\\n        isInitialized = true;\\n    }\\n\\n    /**\\n     * @notice Registers a new account by pulling the hash of the account id from the proof and assigning the account owner to the\\n     * sender of the transaction. One venmo account can be registered to multiple Ethereum addresses.\\n     *\\n     * @param _a        Parameter of zk proof\\n     * @param _b        Parameter of zk proof\\n     * @param _c        Parameter of zk proof\\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, userIdHash\\n     */\\n    function register(\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[5] memory _signals\\n    )\\n        external\\n    {\\n        require(accounts[msg.sender].venmoIdHash == bytes32(0), \\\"Account already associated with venmoId\\\");\\n        bytes32 venmoIdHash = _verifyRegistrationProof(_a, _b, _c, _signals);\\n\\n        accounts[msg.sender].venmoIdHash = venmoIdHash;\\n\\n        emit AccountRegistered(msg.sender, venmoIdHash);\\n    }\\n\\n    /**\\n     * @notice Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to\\n     * previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\\n     * of USDC.\\n     *\\n     * @param _packedVenmoId    The packed venmo id of the account owner (we pack for easy use with poseidon)\\n     * @param _depositAmount    The amount of USDC to off-ramp\\n     * @param _receiveAmount    The amount of USD to receive\\n     */\\n    function offRamp(\\n        uint256[3] memory _packedVenmoId,\\n        uint256 _depositAmount,\\n        uint256 _receiveAmount\\n    )\\n        external\\n        onlyRegisteredUser\\n    {\\n        bytes32 venmoIdHash = bytes32(poseidon.poseidon(_packedVenmoId));\\n\\n        require(accounts[msg.sender].venmoIdHash == venmoIdHash, \\\"Sender must be the account owner\\\");\\n        require(accounts[msg.sender].deposits.length < MAX_DEPOSITS, \\\"Maximum deposit amount reached\\\");\\n        require(_depositAmount >= minDepositAmount, \\\"Deposit amount must be greater than min deposit amount\\\");\\n        require(_receiveAmount > 0, \\\"Receive amount must be greater than 0\\\");\\n\\n        uint256 conversionRate = (_depositAmount * PRECISE_UNIT) / _receiveAmount;\\n        uint256 depositId = depositCounter++;\\n\\n        accounts[msg.sender].deposits.push(depositId);\\n\\n        deposits[depositId] = Deposit({\\n            depositor: msg.sender,\\n            packedVenmoId: _packedVenmoId,\\n            depositAmount: _depositAmount,\\n            remainingDeposits: _depositAmount,\\n            outstandingIntentAmount: 0,\\n            conversionRate: conversionRate,\\n            intentHashes: new bytes32[](0)\\n        });\\n\\n        usdc.transferFrom(msg.sender, address(this), _depositAmount);\\n\\n        emit DepositReceived(depositId, venmoIdHash, _depositAmount, conversionRate);\\n    }\\n\\n    /**\\n     * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\\n     * in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of\\n     * address (tracked using venmoId). Caller must not be on the depositor's deny list. If there are prunable intents then\\n     * they will be deleted from the deposit to be able to maintain state hygiene.\\n     *\\n     * @param _depositId    The ID of the deposit the on-ramper intends to use for \\n     * @param _amount       The amount of USDC the user wants to on-ramp\\n     * @param _to           Address to forward funds to (can be same as onRamper)\\n     */\\n    function signalIntent(uint256 _depositId, uint256 _amount, address _to) external onlyRegisteredUser {\\n        bytes32 venmoIdHash = accounts[msg.sender].venmoIdHash;\\n        Deposit storage deposit = deposits[_depositId];\\n        bytes32 depositorVenmoIdHash = accounts[deposit.depositor].venmoIdHash;\\n\\n        // Caller validity checks\\n        require(!globalAccount[depositorVenmoIdHash].denyList.isDenied[venmoIdHash], \\\"Onramper on depositor's denylist\\\");\\n        require(\\n            globalAccount[venmoIdHash].lastOnrampTimestamp + onRampCooldownPeriod <= block.timestamp,\\n            \\\"On ramp cool down period not elapsed\\\"\\n        );\\n        require(globalAccount[venmoIdHash].currentIntentHash == bytes32(0), \\\"Intent still outstanding\\\");\\n        require(depositorVenmoIdHash != venmoIdHash, \\\"Sender cannot be the depositor\\\");\\n\\n        // Intent information checks\\n        require(deposit.depositor != address(0), \\\"Deposit does not exist\\\");\\n        require(_amount > 0, \\\"Signaled amount must be greater than 0\\\");\\n        require(_amount <= maxOnRampAmount, \\\"Signaled amount must be less than max on-ramp amount\\\");\\n        require(_to != address(0), \\\"Cannot send to zero address\\\");\\n\\n        bytes32 intentHash = _calculateIntentHash(venmoIdHash, _depositId);\\n\\n        if (deposit.remainingDeposits < _amount) {\\n            (\\n                bytes32[] memory prunableIntents,\\n                uint256 reclaimableAmount\\n            ) = _getPrunableIntents(_depositId);\\n\\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \\\"Not enough liquidity\\\");\\n\\n            _pruneIntents(deposit, prunableIntents);\\n            deposit.remainingDeposits += reclaimableAmount;\\n            deposit.outstandingIntentAmount -= reclaimableAmount;\\n        }\\n\\n        intents[intentHash] = Intent({\\n            onRamper: msg.sender,\\n            to: _to,\\n            deposit: _depositId,\\n            amount: _amount,\\n            intentTimestamp: block.timestamp\\n        });\\n\\n        globalAccount[venmoIdHash].currentIntentHash = intentHash;\\n\\n        deposit.remainingDeposits -= _amount;\\n        deposit.outstandingIntentAmount += _amount;\\n        deposit.intentHashes.push(intentHash);\\n\\n        emit IntentSignaled(intentHash, _depositId, venmoIdHash, _to, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new\\n     * intent. Deposit state is updated to reflect the cancelled intent.\\n     *\\n     * @param _intentHash    Hash of intent being cancelled\\n     */\\n    function cancelIntent(bytes32 _intentHash) external {\\n        Intent memory intent = intents[_intentHash];\\n        \\n        require(intent.intentTimestamp != 0, \\\"Intent does not exist\\\");\\n        require(intent.onRamper == msg.sender, \\\"Sender must be the on-ramper\\\");\\n\\n        Deposit storage deposit = deposits[intent.deposit];\\n\\n        _pruneIntent(deposit, _intentHash);\\n\\n        deposit.remainingDeposits += intent.amount;\\n        deposit.outstandingIntentAmount -= intent.amount;\\n    }\\n\\n    /**\\n     * @notice Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated,\\n     * intent is removed, and deposit state is updated. USDC is transferred to the on-ramper.\\n     *\\n     * @param _a        Parameter of zk proof\\n     * @param _b        Parameter of zk proof\\n     * @param _c        Parameter of zk proof\\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, timestamp, onRamperIdHash,\\n     *                  nullifier, intentHash\\n     */\\n    function onRamp(\\n        uint256[2] memory _a,\\n        uint256[2][2] memory _b,\\n        uint256[2] memory _c,\\n        uint256[12] memory _signals\\n    )\\n        external\\n    {\\n        (\\n            Intent memory intent,\\n            Deposit storage deposit,\\n            bytes32 intentHash\\n        ) = _verifyOnRampProof(_a, _b, _c, _signals);\\n\\n        _pruneIntent(deposit, intentHash);\\n\\n        deposit.outstandingIntentAmount -= intent.amount;\\n        globalAccount[accounts[intent.onRamper].venmoIdHash].lastOnrampTimestamp = block.timestamp;\\n        _closeDepositIfNecessary(intent.deposit, deposit);\\n\\n        _transferFunds(intentHash, intent);\\n    }\\n\\n    /**\\n     * @notice Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all\\n     * remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be\\n     * returned. Deposit will be deleted as long as there are no more outstanding intents.\\n     *\\n     * @param _depositIds   Array of depositIds the depositor is attempting to withdraw\\n     */\\n    function withdrawDeposit(uint256[] memory _depositIds) external {\\n        uint256 returnAmount;\\n\\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\\n            uint256 depositId = _depositIds[i];\\n            Deposit storage deposit = deposits[depositId];\\n\\n            require(deposit.depositor == msg.sender, \\\"Sender must be the depositor\\\");\\n\\n            (\\n                bytes32[] memory prunableIntents,\\n                uint256 reclaimableAmount\\n            ) = _getPrunableIntents(depositId);\\n\\n            _pruneIntents(deposit, prunableIntents);\\n\\n            returnAmount += deposit.remainingDeposits + reclaimableAmount;\\n            \\n            deposit.outstandingIntentAmount -= reclaimableAmount;\\n\\n            emit DepositWithdrawn(depositId, deposit.depositor, deposit.remainingDeposits + reclaimableAmount);\\n            \\n            delete deposit.remainingDeposits;\\n            _closeDepositIfNecessary(depositId, deposit);\\n        }\\n\\n        usdc.transfer(msg.sender, returnAmount);\\n    }\\n\\n    /**\\n     * @notice Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to\\n     * signal an intent on the user's deposit they will be denied.\\n     *\\n     * @param _deniedUser   Poseidon hash of the venmoId being banned\\n     */\\n    function addAccountToDenylist(bytes32 _deniedUser) external onlyRegisteredUser {\\n        bytes32 denyingUser = accounts[msg.sender].venmoIdHash;\\n\\n        require(!globalAccount[denyingUser].denyList.isDenied[_deniedUser], \\\"User already on denylist\\\");\\n\\n        globalAccount[denyingUser].denyList.isDenied[_deniedUser] = true;\\n        globalAccount[denyingUser].denyList.deniedUsers.push(_deniedUser);\\n\\n        emit UserAddedToDenylist(denyingUser, _deniedUser);\\n    }\\n\\n    /**\\n     * @notice Removes a venmoId from a depositor's deny list.\\n     *\\n     * @param _approvedUser   Poseidon hash of the venmoId being approved\\n     */\\n    function removeAccountFromDenylist(bytes32 _approvedUser) external onlyRegisteredUser {\\n        bytes32 approvingUser = accounts[msg.sender].venmoIdHash;\\n\\n        require(globalAccount[approvingUser].denyList.isDenied[_approvedUser], \\\"User not on denylist\\\");\\n\\n        globalAccount[approvingUser].denyList.isDenied[_approvedUser] = false;\\n        globalAccount[approvingUser].denyList.deniedUsers.removeStorage(_approvedUser);\\n\\n        emit UserRemovedFromDenylist(approvingUser, _approvedUser);\\n    }\\n\\n    /* ============ Governance Functions ============ */\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the send processor address used for validating and interpreting zk proofs.\\n     *\\n     * @param _sendProcessor   New send proccesor address\\n     */\\n    function setSendProcessor(ISendProcessor _sendProcessor) external onlyOwner {\\n        sendProcessor = _sendProcessor;\\n        emit NewSendProcessorSet(address(_sendProcessor));\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the registration processor address used for validating and interpreting zk proofs.\\n     *\\n     * @param _registrationProcessor   New registration proccesor address\\n     */\\n    function setRegistrationProcessor(IRegistrationProcessor _registrationProcessor) external onlyOwner {\\n        registrationProcessor = _registrationProcessor;\\n        emit NewRegistrationProcessorSet(address(_registrationProcessor));\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\\n     *\\n     * @param _minDepositAmount   The new minimum deposit amount\\n     */\\n    function setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\\n        require(_minDepositAmount != 0, \\\"Minimum deposit cannot be zero\\\");\\n\\n        minDepositAmount = _minDepositAmount;\\n        emit MinDepositAmountSet(_minDepositAmount);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp.\\n     *\\n     * @param _fee   The new sustainability fee in precise units (10**18, ie 10% = 1e17)\\n     */\\n    function setSustainabilityFee(uint256 _fee) external onlyOwner {\\n        require(_fee <= MAX_SUSTAINABILITY_FEE, \\\"Fee cannot be greater than max fee\\\");\\n\\n        sustainabilityFee = _fee;\\n        emit SustainabilityFeeUpdated(_fee);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the recepient of sustainability fees.\\n     *\\n     * @param _feeRecipient   The new fee recipient address\\n     */\\n    function setSustainabilityFeeRecipient(address _feeRecipient) external onlyOwner {\\n        require(_feeRecipient != address(0), \\\"Fee recipient cannot be zero address\\\");\\n\\n        sustainabilityFeeRecipient = _feeRecipient;\\n        emit SustainabilityFeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than\\n     * this amount a user must make multiple transactions.\\n     *\\n     * @param _maxOnRampAmount   The new max on ramp amount\\n     */\\n    function setMaxOnRampAmount(uint256 _maxOnRampAmount) external onlyOwner {\\n        require(_maxOnRampAmount != 0, \\\"Max on ramp amount cannot be zero\\\");\\n\\n        maxOnRampAmount = _maxOnRampAmount;\\n        emit MaxOnRampAmountSet(_maxOnRampAmount);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this\\n     * amount of time before they can signalIntent to on-ramp again.\\n     *\\n     * @param _onRampCooldownPeriod   New on-ramp cooldown period\\n     */\\n    function setOnRampCooldownPeriod(uint256 _onRampCooldownPeriod) external onlyOwner {\\n        onRampCooldownPeriod = _onRampCooldownPeriod;\\n        emit OnRampCooldownPeriodSet(_onRampCooldownPeriod);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\\n     * locking up a depositor's funds.\\n     *\\n     * @param _intentExpirationPeriod   New intent expiration period\\n     */\\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\\n        require(_intentExpirationPeriod != 0, \\\"Max intent expiration period cannot be zero\\\");\\n\\n        intentExpirationPeriod = _intentExpirationPeriod;\\n        emit IntentExpirationPeriodSet(_intentExpirationPeriod);\\n    }\\n\\n\\n    /* ============ External View Functions ============ */\\n\\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\\n        return deposits[_depositId];\\n    }\\n\\n    function getAccountInfo(address _account) external view returns (AccountInfo memory) {\\n        return accounts[_account];\\n    }\\n\\n    function getVenmoIdCurrentIntentHash(address _account) external view returns (bytes32) {\\n        return globalAccount[accounts[_account].venmoIdHash].currentIntentHash;\\n    }\\n\\n    function getLastOnRampTimestamp(address _account) external view returns (uint256) {\\n        return globalAccount[accounts[_account].venmoIdHash].lastOnrampTimestamp;\\n    }\\n\\n    function getDeniedUsers(address _account) external view returns (bytes32[] memory) {\\n        return globalAccount[accounts[_account].venmoIdHash].denyList.deniedUsers;\\n    }\\n\\n    function isDeniedUser(address _account, bytes32 _deniedUser) external view returns (bool) {\\n        return globalAccount[accounts[_account].venmoIdHash].denyList.isDenied[_deniedUser];\\n    }\\n\\n    function getIntentsWithOnRamperId(bytes32[] calldata _intentHashes) external view returns (IntentWithOnRamperId[] memory) {\\n        IntentWithOnRamperId[] memory intentsWithOnRamperId = new IntentWithOnRamperId[](_intentHashes.length);\\n\\n        for (uint256 i = 0; i < _intentHashes.length; ++i) {\\n            Intent memory intent = intents[_intentHashes[i]];\\n            intentsWithOnRamperId[i] = IntentWithOnRamperId({\\n                intent: intent,\\n                onRamperIdHash: accounts[intent.onRamper].venmoIdHash\\n            });\\n        }\\n\\n        return intentsWithOnRamperId;\\n    }\\n\\n    function getAccountDeposits(address _account) external view returns (DepositWithAvailableLiquidity[] memory accountDeposits) {\\n        uint256[] memory accountDepositIds = accounts[_account].deposits;\\n        accountDeposits = new DepositWithAvailableLiquidity[](accountDepositIds.length);\\n        \\n        for (uint256 i = 0; i < accountDepositIds.length; ++i) {\\n            uint256 depositId = accountDepositIds[i];\\n            Deposit memory deposit = deposits[depositId];\\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\\n\\n            accountDeposits[i] = DepositWithAvailableLiquidity({\\n                depositId: depositId,\\n                deposit: deposit,\\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\\n            });\\n        }\\n    }\\n\\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositWithAvailableLiquidity[] memory depositArray) {\\n        depositArray = new DepositWithAvailableLiquidity[](_depositIds.length);\\n\\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\\n            uint256 depositId = _depositIds[i];\\n            Deposit memory deposit = deposits[depositId];\\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\\n\\n            depositArray[i] = DepositWithAvailableLiquidity({\\n                depositId: depositId,\\n                deposit: deposit,\\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\\n            });\\n        }\\n\\n        return depositArray;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Calculates the intentHash of new intent\\n     */\\n    function _calculateIntentHash(\\n        bytes32 _venmoId,\\n        uint256 _depositId\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (bytes32 intentHash)\\n    {\\n        // Mod with circom prime field to make sure it fits in a 254-bit field\\n        uint256 intermediateHash = uint256(keccak256(abi.encodePacked(_venmoId, _depositId, block.timestamp)));\\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\\n    }\\n\\n    /**\\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\\n     * the outstanding amounts are summed and returned alongside the intentHashes\\n     */\\n    function _getPrunableIntents(\\n        uint256 _depositId\\n    )\\n        internal\\n        view\\n        returns(bytes32[] memory prunableIntents, uint256 reclaimedAmount)\\n    {\\n        bytes32[] memory intentHashes = deposits[_depositId].intentHashes;\\n        prunableIntents = new bytes32[](intentHashes.length);\\n\\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\\n            Intent memory intent = intents[intentHashes[i]];\\n            if (intent.intentTimestamp + intentExpirationPeriod < block.timestamp) {\\n                prunableIntents[i] = intentHashes[i];\\n                reclaimedAmount += intent.amount;\\n            }\\n        }\\n    }\\n\\n    function _pruneIntents(Deposit storage _deposit, bytes32[] memory _intents) internal {\\n        for (uint256 i = 0; i < _intents.length; ++i) {\\n            if (_intents[i] != bytes32(0)) {\\n                _pruneIntent(_deposit, _intents[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Pruning an intent involves deleting its state from the intents mapping, zeroing out the intendee's currentIntentHash in\\n     * their global account mapping, and deleting the intentHash from the deposit's intentHashes array.\\n     */\\n    function _pruneIntent(Deposit storage _deposit, bytes32 _intentHash) internal {\\n        Intent memory intent = intents[_intentHash];\\n\\n        delete globalAccount[accounts[intent.onRamper].venmoIdHash].currentIntentHash;\\n        delete intents[_intentHash];\\n        _deposit.intentHashes.removeStorage(_intentHash);\\n\\n        emit IntentPruned(_intentHash, intent.deposit);\\n    }\\n\\n    /**\\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\\n     * deposits mapping and removes tracking it in the user's accounts mapping.\\n     */\\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\\n        if (openDepositAmount == 0) {\\n            accounts[_deposit.depositor].deposits.removeStorage(_depositId);\\n            emit DepositClosed(_depositId, _deposit.depositor);\\n            delete deposits[_depositId];\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if sustainability fee has been defined, if so sends fee to the fee recipient and intent amount minus fee\\n     * to the on-ramper. If sustainability fee is undefined then full intent amount is transferred to on-ramper.\\n     */\\n    function _transferFunds(bytes32 _intentHash, Intent memory _intent) internal {\\n        uint256 fee;\\n        if (sustainabilityFee != 0) {\\n            fee = (_intent.amount * sustainabilityFee) / PRECISE_UNIT;\\n            usdc.transfer(sustainabilityFeeRecipient, fee);\\n        }\\n\\n        uint256 onRampAmount = _intent.amount - fee;\\n        usdc.transfer(_intent.to, onRampAmount);\\n\\n        emit IntentFulfilled(_intentHash, _intent.deposit, _intent.onRamper, _intent.to, onRampAmount, fee);\\n    }\\n\\n    /**\\n     * @notice Validate venmo send payment email and check that it hasn't already been used (done on SendProcessor).\\n     * Additionally, we validate that the offRamperIdHash matches the one from the specified intent and that enough\\n     * was paid off-chain inclusive of the conversionRate.\\n     */\\n    function _verifyOnRampProof(\\n        uint256[2] memory _a,\\n        uint256[2][2] memory _b,\\n        uint256[2] memory _c,\\n        uint256[12] memory _signals\\n    )\\n        internal\\n        returns(Intent memory, Deposit storage, bytes32)\\n    {\\n        (\\n            uint256 amount,\\n            uint256 timestamp,\\n            bytes32 offRamperIdHash,\\n            bytes32 onRamperIdHash,\\n            bytes32 intentHash\\n        ) = sendProcessor.processProof(\\n            ISendProcessor.SendProof({\\n                a: _a,\\n                b: _b,\\n                c: _c,\\n                signals: _signals\\n            })\\n        );\\n\\n        Intent memory intent = intents[intentHash];\\n        Deposit storage deposit = deposits[intent.deposit];\\n\\n        require(intent.onRamper != address(0), \\\"Intent does not exist\\\");\\n        require(intent.intentTimestamp <= timestamp, \\\"Intent was not created before send\\\");\\n        require(accounts[deposit.depositor].venmoIdHash == offRamperIdHash, \\\"Offramper id does not match\\\");\\n        require(accounts[intent.onRamper].venmoIdHash == onRamperIdHash, \\\"Onramper id does not match\\\");\\n        require(amount >= (intent.amount * PRECISE_UNIT) / deposit.conversionRate, \\\"Payment was not enough\\\");\\n\\n        return (intent, deposit, intentHash);\\n    }\\n\\n    /**\\n     * @notice Validate the user has a venmo account, we do not nullify this email since it can be reused to register under\\n     * different addresses.\\n     */\\n    function _verifyRegistrationProof(\\n        uint256[2] memory _a,\\n        uint256[2][2] memory _b,\\n        uint256[2] memory _c,\\n        uint256[5] memory _signals\\n    )\\n        internal\\n        view\\n        returns(bytes32)\\n    {\\n        bytes32 venmoIdHash = registrationProcessor.processProof(\\n            IRegistrationProcessor.RegistrationProof({\\n                a: _a,\\n                b: _b,\\n                c: _c,\\n                signals: _signals\\n            })\\n        );\\n\\n        return venmoIdHash;\\n    }\\n}\\n\",\"keccak256\":\"0x0673d848a6f2d2a80803fe45e2f186625c1a09998eb1da414a39573afcaa4f4f\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/external/Uint256ArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Uint256ArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Uint256 Arrays\\n */\\nlibrary Uint256ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newUints = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newUints[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newUints[aLength + j] = B[j];\\n        }\\n        return newUints;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(uint256[] storage A, uint256 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"uint256 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x102021415f8444ff563fc6d0082f39296f47c09ce73fb4cd642e700ac489eefe\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPoseidon.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IPoseidon {\\n    function poseidon(uint256[3] memory _a) external pure returns(uint256);\\n}\\n\",\"keccak256\":\"0x9ba8b00cf908c8eb9e0ef5a3b116341f6c50f7745399fc7805a148bf500991b5\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IRegistrationProcessor {\\n\\n    struct RegistrationProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[5] signals;\\n    }\\n\\n    function processProof(\\n        RegistrationProof calldata _proof\\n    )\\n        external\\n        view\\n    returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc80e1b5561af1a8631547c72e6c6dcdf4e66c06b3eb34b1a8db1bb0f6d3ea90f\",\"license\":\"MIT\"},\"contracts/interfaces/ISendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface ISendProcessor {\\n\\n    struct SendProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[12] signals;\\n    }\\n\\n    function processProof(\\n        SendProof calldata _proof\\n    )\\n        external\\n    returns(uint256, uint256, bytes32, bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0x16811e82d90b1e15eafd8f3de30b6a05a48c906c96e65d263c557c66e9fcedb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAccountToDenylist(bytes32)": {
        "params": {
          "_deniedUser": "Poseidon hash of the venmoId being banned"
        }
      },
      "cancelIntent(bytes32)": {
        "params": {
          "_intentHash": "Hash of intent being cancelled"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_registrationProcessor": "Registration processor address",
          "_sendProcessor": "Send processor address"
        }
      },
      "offRamp(uint256[3],uint256,uint256)": {
        "params": {
          "_depositAmount": "The amount of USDC to off-ramp",
          "_packedVenmoId": "The packed venmo id of the account owner (we pack for easy use with poseidon)",
          "_receiveAmount": "The amount of USD to receive"
        }
      },
      "onRamp(uint256[2],uint256[2][2],uint256[2],uint256[12])": {
        "params": {
          "_a": "Parameter of zk proof",
          "_b": "Parameter of zk proof",
          "_c": "Parameter of zk proof",
          "_signals": "Encoded public signals of the zk proof, contains mailserverHash, fromEmail, timestamp, onRamperIdHash,                  nullifier, intentHash"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(uint256[2],uint256[2][2],uint256[2],uint256[5])": {
        "params": {
          "_a": "Parameter of zk proof",
          "_b": "Parameter of zk proof",
          "_c": "Parameter of zk proof",
          "_signals": "Encoded public signals of the zk proof, contains mailserverHash, fromEmail, userIdHash"
        }
      },
      "removeAccountFromDenylist(bytes32)": {
        "params": {
          "_approvedUser": "Poseidon hash of the venmoId being approved"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setIntentExpirationPeriod(uint256)": {
        "params": {
          "_intentExpirationPeriod": "New intent expiration period"
        }
      },
      "setMaxOnRampAmount(uint256)": {
        "params": {
          "_maxOnRampAmount": "The new max on ramp amount"
        }
      },
      "setMinDepositAmount(uint256)": {
        "params": {
          "_minDepositAmount": "The new minimum deposit amount"
        }
      },
      "setOnRampCooldownPeriod(uint256)": {
        "params": {
          "_onRampCooldownPeriod": "New on-ramp cooldown period"
        }
      },
      "setRegistrationProcessor(address)": {
        "params": {
          "_registrationProcessor": "New registration proccesor address"
        }
      },
      "setSendProcessor(address)": {
        "params": {
          "_sendProcessor": "New send proccesor address"
        }
      },
      "setSustainabilityFee(uint256)": {
        "params": {
          "_fee": "The new sustainability fee in precise units (10**18, ie 10% = 1e17)"
        }
      },
      "setSustainabilityFeeRecipient(address)": {
        "params": {
          "_feeRecipient": "The new fee recipient address"
        }
      },
      "signalIntent(uint256,uint256,address)": {
        "params": {
          "_amount": "The amount of USDC the user wants to on-ramp",
          "_depositId": "The ID of the deposit the on-ramper intends to use for ",
          "_to": "Address to forward funds to (can be same as onRamper)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawDeposit(uint256[])": {
        "params": {
          "_depositIds": "Array of depositIds the depositor is attempting to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAccountToDenylist(bytes32)": {
        "notice": "Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to signal an intent on the user's deposit they will be denied."
      },
      "cancelIntent(bytes32)": {
        "notice": "Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new intent. Deposit state is updated to reflect the cancelled intent."
      },
      "initialize(address,address)": {
        "notice": "Initialize Ramp with the addresses of the Processors"
      },
      "offRamp(uint256[3],uint256,uint256)": {
        "notice": "Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount of USDC."
      },
      "onRamp(uint256[2],uint256[2][2],uint256[2],uint256[12])": {
        "notice": "Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated, intent is removed, and deposit state is updated. USDC is transferred to the on-ramper."
      },
      "register(uint256[2],uint256[2][2],uint256[2],uint256[5])": {
        "notice": "Registers a new account by pulling the hash of the account id from the proof and assigning the account owner to the sender of the transaction. One venmo account can be registered to multiple Ethereum addresses."
      },
      "removeAccountFromDenylist(bytes32)": {
        "notice": "Removes a venmoId from a depositor's deny list."
      },
      "setIntentExpirationPeriod(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent locking up a depositor's funds."
      },
      "setMaxOnRampAmount(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than this amount a user must make multiple transactions."
      },
      "setMinDepositAmount(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping."
      },
      "setOnRampCooldownPeriod(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this amount of time before they can signalIntent to on-ramp again."
      },
      "setRegistrationProcessor(address)": {
        "notice": "GOVERNANCE ONLY: Updates the registration processor address used for validating and interpreting zk proofs."
      },
      "setSendProcessor(address)": {
        "notice": "GOVERNANCE ONLY: Updates the send processor address used for validating and interpreting zk proofs."
      },
      "setSustainabilityFee(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp."
      },
      "setSustainabilityFeeRecipient(address)": {
        "notice": "GOVERNANCE ONLY: Updates the recepient of sustainability fees."
      },
      "signalIntent(uint256,uint256,address)": {
        "notice": "Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of address (tracked using venmoId). Caller must not be on the depositor's deny list. If there are prunable intents then they will be deleted from the deposit to be able to maintain state hygiene."
      },
      "withdrawDeposit(uint256[])": {
        "notice": "Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be returned. Deposit will be deleted as long as there are no more outstanding intents."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2121,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "registrationProcessor",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRegistrationProcessor)4837"
      },
      {
        "astId": 2124,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "sendProcessor",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISendProcessor)4875"
      },
      {
        "astId": 2126,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "isInitialized",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2131,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "globalAccount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(GlobalAccountInfo)2082_storage)"
      },
      {
        "astId": 2136,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "accounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AccountInfo)2023_storage)"
      },
      {
        "astId": 2141,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "deposits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Deposit)2041_storage)"
      },
      {
        "astId": 2146,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "intents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Intent)2060_storage)"
      },
      {
        "astId": 2148,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "minDepositAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2150,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "maxOnRampAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2152,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "onRampCooldownPeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2154,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "intentExpirationPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2156,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "sustainabilityFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2158,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "sustainabilityFeeRecipient",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2160,
        "contract": "contracts/Ramp.sol:Ramp",
        "label": "depositCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRegistrationProcessor)4837": {
        "encoding": "inplace",
        "label": "contract IRegistrationProcessor",
        "numberOfBytes": "20"
      },
      "t_contract(ISendProcessor)4875": {
        "encoding": "inplace",
        "label": "contract ISendProcessor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AccountInfo)2023_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ramp.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)2023_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(GlobalAccountInfo)2082_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Ramp.GlobalAccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GlobalAccountInfo)2082_storage"
      },
      "t_mapping(t_bytes32,t_struct(Intent)2060_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Ramp.Intent)",
        "numberOfBytes": "32",
        "value": "t_struct(Intent)2060_storage"
      },
      "t_mapping(t_uint256,t_struct(Deposit)2041_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ramp.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)2041_storage"
      },
      "t_struct(AccountInfo)2023_storage": {
        "encoding": "inplace",
        "label": "struct Ramp.AccountInfo",
        "members": [
          {
            "astId": 2019,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "venmoIdHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2022,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "deposits",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DenyList)2074_storage": {
        "encoding": "inplace",
        "label": "struct Ramp.DenyList",
        "members": [
          {
            "astId": 2069,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "deniedUsers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2073,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "isDenied",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Deposit)2041_storage": {
        "encoding": "inplace",
        "label": "struct Ramp.Deposit",
        "members": [
          {
            "astId": 2025,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2029,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "packedVenmoId",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 2031,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "depositAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2033,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "remainingDeposits",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2035,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "outstandingIntentAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2037,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "conversionRate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2040,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "intentHashes",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(GlobalAccountInfo)2082_storage": {
        "encoding": "inplace",
        "label": "struct Ramp.GlobalAccountInfo",
        "members": [
          {
            "astId": 2076,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "currentIntentHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2078,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "lastOnrampTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2081,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "denyList",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(DenyList)2074_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Intent)2060_storage": {
        "encoding": "inplace",
        "label": "struct Ramp.Intent",
        "members": [
          {
            "astId": 2051,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "onRamper",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2053,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2055,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "deposit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2057,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2059,
            "contract": "contracts/Ramp.sol:Ramp",
            "label": "intentTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}