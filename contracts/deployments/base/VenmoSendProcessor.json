{
  "address": "0x9011fC66C34546511cf1e514F248fB98Af95b96d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_venmoMailserverKeyHashAdapter",
          "type": "address"
        },
        {
          "internalType": "contract INullifierRegistry",
          "name": "_nullifierRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PACK_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMailserverKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailserverKeyHashAdapter",
      "outputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nullifierRegistry",
      "outputs": [
        {
          "internalType": "contract INullifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[12]",
              "name": "signals",
              "type": "uint256[12]"
            }
          ],
          "internalType": "struct ISendProcessor.SendProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "offRamperIdHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "onRamperIdHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "name": "setEmailFromAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_mailserverKeyHashAdapter",
          "type": "address"
        }
      ],
      "name": "setMailserverKeyHashAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[12]",
          "name": "_pubSignals",
          "type": "uint256[12]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd00b0bd0167724d27e5c95dd6dafc775e526c323e22ac5122252221271cb989a",
  "receipt": {
    "to": null,
    "from": "0xdd93E0f5fC32c86A568d87Cb4f08598f55E980F3",
    "contractAddress": "0x9011fC66C34546511cf1e514F248fB98Af95b96d",
    "transactionIndex": 4,
    "gasUsed": "1858638",
    "logsBloom": "0x
    "blockHash": "0x1ec620471e8c4cb2cb9eaba3be496c0bd0d9d7b0f502a2e17d9151c5c6147d16",
    "transactionHash": "0xd00b0bd0167724d27e5c95dd6dafc775e526c323e22ac5122252221271cb989a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 6681098,
        "transactionHash": "0xd00b0bd0167724d27e5c95dd6dafc775e526c323e22ac5122252221271cb989a",
        "address": "0x9011fC66C34546511cf1e514F248fB98Af95b96d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dd93e0f5fc32c86a568d87cb4f08598f55e980f3"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x1ec620471e8c4cb2cb9eaba3be496c0bd0d9d7b0f502a2e17d9151c5c6147d16"
      }
    ],
    "blockNumber": 6681098,
    "cumulativeGasUsed": "2279804",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB084f36C5B7193af8Dd17025b36FBe2DD496a06f",
    "0x8FF8F6698Bd7bafFaD97D23ed46c5dD0b515B0BA",
    "0x8Ccd3701bD7120D9b390B8b2060AF154f8fD190b",
    "venmo@venmo.com"
  ],
  "numDeployments": 1,
  "solcInputHash": "582bda84e77341f31e48e553d6955fd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_venmoMailserverKeyHashAdapter\",\"type\":\"address\"},{\"internalType\":\"contract INullifierRegistry\",\"name\":\"_nullifierRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACK_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMailserverKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailserverKeyHashAdapter\",\"outputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nullifierRegistry\",\"outputs\":[{\"internalType\":\"contract INullifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[12]\",\"name\":\"signals\",\"type\":\"uint256[12]\"}],\"internalType\":\"struct ISendProcessor.SendProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offRamperIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"onRamperIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"name\":\"setEmailFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_mailserverKeyHashAdapter\",\"type\":\"address\"}],\"name\":\"setMailserverKeyHashAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[12]\",\"name\":\"_pubSignals\",\"type\":\"uint256[12]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setEmailFromAddress(string)\":{\"params\":{\"_emailFromAddress\":\"The from email address for validated emails, MUST BE PROPERLY PADDED\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setEmailFromAddress(string)\":{\"notice\":\"ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/processors/VenmoSendProcessor.sol\":\"VenmoSendProcessor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zk-email/contracts/utils/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n// https://github.com/nalinbhardwaj/ethdosnumber/blob/main/ethdos-contracts/src/HexStrings.sol\\nlibrary StringUtils {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n    uint256 internal constant DEFAULT_PACK_SIZE = 31;\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes32 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function stringEq(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toString(bytes memory data) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    // 1 packed byte = packSize (usually 31) normal bytes, all in one 255/256-bit value\\n    // Note that this is not 32 due to the field modulus of circom\\n    function convertPackedByteToString(uint256 packedByte, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint256[] memory packedBytes = new uint256[](1);\\n        packedBytes[0] = packedByte;\\n        return convertPackedBytesToString(packedBytes, packSize, packSize);\\n    }\\n\\n    // Note: This convenience function removes the max string length check, which may cause misalignment with the circom\\n    // If using this, then the circom needs to rangecheck packed length in the circuit itself\\n    // This defaults to 31 bytes per packed byte\\n    function convertPackedBytesToString(uint256[] memory packedBytes) \\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        return convertPackedBytesToString(packedBytes, packedBytes.length * DEFAULT_PACK_SIZE, DEFAULT_PACK_SIZE);\\n    }\\n\\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\\n    // signals is the total number of signals (i.e. bytes) packed into the packedBytes. it defaults to packedBytes.length * packSize\\n    function convertPackedBytesToString(uint256[] memory packedBytes, uint256 signals, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint8 state = 0;\\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * packSize);\\n        uint256 nonzeroBytesArrayIndex = 0;\\n        for (uint16 i = 0; i < packedBytes.length; i++) {\\n            uint256 packedByte = packedBytes[i];\\n            uint8[] memory unpackedBytes = new uint8[](packSize);\\n            for (uint256 j = 0; j < packSize; j++) {\\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\\n            }\\n            for (uint256 j = 0; j < packSize; j++) {\\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\\n                if (unpackedByte != 0) {\\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\\n                    nonzeroBytesArrayIndex++;\\n                    if (state % 2 == 0) {\\n                        state += 1;\\n                    }\\n                } else {\\n                    if (state % 2 == 1) {\\n                        state += 1;\\n                    }\\n                }\\n                packedByte = packedByte >> 8;\\n            }\\n        }\\n        // TODO: You might want to assert that the state is exactly 1 or 2\\n        // If not, that means empty bytse have been removed from the middle and things have been concatenated.\\n        // We removed due to some tests failing, but this is not ideal and the require should be uncommented as soon as tests pass with it.\\n\\n        // require(state == 1 || state == 2, \\\"Invalid final state of packed bytes in email; more than two non-zero regions found!\\\");\\n        require(state >= 1, \\\"No packed bytes found! Invalid final state of packed bytes in email; value is likely 0!\\\");\\n        require(nonzeroBytesArrayIndex <= signals, \\\"Packed bytes more than allowed max number of signals!\\\");\\n        string memory returnValue = removeTrailingZeros(string(nonzeroBytesArray));\\n        return returnValue;\\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\\n    }\\n\\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\\n        uint256 i;\\n        for (i = 0; i < 32 && input[i] != 0; i++) {}\\n        bytes memory resultBytes = new bytes(i);\\n        for (i = 0; i < 32 && input[i] != 0; i++) {\\n            resultBytes[i] = input[i];\\n        }\\n        return string(resultBytes);\\n    }\\n\\n    // sliceArray is used to slice an array of uint256s from start-end into a new array of uint256s\\n    function sliceArray(uint256[] memory input, uint256 start, uint256 end) internal pure returns (uint256[] memory) {\\n        require(start <= end && end <= input.length, \\\"Invalid slice indices\\\");\\n        uint256[] memory result = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = input[i];\\n        }\\n        return result;\\n    }\\n\\n    // stringToUint is used to convert a string like \\\"45\\\" to a uint256 4\\n    function stringToUint(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            // TODO: Currently truncates decimals\\n            if (b[i] == 0x2E) {\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // getDomainFromEmail is used to extract the domain from an email i.e. the part after the @\\n    function getDomainFromEmail(string memory fromEmail) internal pure returns (string memory) {\\n        bytes memory emailBytes = bytes(fromEmail);\\n        uint256 atIndex;\\n        for (uint256 i = 0; i < emailBytes.length; i++) {\\n            if (emailBytes[i] == \\\"@\\\") {\\n                atIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory domainBytes = new bytes(emailBytes.length - atIndex - 1);\\n        for (uint256 j = 0; j < domainBytes.length; j++) {\\n            domainBytes[j] = emailBytes[atIndex + 1 + j];\\n        }\\n        return bytes32ToString(bytes32(bytes(domainBytes)));\\n    }\\n\\n    function removeTrailingZeros(string memory input) public pure returns (string memory) {\\n        bytes memory inputBytes = bytes(input);\\n        uint256 endIndex = inputBytes.length;\\n\\n        for (uint256 i = 0; i < inputBytes.length; i++) {\\n            if (inputBytes[i] == 0) {\\n                endIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory resultBytes = new bytes(endIndex);\\n        for (uint256 i = 0; i < endIndex; i++) {\\n            resultBytes[i] = inputBytes[i];\\n        }\\n\\n        return string(resultBytes);\\n    }\\n\\n    // Upper/lower string utils from https://github.com/willitscale/solidity-util/blob/master/lib/Strings.sol\\n    /**\\n     * Upper\\n     *\\n     * Converts all the values of a string to their corresponding upper case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to upper case\\n     * @return string\\n     */\\n    function upper(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _upper(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Converts all the values of a string to their corresponding lower case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to lower case\\n     * @return string\\n     */\\n    function lower(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _lower(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Upper\\n     *\\n     * Convert an alphabetic character to upper case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to upper case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a lower case otherwise returns the original value\\n     */\\n    function _upper(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\\n            return bytes1(uint8(_b1) - 32);\\n        }\\n\\n        return _b1;\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Convert an alphabetic character to lower case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to lower case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a upper case otherwise returns the original value\\n     */\\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\\n            return bytes1(uint8(_b1) + 32);\\n        }\\n\\n        return _b1;\\n    }\\n}\\n\",\"keccak256\":\"0x8c5b56494116a0c056c63e28fe892eea9bee5b056b09efa6aba1c9a82dc26c18\",\"license\":\"MIT\"},\"contracts/interfaces/ISendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface ISendProcessor {\\n\\n    struct SendProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[12] signals;\\n    }\\n\\n    function processProof(\\n        SendProof calldata _proof\\n    )\\n        external\\n    returns(uint256, uint256, bytes32, bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0x16811e82d90b1e15eafd8f3de30b6a05a48c906c96e65d263c557c66e9fcedb7\",\"license\":\"MIT\"},\"contracts/lib/StringConversionUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\\n// converting from string to Uint\\nlibrary StringConversionUtils {\\n    \\n    /**\\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\\n     * the returned number has multiple floating points then the function will revert.\\n     *\\n     * Examples: _s = \\\"12.34\\\", _expectedDecimals = 6 => 12340000\\n     *           _s = \\\"12.34\\\", _expectedDecimals = 2 => 1234\\n     *           _s = \\\"12.34\\\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\\n     *           _s = \\\"12.34.56\\\", _expectedDecimals = 6 => REVERT (Invalid number)\\n     *\\n     * @param _s                    String being processed\\n     * @param _desiredDecimals      Desired amount of decimal places\\n     */\\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\\n        bytes memory b = bytes(_s);\\n\\n        uint256 result = 0;\\n        uint256 decimalPlaces = 0;\\n\\n        bool decimals = false;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            if (decimals) {\\n                decimalPlaces++;\\n            }\\n\\n            if (b[i] == 0x2E) {\\n                require(decimals == false, \\\"String has multiple decimals\\\");\\n                decimals = true;\\n            }\\n        }\\n\\n        require(decimalPlaces <= _desiredDecimals, \\\"String has too many decimal places\\\");\\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\\n    }\\n}\\n\",\"keccak256\":\"0xa2162361ad63f6e15153b6c989746c3a21f95e4bb2ae9ee9806421413e2157c9\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\nimport { INullifierRegistry } from \\\"./nullifierRegistries/INullifierRegistry.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessor is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    IKeyHashAdapter public mailserverKeyHashAdapter;\\n    INullifierRegistry public nullifierRegistry;\\n    bytes public emailFromAddress;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _mailserverKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress\\n    )\\n        Ownable()\\n    {\\n        ramp = _ramp;\\n        mailserverKeyHashAdapter = _mailserverKeyHashAdapter;\\n        nullifierRegistry = _nullifierRegistry;\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setMailserverKeyHashAdapter(IKeyHashAdapter _mailserverKeyHashAdapter) external onlyOwner {\\n        mailserverKeyHashAdapter = _mailserverKeyHashAdapter;\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly\\n     * padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\\n     *\\n     * @param _emailFromAddress    The from email address for validated emails, MUST BE PROPERLY PADDED\\n     */\\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function getEmailFromAddress() external view returns (bytes memory) {\\n        return emailFromAddress;\\n    }\\n\\n    function getMailserverKeyHash() public view returns (bytes32) {\\n        return IKeyHashAdapter(mailserverKeyHashAdapter).mailserverKeyHash();\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\\n        require(!nullifierRegistry.isNullified(_nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(_nullifier);\\n    }\\n}\\n\",\"keccak256\":\"0xfc86cb8d817fe51078572d31095cf563cec19d8baec590746bfc9183fa361740\",\"license\":\"MIT\"},\"contracts/processors/VenmoSendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { StringUtils } from \\\"@zk-email/contracts/utils/StringUtils.sol\\\";\\n\\nimport { BaseProcessor } from \\\"./BaseProcessor.sol\\\";\\nimport { Groth16Verifier } from \\\"../verifiers/venmo_send_verifier.sol\\\";\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\nimport { INullifierRegistry } from \\\"./nullifierRegistries/INullifierRegistry.sol\\\";\\nimport { ISendProcessor } from \\\"../interfaces/ISendProcessor.sol\\\";\\nimport { StringConversionUtils } from \\\"../lib/StringConversionUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract VenmoSendProcessor is Groth16Verifier, ISendProcessor, BaseProcessor {\\n    \\n    using StringUtils for uint256[];\\n    using StringConversionUtils for string;\\n\\n    /* ============ Constants ============ */\\n    uint256 constant public PACK_SIZE = 7;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress\\n    )\\n        Groth16Verifier()\\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _nullifierRegistry, _emailFromAddress)\\n    {}\\n    \\n    /* ============ External Functions ============ */\\n    function processProof(\\n        ISendProcessor.SendProof calldata _proof\\n    )\\n        public\\n        override\\n        onlyRamp\\n        returns(uint256 amount, uint256 timestamp, bytes32 offRamperIdHash, bytes32 onRamperIdHash, bytes32 intentHash)\\n    {\\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        require(bytes32(_proof.signals[0]) == getMailserverKeyHash(), \\\"Invalid mailserver key hash\\\");\\n\\n        // Signals [1:4] are the packed from email address\\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \\\"Invalid email from address\\\");\\n\\n        // Signals [4:5] is the packed amount, since this is a USDC amount we want to make sure the returned number is\\n        // properly padded to 6 decimals. If the parsed has more than 6 figures to the right of the decimal it will revert\\n        amount = _parseSignalArray(_proof.signals, 4, 6).stringToUint(6);\\n\\n        // Signals [5:7] are the packed timestamp, we do not expect there to be any decimal places in this number so we\\n        // specify 0 decimals, if any decimal appears this function will revert\\n        timestamp = _parseSignalArray(_proof.signals, 6, 8).stringToUint(0);\\n\\n        // Signals [8] is the packed offRamperIdHash\\n        offRamperIdHash = bytes32(_proof.signals[8]);\\n\\n        // Signals [9] is the packed onRamperIdHash\\n        onRamperIdHash = bytes32(_proof.signals[9]);\\n\\n        // Check if email has been used previously, if not nullify it so it can't be used again\\n        _validateAndAddNullifier(bytes32(_proof.signals[10]));\\n\\n        // Signals [11] is intentHash\\n        intentHash = bytes32(_proof.signals[11]);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _parseSignalArray(uint256[12] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\\n        uint256[] memory signalArray = new uint256[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) {\\n            signalArray[i - _from] = _signals[i];\\n        }\\n\\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\\n    }\\n}\\n\",\"keccak256\":\"0x70d57e9a07e2db041569362549e16a2f53a08a63a7ff92aaee69d1f71c0f5569\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapter {\\n    function setMailserverKeyHash(bytes32 _mailserverKeyHash) external;\\n    function mailserverKeyHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb009a89c52a6e84972852d8c9e60758ca45aca9ac301268fb738459a91090873\",\"license\":\"MIT\"},\"contracts/processors/nullifierRegistries/INullifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface INullifierRegistry {\\n    function addNullifier(bytes32 _nullifier) external;\\n    function isNullified(bytes32 _nullifier) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x107164bc9a320938b513305878163b7fa884da4cdae58d0c8e81bfbb00c97c5e\",\"license\":\"MIT\"},\"contracts/verifiers/venmo_send_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 7537613082883539239998105689980695625949864158911233083307240523481447029201;\\n    uint256 constant deltax2 = 18425422419094349166845299166446400283955610392693002196033474730898100891393;\\n    uint256 constant deltay1 = 9734737963690957740179121580228276788359472364486142941618892845265550985341;\\n    uint256 constant deltay2 = 19424219928877642960622596960718531292261548324721236723020030007333427710256;\\n\\n    \\n    uint256 constant IC0x = 6902718247877772411363845861177050309258223353503700050311359326150519336692;\\n    uint256 constant IC0y = 15825279453398516401265572637576445394013091560186110937875220954546679110159;\\n    \\n    uint256 constant IC1x = 2335804858433576387747825582160359354916267733138827948973385608187184828569;\\n    uint256 constant IC1y = 5736008506642285963655345198014496364551739958976504633673791816202163044118;\\n    \\n    uint256 constant IC2x = 6269455652562704144793722062373279568471767955901279627797463015040136088132;\\n    uint256 constant IC2y = 2097530588191744967177200393826023428699458382295316095274264671302200006698;\\n    \\n    uint256 constant IC3x = 9822862276973085434476438868692851322487547916783049654593145248962644277643;\\n    uint256 constant IC3y = 13358026137961492797393341724052128319258593462853360012627607362475815103442;\\n    \\n    uint256 constant IC4x = 14719148997270446956997289375593821114034084437550001883662517657000734282586;\\n    uint256 constant IC4y = 1998224198671702911531451107100115167770885039941574729645701907241412776308;\\n    \\n    uint256 constant IC5x = 359894349223066781310974365307972581164914770698407647854073977658157147230;\\n    uint256 constant IC5y = 4226113369443688791926415338604034925838584747992607214489363181365627308608;\\n    \\n    uint256 constant IC6x = 8131352830647874407773009521188360590887607801163495436549679220199551501178;\\n    uint256 constant IC6y = 2496366191763335194055513493653718797330181861495912467368843578731618007027;\\n    \\n    uint256 constant IC7x = 5324791436169324680862288927376094103624123876195563861346513574577173643567;\\n    uint256 constant IC7y = 10539632294755752334066059856447171990510491871168341570429569842426314117653;\\n    \\n    uint256 constant IC8x = 21398838651908546916551334433437076903885176753396417385115556979686206468251;\\n    uint256 constant IC8y = 2283165388441295638775771203114643615346617529992451266709724264297809953544;\\n    \\n    uint256 constant IC9x = 16450282086321400334368283708403499847573182040077819178856321188442820130414;\\n    uint256 constant IC9y = 20227982940527385555692156484806747209260038014579804010296344969319860246613;\\n    \\n    uint256 constant IC10x = 1416849092724586759478061558363222409117668509275228664731118821895695167480;\\n    uint256 constant IC10y = 14279591006307641048883156401797861581231631415414897920853119376578010808716;\\n    \\n    uint256 constant IC11x = 10972046352748637769234591589921324542843146653569482848432798172628944437256;\\n    uint256 constant IC11y = 13951850916181885013998871924877530212665252857591601803360542322172843954667;\\n    \\n    uint256 constant IC12x = 10475342243781351585273160940612655577727791739250775206756870040352542452664;\\n    uint256 constant IC12y = 5139068014462344879213636708300130277178459139177464895691208627008733872682;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[12] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                \\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                \\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                \\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                \\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n                \\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\\n                \\n                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\\n                \\n                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n            checkField(calldataload(add(_pubSignals, 160)))\\n            \\n            checkField(calldataload(add(_pubSignals, 192)))\\n            \\n            checkField(calldataload(add(_pubSignals, 224)))\\n            \\n            checkField(calldataload(add(_pubSignals, 256)))\\n            \\n            checkField(calldataload(add(_pubSignals, 288)))\\n            \\n            checkField(calldataload(add(_pubSignals, 320)))\\n            \\n            checkField(calldataload(add(_pubSignals, 352)))\\n            \\n            checkField(calldataload(add(_pubSignals, 384)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0xb757585b2fbeabdb975afef07753da27f657d8d34bd62130109e2d0bf28e0e63\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200226438038062002264833981016040819052620000349162000114565b83838383620000433362000095565b6001600160a01b03848116608052600180546001600160a01b031990811686841617909155600280549091169184169190911790556003620000868282620002b9565b50505050505050505062000385565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000fb57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200012b57600080fd5b84516200013881620000e5565b809450506020808601516200014d81620000e5565b60408701519094506200016081620000e5565b60608701519093506001600160401b03808211156200017e57600080fd5b818801915088601f8301126200019357600080fd5b815181811115620001a857620001a8620000fe565b604051601f8201601f19908116603f01168101908382118183101715620001d357620001d3620000fe565b816040528281528b86848701011115620001ec57600080fd5b600093505b82841015620002105784840186015181850187015292850192620001f1565b600086848301015280965050505050505092959194509250565b600181811c908216806200023f57607f821691505b6020821081036200026057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002b457600081815260208120601f850160051c810160208610156200028f5750805b601f850160051c820191505b81811015620002b0578281556001016200029b565b5050505b505050565b81516001600160401b03811115620002d557620002d5620000fe565b620002ed81620002e684546200022a565b8462000266565b602080601f8311600181146200032557600084156200030c5750858301515b600019600386901b1c1916600185901b178555620002b0565b600085815260208120601f198616915b82811015620003565788860151825594840194600190910190840162000335565b5085821015620003755787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051611ebd620003a76000396000818160f40152610ad30152611ebd6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a87cb6ea1161008c578063ced1e97811610066578063ced1e97814610205578063d0b71f991461020d578063f2fde38b14610220578063f6c7226b1461023357600080fd5b8063a87cb6ea146101d5578063b870676c146101dd578063c0d05fed146101f057600080fd5b8063715018a6116100c8578063715018a61461015c5780638cbac0fa146101665780638da5cb5b146101895780638fe0ab8e1461019a57600080fd5b806315d276e1146100ef5780633d0c9cc414610133578063672ae59714610149575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b600781565b60405190815260200161012a565b600154610116906001600160a01b031681565b610164610246565b005b61017961017436600461185f565b61025a565b604051901515815260200161012a565b6000546001600160a01b0316610116565b6101ad6101a83660046118c5565b610ac2565b604080519586526020860194909452928401919091526060830152608082015260a00161012a565b61013b610d57565b600254610116906001600160a01b031681565b6101f8610dca565b60405161012a9190611902565b6101f8610e58565b61016461021b36600461194a565b610eea565b61016461022e36600461194a565b610f14565b610164610241366004611984565b610f8a565b61024e610fa2565b6102586000610ffc565b565b60006109f0565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610292576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816102c8576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806102f9576000805260206000f35b5050505050565b7f0f42ccd1d09da2e97c7da52e3141035e6b7e29969488d781cc5907e911f2aef485527f22fcca6ed9538287a5d63ddd6213998aca52d06bd1a9ea2ba0000e6c0abcda0f60208601526000608086018661039d87357f0cae773c551389c4b3748876eb879fd5a22df84214423ccdffcb6b2580d7bf167f052a04c97a2182b6a1b2907b2cc1e38ec3a31f802548459a134bac0d7636509984610295565b6103ed60208801357f04a3290596fa6594ac4116f78951e6613a335fb4a55575fccc749f7e0047182a7f0ddc62daadf2242f06ed2fc536f6506d2c9c2b8aca41cef637e48643f42d8a4484610295565b61043d60408801357f1d885ff71ea4bb465c1156808c77dc42b4109067a9817e25c049b7e286486bd27f15b78b03c0442b3c971ab6085dc2d971895a91484fad7490112b418f5acbf98b84610295565b61048d60608801357f046af46ee1b42873cef47bef79ee3b6c3a3858b963b830a1392b74980842d1747f208abe3bef839194b75dfce6f70774a09f0159d6b6ee8d9c4a3fb56dbbbad35a84610295565b6104dc60808801357f0957e53908d052485184ec6ce32d3f28b35b4098c84faa43193147c67605ca407ecbb167565d1fc4ff126056f6ad5ae6d7ee36240d58724adace5b93d8bda45e84610295565b61052c60a08801357f0584e4a8541cf7270af7b54ca5b9b7d6356113d303ceb57742bd1ef633ca77f37f11fa2ebf5417b4549c753e84aca2920f9bb5f0cc20653ee4c4dc9fcba77d837a84610295565b61057c60c08801357f174d3871564045120f8d87478d04f57d15ff67945f107417d75dd7d98e3a52157f0bc5b9a3762ffbc89579ac3efa6366f610946639a924884c149d6b882663412f84610295565b6105cc60e08801357f050c39cf04b7e31780a9530e8c37cf035af9bb0771f9b97b043b5da06fa9c3087f2f4f503f73c7e882f95d7c60d6a1d949fc692d10f7e7d1a46848955b38fdf09b84610295565b61061d6101008801357f2cb8a1f363d9ee404ae54ea0e20f3f914a407fe0515415dba540fe52e28d98557f245e879af3861119e5c5b2a274fa09fd79254dab1c167d927f206c0e3ce1366e84610295565b61066e6101208801357f1f91f64be622f47fa11f93a86381c5361fbb73a73bbfc92d24ecaf865f0a018c7f0321e87db17c101496865d1841aef0981b235e079c4cc0e6b292ead4b9feeff884610295565b6106bf6101408801357f1ed877c0515893c450a07970e36b669ade589147607ebb95e648eb8417ae91eb7f1841f54a2c24330cf3d50547868a8ad41209f45b33e9286b40386214e66c400884610295565b6107106101608801357f0b5c9c02e164fd7e26208c6fcd1024f172411845c45b76543488da69d66e822a7f1728d566cfd864539960fb0e369fdcd413176050d48e4f32cdf89fc4789c6bb884610295565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f10aa234815d8947d72c1a64fbb4e78aac6858af89d49f9070f9039968b9659d16102808201527f28bc6b65a8c0751bd05adbaba004ec5da668ca9c05371b02540d2954e198af016102a08201527f1585aa9b4d728104ede3ab504f56e6e0ed2b4b0fe8e026f431e2b8720416487d6102c08201527f2af1b8085331fb26d7218460fc6aa847165175389ebef6e6c4713d2a674d89306102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610a086000840135610261565b610a156020840135610261565b610a226040840135610261565b610a2f6060840135610261565b610a3c6080840135610261565b610a4960a0840135610261565b610a5660c0840135610261565b610a6360e0840135610261565b610a71610100840135610261565b610a7f610120840135610261565b610a8d610140840135610261565b610a9b610160840135610261565b610aa9610180840135610261565b610ab6818486888a610300565b90508060005260206000f35b600080808080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b455760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b6040805163465d607d60e11b81523091638cbac0fa91610b78918a919082019060c0830190610100840190600401611a35565b602060405180830381865afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb99190611a82565b610bf55760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610b3c565b610bfd610d57565b61010087013514610c505760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610b3c565b6000610c6387610100016001600461104c565b90506003604051610c749190611aee565b604051809103902081604051602001610c8d9190611b64565b6040516020818303038152906040528051906020012014610cf05760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610b3c565b610d0c6006610d0689610100016004600661104c565b90611127565b9550610d246000610d0689610100016006600861104c565b945061020087013593506102208701359250610d446102408801356112ff565b5093959294919350916102609091013590565b60015460408051630d901b9960e21b815290516000926001600160a01b0316916336406e649160048083019260209291908290030181865afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190611b80565b905090565b60038054610dd790611aba565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0390611aba565b8015610e505780601f10610e2557610100808354040283529160200191610e50565b820191906000526020600020905b815481529060010190602001808311610e3357829003601f168201915b505050505081565b606060038054610e6790611aba565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9390611aba565b8015610ee05780601f10610eb557610100808354040283529160200191610ee0565b820191906000526020600020905b815481529060010190602001808311610ec357829003601f168201915b5050505050905090565b610ef2610fa2565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610f1c610fa2565b6001600160a01b038116610f815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b3c565b61029281610ffc565b610f92610fa2565b6003610f9e8282611be8565b5050565b6000546001600160a01b031633146102585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b3c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061105a8484611cbe565b60ff1667ffffffffffffffff8111156110755761107561196e565b60405190808252806020026020018201604052801561109e578160200160208202803683370190505b50905060ff84165b8360ff16811015611103578581600c81106110c3576110c3611aa4565b6020020135826110d660ff881684611cd7565b815181106110e6576110e6611aa4565b6020908102919091010152806110fb81611cea565b9150506110a6565b5061111e600782516111159190611d03565b82906007611413565b95945050505050565b600082818080805b845181101561127757603060f81b85828151811061114f5761114f611aa4565b01602001516001600160f81b031916108015906111905750603960f81b85828151811061117e5761117e611aa4565b01602001516001600160f81b03191611155b156111d35760308582815181106111a9576111a9611aa4565b01602001516111bb919060f81c611cd7565b6111c685600a611d03565b6111d09190611d1a565b93505b81156111e757826111e381611cea565b9350505b8481815181106111f9576111f9611aa4565b01602001516001600160f81b031916601760f91b036112655781156112605760405162461bcd60e51b815260206004820152601c60248201527f537472696e6720686173206d756c7469706c6520646563696d616c73000000006044820152606401610b3c565b600191505b8061126f81611cea565b91505061112f565b50858211156112d35760405162461bcd60e51b815260206004820152602260248201527f537472696e672068617320746f6f206d616e7920646563696d616c20706c6163604482015261657360f01b6064820152608401610b3c565b6112dd8287611cd7565b6112e890600a611e11565b6112f29084611d03565b9450505050505b92915050565b60025460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa158015611348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136c9190611a82565b156113b95760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e2075736564006044820152606401610b3c565b600254604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df3290602401600060405180830381600087803b1580156113ff57600080fd5b505af11580156102f9573d6000803e3d6000fd5b60606000808386516114259190611d03565b67ffffffffffffffff81111561143d5761143d61196e565b6040519080825280601f01601f191660200182016040528015611467576020820181803683370190505b5090506000805b87518161ffff16101561161e576000888261ffff168151811061149357611493611aa4565b6020026020010151905060008767ffffffffffffffff8111156114b8576114b861196e565b6040519080825280602002602001820160405280156114e1578160200160208202803683370190505b50905060005b88811015611533576114fa816008611d03565b83901c82828151811061150f5761150f611aa4565b60ff909216602092830291909101909101528061152b81611cea565b9150506114e7565b5060005b8881101561160857600082828151811061155357611553611aa4565b602002602001015160ff169050806000146115cb578060f81b87878151811061157e5761157e611aa4565b60200101906001600160f81b031916908160001a9053508561159f81611cea565b96506115ae9050600289611e1d565b60ff166000036115c6576115c3600189611e4d565b97505b6115ee565b6115d6600289611e1d565b60ff166001036115ee576115eb600189611e4d565b97505b5060089290921c918061160081611cea565b915050611537565b505050808061161690611e66565b91505061146e565b5060018360ff1610156116bf5760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a401610b3c565b8581111561172d5760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b6064820152608401610b3c565b600061173883611744565b98975050505050505050565b8051606090829060005b82518110156117995782818151811061176957611769611aa4565b01602001516001600160f81b03191660000361178757809150611799565b8061179181611cea565b91505061174e565b5060008167ffffffffffffffff8111156117b5576117b561196e565b6040519080825280601f01601f1916602001820160405280156117df576020820181803683370190505b50905060005b82811015611845578381815181106117ff576117ff611aa4565b602001015160f81c60f81b82828151811061181c5761181c611aa4565b60200101906001600160f81b031916908160001a9053508061183d81611cea565b9150506117e5565b50949350505050565b80604081018310156112f957600080fd5b60008060008061028080868803121561187757600080fd5b611881878761184e565b945060c086018781111561189457600080fd5b6040870194506118a4888261184e565b9350508681870111156118b657600080fd5b50929591945092610100019150565b600061028082840312156118d857600080fd5b50919050565b60005b838110156118f95781810151838201526020016118e1565b50506000910152565b60208152600082518060208401526119218160408501602087016118de565b601f01601f19169190910160400192915050565b6001600160a01b038116811461029257600080fd5b60006020828403121561195c57600080fd5b813561196781611935565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561199657600080fd5b813567ffffffffffffffff808211156119ae57600080fd5b818401915084601f8301126119c257600080fd5b8135818111156119d4576119d461196e565b604051601f8201601f19908116603f011681019083821181831017156119fc576119fc61196e565b81604052828152876020848701011115611a1557600080fd5b826020860160208301376000928101602001929092525095945050505050565b61028081016040808784378083018660005b6002811015611a6457838284379183019190830190600101611a47565b505050808560c0850137506101808361010084013795945050505050565b600060208284031215611a9457600080fd5b8151801515811461196757600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611ace57607f821691505b6020821081036118d857634e487b7160e01b600052602260045260246000fd5b6000808354611afc81611aba565b60018281168015611b145760018114611b2957611b58565b60ff1984168752821515830287019450611b58565b8760005260208060002060005b85811015611b4f5781548a820152908401908201611b36565b50505082870194505b50929695505050505050565b60008251611b768184602087016118de565b9190910192915050565b600060208284031215611b9257600080fd5b5051919050565b601f821115611be357600081815260208120601f850160051c81016020861015611bc05750805b601f850160051c820191505b81811015611bdf57828155600101611bcc565b5050505b505050565b815167ffffffffffffffff811115611c0257611c0261196e565b611c1681611c108454611aba565b84611b99565b602080601f831160018114611c4b5760008415611c335750858301515b600019600386901b1c1916600185901b178555611bdf565b600085815260208120601f198616915b82811015611c7a57888601518255948401946001909101908401611c5b565b5085821015611c985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156112f9576112f9611ca8565b818103818111156112f9576112f9611ca8565b600060018201611cfc57611cfc611ca8565b5060010190565b80820281158282048414176112f9576112f9611ca8565b808201808211156112f9576112f9611ca8565b600181815b80851115611d68578160001904821115611d4e57611d4e611ca8565b80851615611d5b57918102915b93841c9390800290611d32565b509250929050565b600082611d7f575060016112f9565b81611d8c575060006112f9565b8160018114611da25760028114611dac57611dc8565b60019150506112f9565b60ff841115611dbd57611dbd611ca8565b50506001821b6112f9565b5060208310610133831016604e8410600b8410161715611deb575081810a6112f9565b611df58383611d2d565b8060001904821115611e0957611e09611ca8565b029392505050565b60006119678383611d70565b600060ff831680611e3e57634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff81811683821601908111156112f9576112f9611ca8565b600061ffff808316818103611e7d57611e7d611ca8565b600101939250505056fea26469706673582212202c7aa89ec8dfecaa3afd18cf0ffdf3880e5900eeff3f10f9d4ce6d0193d3213b64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a87cb6ea1161008c578063ced1e97811610066578063ced1e97814610205578063d0b71f991461020d578063f2fde38b14610220578063f6c7226b1461023357600080fd5b8063a87cb6ea146101d5578063b870676c146101dd578063c0d05fed146101f057600080fd5b8063715018a6116100c8578063715018a61461015c5780638cbac0fa146101665780638da5cb5b146101895780638fe0ab8e1461019a57600080fd5b806315d276e1146100ef5780633d0c9cc414610133578063672ae59714610149575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b600781565b60405190815260200161012a565b600154610116906001600160a01b031681565b610164610246565b005b61017961017436600461185f565b61025a565b604051901515815260200161012a565b6000546001600160a01b0316610116565b6101ad6101a83660046118c5565b610ac2565b604080519586526020860194909452928401919091526060830152608082015260a00161012a565b61013b610d57565b600254610116906001600160a01b031681565b6101f8610dca565b60405161012a9190611902565b6101f8610e58565b61016461021b36600461194a565b610eea565b61016461022e36600461194a565b610f14565b610164610241366004611984565b610f8a565b61024e610fa2565b6102586000610ffc565b565b60006109f0565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610292576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816102c8576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806102f9576000805260206000f35b5050505050565b7f0f42ccd1d09da2e97c7da52e3141035e6b7e29969488d781cc5907e911f2aef485527f22fcca6ed9538287a5d63ddd6213998aca52d06bd1a9ea2ba0000e6c0abcda0f60208601526000608086018661039d87357f0cae773c551389c4b3748876eb879fd5a22df84214423ccdffcb6b2580d7bf167f052a04c97a2182b6a1b2907b2cc1e38ec3a31f802548459a134bac0d7636509984610295565b6103ed60208801357f04a3290596fa6594ac4116f78951e6613a335fb4a55575fccc749f7e0047182a7f0ddc62daadf2242f06ed2fc536f6506d2c9c2b8aca41cef637e48643f42d8a4484610295565b61043d60408801357f1d885ff71ea4bb465c1156808c77dc42b4109067a9817e25c049b7e286486bd27f15b78b03c0442b3c971ab6085dc2d971895a91484fad7490112b418f5acbf98b84610295565b61048d60608801357f046af46ee1b42873cef47bef79ee3b6c3a3858b963b830a1392b74980842d1747f208abe3bef839194b75dfce6f70774a09f0159d6b6ee8d9c4a3fb56dbbbad35a84610295565b6104dc60808801357f0957e53908d052485184ec6ce32d3f28b35b4098c84faa43193147c67605ca407ecbb167565d1fc4ff126056f6ad5ae6d7ee36240d58724adace5b93d8bda45e84610295565b61052c60a08801357f0584e4a8541cf7270af7b54ca5b9b7d6356113d303ceb57742bd1ef633ca77f37f11fa2ebf5417b4549c753e84aca2920f9bb5f0cc20653ee4c4dc9fcba77d837a84610295565b61057c60c08801357f174d3871564045120f8d87478d04f57d15ff67945f107417d75dd7d98e3a52157f0bc5b9a3762ffbc89579ac3efa6366f610946639a924884c149d6b882663412f84610295565b6105cc60e08801357f050c39cf04b7e31780a9530e8c37cf035af9bb0771f9b97b043b5da06fa9c3087f2f4f503f73c7e882f95d7c60d6a1d949fc692d10f7e7d1a46848955b38fdf09b84610295565b61061d6101008801357f2cb8a1f363d9ee404ae54ea0e20f3f914a407fe0515415dba540fe52e28d98557f245e879af3861119e5c5b2a274fa09fd79254dab1c167d927f206c0e3ce1366e84610295565b61066e6101208801357f1f91f64be622f47fa11f93a86381c5361fbb73a73bbfc92d24ecaf865f0a018c7f0321e87db17c101496865d1841aef0981b235e079c4cc0e6b292ead4b9feeff884610295565b6106bf6101408801357f1ed877c0515893c450a07970e36b669ade589147607ebb95e648eb8417ae91eb7f1841f54a2c24330cf3d50547868a8ad41209f45b33e9286b40386214e66c400884610295565b6107106101608801357f0b5c9c02e164fd7e26208c6fcd1024f172411845c45b76543488da69d66e822a7f1728d566cfd864539960fb0e369fdcd413176050d48e4f32cdf89fc4789c6bb884610295565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f10aa234815d8947d72c1a64fbb4e78aac6858af89d49f9070f9039968b9659d16102808201527f28bc6b65a8c0751bd05adbaba004ec5da668ca9c05371b02540d2954e198af016102a08201527f1585aa9b4d728104ede3ab504f56e6e0ed2b4b0fe8e026f431e2b8720416487d6102c08201527f2af1b8085331fb26d7218460fc6aa847165175389ebef6e6c4713d2a674d89306102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610a086000840135610261565b610a156020840135610261565b610a226040840135610261565b610a2f6060840135610261565b610a3c6080840135610261565b610a4960a0840135610261565b610a5660c0840135610261565b610a6360e0840135610261565b610a71610100840135610261565b610a7f610120840135610261565b610a8d610140840135610261565b610a9b610160840135610261565b610aa9610180840135610261565b610ab6818486888a610300565b90508060005260206000f35b600080808080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b455760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b6040805163465d607d60e11b81523091638cbac0fa91610b78918a919082019060c0830190610100840190600401611a35565b602060405180830381865afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb99190611a82565b610bf55760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610b3c565b610bfd610d57565b61010087013514610c505760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610b3c565b6000610c6387610100016001600461104c565b90506003604051610c749190611aee565b604051809103902081604051602001610c8d9190611b64565b6040516020818303038152906040528051906020012014610cf05760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610b3c565b610d0c6006610d0689610100016004600661104c565b90611127565b9550610d246000610d0689610100016006600861104c565b945061020087013593506102208701359250610d446102408801356112ff565b5093959294919350916102609091013590565b60015460408051630d901b9960e21b815290516000926001600160a01b0316916336406e649160048083019260209291908290030181865afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190611b80565b905090565b60038054610dd790611aba565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0390611aba565b8015610e505780601f10610e2557610100808354040283529160200191610e50565b820191906000526020600020905b815481529060010190602001808311610e3357829003601f168201915b505050505081565b606060038054610e6790611aba565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9390611aba565b8015610ee05780601f10610eb557610100808354040283529160200191610ee0565b820191906000526020600020905b815481529060010190602001808311610ec357829003601f168201915b5050505050905090565b610ef2610fa2565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610f1c610fa2565b6001600160a01b038116610f815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b3c565b61029281610ffc565b610f92610fa2565b6003610f9e8282611be8565b5050565b6000546001600160a01b031633146102585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b3c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061105a8484611cbe565b60ff1667ffffffffffffffff8111156110755761107561196e565b60405190808252806020026020018201604052801561109e578160200160208202803683370190505b50905060ff84165b8360ff16811015611103578581600c81106110c3576110c3611aa4565b6020020135826110d660ff881684611cd7565b815181106110e6576110e6611aa4565b6020908102919091010152806110fb81611cea565b9150506110a6565b5061111e600782516111159190611d03565b82906007611413565b95945050505050565b600082818080805b845181101561127757603060f81b85828151811061114f5761114f611aa4565b01602001516001600160f81b031916108015906111905750603960f81b85828151811061117e5761117e611aa4565b01602001516001600160f81b03191611155b156111d35760308582815181106111a9576111a9611aa4565b01602001516111bb919060f81c611cd7565b6111c685600a611d03565b6111d09190611d1a565b93505b81156111e757826111e381611cea565b9350505b8481815181106111f9576111f9611aa4565b01602001516001600160f81b031916601760f91b036112655781156112605760405162461bcd60e51b815260206004820152601c60248201527f537472696e6720686173206d756c7469706c6520646563696d616c73000000006044820152606401610b3c565b600191505b8061126f81611cea565b91505061112f565b50858211156112d35760405162461bcd60e51b815260206004820152602260248201527f537472696e672068617320746f6f206d616e7920646563696d616c20706c6163604482015261657360f01b6064820152608401610b3c565b6112dd8287611cd7565b6112e890600a611e11565b6112f29084611d03565b9450505050505b92915050565b60025460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa158015611348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136c9190611a82565b156113b95760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e2075736564006044820152606401610b3c565b600254604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df3290602401600060405180830381600087803b1580156113ff57600080fd5b505af11580156102f9573d6000803e3d6000fd5b60606000808386516114259190611d03565b67ffffffffffffffff81111561143d5761143d61196e565b6040519080825280601f01601f191660200182016040528015611467576020820181803683370190505b5090506000805b87518161ffff16101561161e576000888261ffff168151811061149357611493611aa4565b6020026020010151905060008767ffffffffffffffff8111156114b8576114b861196e565b6040519080825280602002602001820160405280156114e1578160200160208202803683370190505b50905060005b88811015611533576114fa816008611d03565b83901c82828151811061150f5761150f611aa4565b60ff909216602092830291909101909101528061152b81611cea565b9150506114e7565b5060005b8881101561160857600082828151811061155357611553611aa4565b602002602001015160ff169050806000146115cb578060f81b87878151811061157e5761157e611aa4565b60200101906001600160f81b031916908160001a9053508561159f81611cea565b96506115ae9050600289611e1d565b60ff166000036115c6576115c3600189611e4d565b97505b6115ee565b6115d6600289611e1d565b60ff166001036115ee576115eb600189611e4d565b97505b5060089290921c918061160081611cea565b915050611537565b505050808061161690611e66565b91505061146e565b5060018360ff1610156116bf5760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a401610b3c565b8581111561172d5760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b6064820152608401610b3c565b600061173883611744565b98975050505050505050565b8051606090829060005b82518110156117995782818151811061176957611769611aa4565b01602001516001600160f81b03191660000361178757809150611799565b8061179181611cea565b91505061174e565b5060008167ffffffffffffffff8111156117b5576117b561196e565b6040519080825280601f01601f1916602001820160405280156117df576020820181803683370190505b50905060005b82811015611845578381815181106117ff576117ff611aa4565b602001015160f81c60f81b82828151811061181c5761181c611aa4565b60200101906001600160f81b031916908160001a9053508061183d81611cea565b9150506117e5565b50949350505050565b80604081018310156112f957600080fd5b60008060008061028080868803121561187757600080fd5b611881878761184e565b945060c086018781111561189457600080fd5b6040870194506118a4888261184e565b9350508681870111156118b657600080fd5b50929591945092610100019150565b600061028082840312156118d857600080fd5b50919050565b60005b838110156118f95781810151838201526020016118e1565b50506000910152565b60208152600082518060208401526119218160408501602087016118de565b601f01601f19169190910160400192915050565b6001600160a01b038116811461029257600080fd5b60006020828403121561195c57600080fd5b813561196781611935565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561199657600080fd5b813567ffffffffffffffff808211156119ae57600080fd5b818401915084601f8301126119c257600080fd5b8135818111156119d4576119d461196e565b604051601f8201601f19908116603f011681019083821181831017156119fc576119fc61196e565b81604052828152876020848701011115611a1557600080fd5b826020860160208301376000928101602001929092525095945050505050565b61028081016040808784378083018660005b6002811015611a6457838284379183019190830190600101611a47565b505050808560c0850137506101808361010084013795945050505050565b600060208284031215611a9457600080fd5b8151801515811461196757600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611ace57607f821691505b6020821081036118d857634e487b7160e01b600052602260045260246000fd5b6000808354611afc81611aba565b60018281168015611b145760018114611b2957611b58565b60ff1984168752821515830287019450611b58565b8760005260208060002060005b85811015611b4f5781548a820152908401908201611b36565b50505082870194505b50929695505050505050565b60008251611b768184602087016118de565b9190910192915050565b600060208284031215611b9257600080fd5b5051919050565b601f821115611be357600081815260208120601f850160051c81016020861015611bc05750805b601f850160051c820191505b81811015611bdf57828155600101611bcc565b5050505b505050565b815167ffffffffffffffff811115611c0257611c0261196e565b611c1681611c108454611aba565b84611b99565b602080601f831160018114611c4b5760008415611c335750858301515b600019600386901b1c1916600185901b178555611bdf565b600085815260208120601f198616915b82811015611c7a57888601518255948401946001909101908401611c5b565b5085821015611c985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156112f9576112f9611ca8565b818103818111156112f9576112f9611ca8565b600060018201611cfc57611cfc611ca8565b5060010190565b80820281158282048414176112f9576112f9611ca8565b808201808211156112f9576112f9611ca8565b600181815b80851115611d68578160001904821115611d4e57611d4e611ca8565b80851615611d5b57918102915b93841c9390800290611d32565b509250929050565b600082611d7f575060016112f9565b81611d8c575060006112f9565b8160018114611da25760028114611dac57611dc8565b60019150506112f9565b60ff841115611dbd57611dbd611ca8565b50506001821b6112f9565b5060208310610133831016604e8410600b8410161715611deb575081810a6112f9565b611df58383611d2d565b8060001904821115611e0957611e09611ca8565b029392505050565b60006119678383611d70565b600060ff831680611e3e57634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff81811683821601908111156112f9576112f9611ca8565b600061ffff808316818103611e7d57611e7d611ca8565b600101939250505056fea26469706673582212202c7aa89ec8dfecaa3afd18cf0ffdf3880e5900eeff3f10f9d4ce6d0193d3213b64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setEmailFromAddress(string)": {
        "params": {
          "_emailFromAddress": "The from email address for validated emails, MUST BE PROPERLY PADDED"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setEmailFromAddress(string)": {
        "notice": "ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/processors/VenmoSendProcessor.sol:VenmoSendProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1403,
        "contract": "contracts/processors/VenmoSendProcessor.sol:VenmoSendProcessor",
        "label": "mailserverKeyHashAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKeyHashAdapter)1958"
      },
      {
        "astId": 1406,
        "contract": "contracts/processors/VenmoSendProcessor.sol:VenmoSendProcessor",
        "label": "nullifierRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INullifierRegistry)1973"
      },
      {
        "astId": 1408,
        "contract": "contracts/processors/VenmoSendProcessor.sol:VenmoSendProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IKeyHashAdapter)1958": {
        "encoding": "inplace",
        "label": "contract IKeyHashAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(INullifierRegistry)1973": {
        "encoding": "inplace",
        "label": "contract INullifierRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}