{
  "address": "0xE61a6e7442cE84072DB14423FfBBe2609908Ee38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_pubSignals",
          "type": "uint256[4]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c36c5d7ea5eb9d55f71998631ef67a6d667e506c8247da2bd6d0731b85ffbca",
  "receipt": {
    "to": null,
    "from": "0xa0Ee7A142d267C1f36714E4a8F75612F20a79720",
    "contractAddress": "0xE61a6e7442cE84072DB14423FfBBe2609908Ee38",
    "transactionIndex": 0,
    "gasUsed": "350055",
    "logsBloom": "0x
    "blockHash": "0x5f02be3c7dbe28a394bebcf4d05f0d078c2892b158eb2b2fee48aa8576954aeb",
    "transactionHash": "0x3c36c5d7ea5eb9d55f71998631ef67a6d667e506c8247da2bd6d0731b85ffbca",
    "logs": [],
    "blockNumber": 61393,
    "cumulativeGasUsed": "350055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "75b8f55da346d7ed99a350632554d2fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_pubSignals\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/garanti_body_suffix_hasher_verifier.sol\":\"Groth16Verifier\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/garanti_body_suffix_hasher_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11538879775846674526835491352245177428215656017176257554677806790730122530182;\\n    uint256 constant deltax2 = 10342899044037521395319393040886647066391079897134856423910842052487918973972;\\n    uint256 constant deltay1 = 7673810604697646469980418300855404491906175026657152448502078673835866310816;\\n    uint256 constant deltay2 = 19203038665686855899042926072269909772185515054222824546695896577042064928540;\\n\\n    \\n    uint256 constant IC0x = 20587965622151968069995649582541315422977747903983693959922015701361725155516;\\n    uint256 constant IC0y = 11982628613930328510673935238960631358206293440826148517770479845792210741285;\\n    \\n    uint256 constant IC1x = 5273354119219253101148387206199535064921520774240409596621174025648940059654;\\n    uint256 constant IC1y = 21111800092158453137375162645358573333185713447967811304768419840931409544316;\\n    \\n    uint256 constant IC2x = 7179175801248398469937796235742931530426723599609730333951354848886540229587;\\n    uint256 constant IC2y = 15726679295073391999231605242588933096637939096505469654743841929466661215600;\\n    \\n    uint256 constant IC3x = 2573745117148849325739153454910100127780727692332106642244822573322697768926;\\n    uint256 constant IC3y = 17190036615770915642770313751070930945137672912553152769513644794677235106500;\\n    \\n    uint256 constant IC4x = 14116421034256566786657627477297711601610402849971726529887805013466353201397;\\n    uint256 constant IC4y = 8485070584229074200559412926578438645883198277594792037977619628201373699513;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[4] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x6203eac560e097469393cb611e298265692297a8e6bb05e81d642eb888fc9ee9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b506106718061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80635fe8c13b1461002d575b5f80fd5b61004061003b3660046105e4565b610054565b604051901515815260200160405180910390f35b5f61055c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610089575f805260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa9150816100bc575f805260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa915050806100eb575f805260205ff35b5050505050565b7f2d84602728848e471bd1ba9e560f82ab8a7eec80bd3014f76ebd173d6ca628bc85527f1a7ded6d8fdaf30f436cf3f3bfa878a07585d245de1b30e632ec87025f97e82560208601525f608086018661018e87357f2eacdafb8a074f55c7eeaeaba8e637580efd6becf4cc32e3ffcb29d5f7d5c47c7f0ba89cd7566d8ba7283a2c695154fd3596a3fa79ceb3fff200e4a1bc6df50c068461008c565b6101de60208801357f22c4fc2bb63514decde9458ccb4bc65a47aa468ef49618e4eda09120cf429d707f0fdf44fe63793ab49f743161b2aecf184517b4bb0fae7702da1f596ed3c85bd38461008c565b61022e60408801357f260137477524ec7727275599f381fb4d4dcc29fed4c0333d45ca9638a7ad42c47f05b0b02830349454814f64e84c47e6efc8ab5b2eb0b771a4ba2079c48facffde8461008c565b61027e60608801357f12c261380019d137f4c8e7e13bbb8231d5f1e834377311c5dc5e0f2b9d758db97f1f359c754273ab6f981835d1bb37f8c007d8b75ac24d775ff24098f2577f70f58461008c565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f1982c6465dbad02e8ffe7203ec829194caa6d8f0c00a28953fe9763ecfbc0d866102808201527f16dddf97803669507bc9011f92e4fff75ea52e1891dfc6655bed759aa87cf4146102a08201527f10f7390ef109560803b040cefb04b3a2400f425ccf60456c6f1815272e05c8a06102c08201527f2a7488e34e7971bee4a74881cf790f1da42411e95a261bb1a7049098f3c8ef1c6102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526105735f84013561005a565b610580602084013561005a565b61058d604084013561005a565b61059a606084013561005a565b6105a7608084013561005a565b6105b4818486888a6100f2565b9050805f5260205ff35b80604081018310156105ce575f80fd5b92915050565b80608081018310156105ce575f80fd5b5f805f8061018085870312156105f8575f80fd5b61060286866105be565b935061061186604087016105d4565b92506106208660c087016105be565b91506106308661010087016105d4565b90509295919450925056fea2646970667358221220558cd1cb4d63da439b5f955bbdaace2ee62299803acf131da3d921ba333c100064736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c80635fe8c13b1461002d575b5f80fd5b61004061003b3660046105e4565b610054565b604051901515815260200160405180910390f35b5f61055c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610089575f805260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa9150816100bc575f805260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa915050806100eb575f805260205ff35b5050505050565b7f2d84602728848e471bd1ba9e560f82ab8a7eec80bd3014f76ebd173d6ca628bc85527f1a7ded6d8fdaf30f436cf3f3bfa878a07585d245de1b30e632ec87025f97e82560208601525f608086018661018e87357f2eacdafb8a074f55c7eeaeaba8e637580efd6becf4cc32e3ffcb29d5f7d5c47c7f0ba89cd7566d8ba7283a2c695154fd3596a3fa79ceb3fff200e4a1bc6df50c068461008c565b6101de60208801357f22c4fc2bb63514decde9458ccb4bc65a47aa468ef49618e4eda09120cf429d707f0fdf44fe63793ab49f743161b2aecf184517b4bb0fae7702da1f596ed3c85bd38461008c565b61022e60408801357f260137477524ec7727275599f381fb4d4dcc29fed4c0333d45ca9638a7ad42c47f05b0b02830349454814f64e84c47e6efc8ab5b2eb0b771a4ba2079c48facffde8461008c565b61027e60608801357f12c261380019d137f4c8e7e13bbb8231d5f1e834377311c5dc5e0f2b9d758db97f1f359c754273ab6f981835d1bb37f8c007d8b75ac24d775ff24098f2577f70f58461008c565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f1982c6465dbad02e8ffe7203ec829194caa6d8f0c00a28953fe9763ecfbc0d866102808201527f16dddf97803669507bc9011f92e4fff75ea52e1891dfc6655bed759aa87cf4146102a08201527f10f7390ef109560803b040cefb04b3a2400f425ccf60456c6f1815272e05c8a06102c08201527f2a7488e34e7971bee4a74881cf790f1da42411e95a261bb1a7049098f3c8ef1c6102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526105735f84013561005a565b610580602084013561005a565b61058d604084013561005a565b61059a606084013561005a565b6105a7608084013561005a565b6105b4818486888a6100f2565b9050805f5260205ff35b80604081018310156105ce575f80fd5b92915050565b80608081018310156105ce575f80fd5b5f805f8061018085870312156105f8575f80fd5b61060286866105be565b935061061186604087016105d4565b92506106208660c087016105be565b91506106308661010087016105d4565b90509295919450925056fea2646970667358221220558cd1cb4d63da439b5f955bbdaace2ee62299803acf131da3d921ba333c100064736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}