{
  "address": "0xEAb25969e5285dF34a3B245324d0B2B91E31cAD4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_venmoMailserverKeyHashAdapter",
          "type": "address"
        },
        {
          "internalType": "contract INullifierRegistry",
          "name": "_nullifierRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PACK_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMailserverKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailserverKeyHashAdapter",
      "outputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nullifierRegistry",
      "outputs": [
        {
          "internalType": "contract INullifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[5]",
              "name": "signals",
              "type": "uint256[5]"
            }
          ],
          "internalType": "struct IRegistrationProcessor.RegistrationProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "userIdHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "name": "setEmailFromAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_mailserverKeyHashAdapter",
          "type": "address"
        }
      ],
      "name": "setMailserverKeyHashAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[5]",
          "name": "_pubSignals",
          "type": "uint256[5]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fc6a74beb606f6ec647e2c1db5814198575a6c17ea4a4106af9be8b457f0a24",
  "receipt": {
    "to": null,
    "from": "0xa0Ee7A142d267C1f36714E4a8F75612F20a79720",
    "contractAddress": "0xEAb25969e5285dF34a3B245324d0B2B91E31cAD4",
    "transactionIndex": 0,
    "gasUsed": "1316897",
    "logsBloom": "0x
    "blockHash": "0xcfba18c2770ef0a90429d9d18d2c94ac9724dc76ace7b94fe1ef8bb9a62d2059",
    "transactionHash": "0x9fc6a74beb606f6ec647e2c1db5814198575a6c17ea4a4106af9be8b457f0a24",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 61358,
        "transactionHash": "0x9fc6a74beb606f6ec647e2c1db5814198575a6c17ea4a4106af9be8b457f0a24",
        "address": "0xEAb25969e5285dF34a3B245324d0B2B91E31cAD4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0ee7a142d267c1f36714e4a8f75612f20a79720"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcfba18c2770ef0a90429d9d18d2c94ac9724dc76ace7b94fe1ef8bb9a62d2059"
      }
    ],
    "blockNumber": 61358,
    "cumulativeGasUsed": "1316897",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe8F76a822B57b973c7a89006092364fFF8f69040",
    "0x4e85DC48a70DA1298489d5B6FC2492767d98f384",
    "0x4d8E02BBfCf205828A8352Af4376b165E123D7b0",
    "venmo@venmo.com"
  ],
  "numDeployments": 1,
  "solcInputHash": "75b8f55da346d7ed99a350632554d2fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_venmoMailserverKeyHashAdapter\",\"type\":\"address\"},{\"internalType\":\"contract INullifierRegistry\",\"name\":\"_nullifierRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACK_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMailserverKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailserverKeyHashAdapter\",\"outputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nullifierRegistry\",\"outputs\":[{\"internalType\":\"contract INullifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"signals\",\"type\":\"uint256[5]\"}],\"internalType\":\"struct IRegistrationProcessor.RegistrationProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"userIdHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"name\":\"setEmailFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_mailserverKeyHashAdapter\",\"type\":\"address\"}],\"name\":\"setMailserverKeyHashAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_pubSignals\",\"type\":\"uint256[5]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setEmailFromAddress(string)\":{\"params\":{\"_emailFromAddress\":\"The from email address for validated emails, MUST BE PROPERLY PADDED\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setEmailFromAddress(string)\":{\"notice\":\"ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ramps/venmo-v1/VenmoRegistrationProcessor.sol\":\"VenmoRegistrationProcessor\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zk-email/contracts/utils/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n// https://github.com/nalinbhardwaj/ethdosnumber/blob/main/ethdos-contracts/src/HexStrings.sol\\nlibrary StringUtils {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n    uint256 internal constant DEFAULT_PACK_SIZE = 31;\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes32 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function stringEq(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toString(bytes memory data) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    // 1 packed byte = packSize (usually 31) normal bytes, all in one 255/256-bit value\\n    // Note that this is not 32 due to the field modulus of circom\\n    function convertPackedByteToString(uint256 packedByte, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint256[] memory packedBytes = new uint256[](1);\\n        packedBytes[0] = packedByte;\\n        return convertPackedBytesToString(packedBytes, packSize, packSize);\\n    }\\n\\n    // Note: This convenience function removes the max string length check, which may cause misalignment with the circom\\n    // If using this, then the circom needs to rangecheck packed length in the circuit itself\\n    // This defaults to 31 bytes per packed byte\\n    function convertPackedBytesToString(uint256[] memory packedBytes) \\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        return convertPackedBytesToString(packedBytes, packedBytes.length * DEFAULT_PACK_SIZE, DEFAULT_PACK_SIZE);\\n    }\\n\\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\\n    // signals is the total number of signals (i.e. bytes) packed into the packedBytes. it defaults to packedBytes.length * packSize\\n    function convertPackedBytesToString(uint256[] memory packedBytes, uint256 signals, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint8 state = 0;\\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * packSize);\\n        uint256 nonzeroBytesArrayIndex = 0;\\n        for (uint16 i = 0; i < packedBytes.length; i++) {\\n            uint256 packedByte = packedBytes[i];\\n            uint8[] memory unpackedBytes = new uint8[](packSize);\\n            for (uint256 j = 0; j < packSize; j++) {\\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\\n            }\\n            for (uint256 j = 0; j < packSize; j++) {\\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\\n                if (unpackedByte != 0) {\\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\\n                    nonzeroBytesArrayIndex++;\\n                    if (state % 2 == 0) {\\n                        state += 1;\\n                    }\\n                } else {\\n                    if (state % 2 == 1) {\\n                        state += 1;\\n                    }\\n                }\\n                packedByte = packedByte >> 8;\\n            }\\n        }\\n        // TODO: You might want to assert that the state is exactly 1 or 2\\n        // If not, that means empty bytse have been removed from the middle and things have been concatenated.\\n        // We removed due to some tests failing, but this is not ideal and the require should be uncommented as soon as tests pass with it.\\n\\n        // require(state == 1 || state == 2, \\\"Invalid final state of packed bytes in email; more than two non-zero regions found!\\\");\\n        require(state >= 1, \\\"No packed bytes found! Invalid final state of packed bytes in email; value is likely 0!\\\");\\n        require(nonzeroBytesArrayIndex <= signals, \\\"Packed bytes more than allowed max number of signals!\\\");\\n        string memory returnValue = removeTrailingZeros(string(nonzeroBytesArray));\\n        return returnValue;\\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\\n    }\\n\\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\\n        uint256 i;\\n        for (i = 0; i < 32 && input[i] != 0; i++) {}\\n        bytes memory resultBytes = new bytes(i);\\n        for (i = 0; i < 32 && input[i] != 0; i++) {\\n            resultBytes[i] = input[i];\\n        }\\n        return string(resultBytes);\\n    }\\n\\n    // sliceArray is used to slice an array of uint256s from start-end into a new array of uint256s\\n    function sliceArray(uint256[] memory input, uint256 start, uint256 end) internal pure returns (uint256[] memory) {\\n        require(start <= end && end <= input.length, \\\"Invalid slice indices\\\");\\n        uint256[] memory result = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = input[i];\\n        }\\n        return result;\\n    }\\n\\n    // stringToUint is used to convert a string like \\\"45\\\" to a uint256 4\\n    function stringToUint(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            // TODO: Currently truncates decimals\\n            if (b[i] == 0x2E) {\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // getDomainFromEmail is used to extract the domain from an email i.e. the part after the @\\n    function getDomainFromEmail(string memory fromEmail) internal pure returns (string memory) {\\n        bytes memory emailBytes = bytes(fromEmail);\\n        uint256 atIndex;\\n        for (uint256 i = 0; i < emailBytes.length; i++) {\\n            if (emailBytes[i] == \\\"@\\\") {\\n                atIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory domainBytes = new bytes(emailBytes.length - atIndex - 1);\\n        for (uint256 j = 0; j < domainBytes.length; j++) {\\n            domainBytes[j] = emailBytes[atIndex + 1 + j];\\n        }\\n        return bytes32ToString(bytes32(bytes(domainBytes)));\\n    }\\n\\n    function removeTrailingZeros(string memory input) public pure returns (string memory) {\\n        bytes memory inputBytes = bytes(input);\\n        uint256 endIndex = inputBytes.length;\\n\\n        for (uint256 i = 0; i < inputBytes.length; i++) {\\n            if (inputBytes[i] == 0) {\\n                endIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory resultBytes = new bytes(endIndex);\\n        for (uint256 i = 0; i < endIndex; i++) {\\n            resultBytes[i] = inputBytes[i];\\n        }\\n\\n        return string(resultBytes);\\n    }\\n\\n    // Upper/lower string utils from https://github.com/willitscale/solidity-util/blob/master/lib/Strings.sol\\n    /**\\n     * Upper\\n     *\\n     * Converts all the values of a string to their corresponding upper case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to upper case\\n     * @return string\\n     */\\n    function upper(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _upper(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Converts all the values of a string to their corresponding lower case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to lower case\\n     * @return string\\n     */\\n    function lower(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _lower(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Upper\\n     *\\n     * Convert an alphabetic character to upper case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to upper case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a lower case otherwise returns the original value\\n     */\\n    function _upper(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\\n            return bytes1(uint8(_b1) - 32);\\n        }\\n\\n        return _b1;\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Convert an alphabetic character to lower case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to lower case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a upper case otherwise returns the original value\\n     */\\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\\n            return bytes1(uint8(_b1) + 32);\\n        }\\n\\n        return _b1;\\n    }\\n}\\n\",\"keccak256\":\"0x8c5b56494116a0c056c63e28fe892eea9bee5b056b09efa6aba1c9a82dc26c18\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\nimport { INullifierRegistry } from \\\"./nullifierRegistries/INullifierRegistry.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessor is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    IKeyHashAdapter public mailserverKeyHashAdapter;\\n    INullifierRegistry public nullifierRegistry;\\n    bytes public emailFromAddress;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _mailserverKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress\\n    )\\n        Ownable()\\n    {\\n        ramp = _ramp;\\n        mailserverKeyHashAdapter = _mailserverKeyHashAdapter;\\n        nullifierRegistry = _nullifierRegistry;\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setMailserverKeyHashAdapter(IKeyHashAdapter _mailserverKeyHashAdapter) external onlyOwner {\\n        mailserverKeyHashAdapter = _mailserverKeyHashAdapter;\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly\\n     * padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\\n     *\\n     * @param _emailFromAddress    The from email address for validated emails, MUST BE PROPERLY PADDED\\n     */\\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function getEmailFromAddress() external view returns (bytes memory) {\\n        return emailFromAddress;\\n    }\\n\\n    function getMailserverKeyHash() public view returns (bytes32) {\\n        return IKeyHashAdapter(mailserverKeyHashAdapter).mailserverKeyHash();\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\\n        require(!nullifierRegistry.isNullified(_nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(_nullifier);\\n    }\\n}\\n\",\"keccak256\":\"0xfc86cb8d817fe51078572d31095cf563cec19d8baec590746bfc9183fa361740\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapter {\\n    function setMailserverKeyHash(bytes32 _mailserverKeyHash) external;\\n    function mailserverKeyHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb009a89c52a6e84972852d8c9e60758ca45aca9ac301268fb738459a91090873\",\"license\":\"MIT\"},\"contracts/processors/nullifierRegistries/INullifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface INullifierRegistry {\\n    function addNullifier(bytes32 _nullifier) external;\\n    function isNullified(bytes32 _nullifier) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x107164bc9a320938b513305878163b7fa884da4cdae58d0c8e81bfbb00c97c5e\",\"license\":\"MIT\"},\"contracts/ramps/venmo-v1/VenmoRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { StringUtils } from \\\"@zk-email/contracts/utils/StringUtils.sol\\\";\\n\\nimport { BaseProcessor } from \\\"../../processors/BaseProcessor.sol\\\";\\nimport { Groth16Verifier } from \\\"../../verifiers/venmo_registration_verifier.sol\\\";\\nimport { IKeyHashAdapter } from \\\"../../processors/keyHashAdapters/IKeyHashAdapter.sol\\\";\\nimport { INullifierRegistry } from \\\"../../processors/nullifierRegistries/INullifierRegistry.sol\\\";\\nimport { IRegistrationProcessor } from \\\"./interfaces/IRegistrationProcessor.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract VenmoRegistrationProcessor is Groth16Verifier, IRegistrationProcessor, BaseProcessor {\\n\\n    using StringUtils for uint256[];\\n\\n    /* ============ Constants ============ */\\n    uint256 constant public PACK_SIZE = 7;\\n    \\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress\\n    )\\n        Groth16Verifier()\\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _nullifierRegistry, _emailFromAddress)\\n    {}\\n\\n    /* ============ External Functions ============ */\\n\\n    function processProof(\\n        IRegistrationProcessor.RegistrationProof calldata _proof\\n    )\\n        public\\n        view\\n        override\\n        onlyRamp\\n        returns(bytes32 userIdHash)\\n    {\\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        require(bytes32(_proof.signals[0]) == getMailserverKeyHash(), \\\"Invalid mailserver key hash\\\");\\n\\n        // Signals [1:4] are the packed from email address\\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \\\"Invalid email from address\\\");\\n\\n        // Signals [4] is the packed onRamperIdHash\\n        userIdHash = bytes32(_proof.signals[4]);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _parseSignalArray(uint256[5] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\\n        uint256[] memory signalArray = new uint256[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) {\\n            signalArray[i - _from] = _signals[i];\\n        }\\n\\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\\n    }\\n}\\n\",\"keccak256\":\"0xca7ad66cae637a7afc58121262db2990f290ad945de08f0765c7917031ad8a35\",\"license\":\"MIT\"},\"contracts/ramps/venmo-v1/interfaces/IRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IRegistrationProcessor {\\n\\n    struct RegistrationProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[5] signals;\\n    }\\n\\n    function processProof(\\n        RegistrationProof calldata _proof\\n    )\\n        external\\n        view\\n    returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc80e1b5561af1a8631547c72e6c6dcdf4e66c06b3eb34b1a8db1bb0f6d3ea90f\",\"license\":\"MIT\"},\"contracts/verifiers/venmo_registration_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 16692827623879808830126666424117838150546424161010311559130132272860078100250;\\n    uint256 constant deltax2 = 10427071116080203280483990720065140241625477298313711514843941053378169062748;\\n    uint256 constant deltay1 = 12292291730534257963793035250750833013505862587513324721305952905575695195722;\\n    uint256 constant deltay2 = 20744227296603881754617447489692206687227195961073977292626564883622660146422;\\n\\n    \\n    uint256 constant IC0x = 8444387327591820163253359883706304250001395835708102283881672029412593968774;\\n    uint256 constant IC0y = 277567402350001170949287541204029095267467381858853916455216632597839881894;\\n    \\n    uint256 constant IC1x = 11766018000598374647690511651127745003630346152255765679463620118729063279220;\\n    uint256 constant IC1y = 9973870620290232174118930849612458053973396098852917252709131237691777167431;\\n    \\n    uint256 constant IC2x = 21007152236406284962452665998326532111064818140624217664323424373713986554835;\\n    uint256 constant IC2y = 21775424933265972488601591944473690558387975377218817711132857025038427581344;\\n    \\n    uint256 constant IC3x = 19548332954070589452554863336717712265670681575029463650291986455368503640194;\\n    uint256 constant IC3y = 9885572105525346384114396000793852863725331019928798599079916138124811450063;\\n    \\n    uint256 constant IC4x = 20459688676260758193620894047864540995062748169615148342851161008796903469478;\\n    uint256 constant IC4y = 7185096966400904659568958817597117358528438755253953902329001546341542579806;\\n    \\n    uint256 constant IC5x = 15566588852465957839914470257479783208753427872712540953155019219989274639291;\\n    uint256 constant IC5y = 13117341851862511824800803143692229606087651943401230287864971446454834743578;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[5] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n            checkField(calldataload(add(_pubSignals, 160)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0xff9780d09b9ca02c5ffe9a87891c78e8248d0c7a3529fc60a5a19dc26c6ab0e3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801562000010575f80fd5b5060405162001ab038038062001ab083398101604081905262000033916200010f565b83838383620000423362000094565b6001600160a01b03848116608052600180546001600160a01b031990811686841617909155600280549091169184169190911790556003620000858282620002a7565b50505050505050505062000373565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000f8575f80fd5b50565b634e487b7160e01b5f52604160045260245ffd5b5f805f806080858703121562000123575f80fd5b84516200013081620000e3565b809450506020808601516200014581620000e3565b60408701519094506200015881620000e3565b60608701519093506001600160401b038082111562000175575f80fd5b818801915088601f83011262000189575f80fd5b8151818111156200019e576200019e620000fb565b604051601f8201601f19908116603f01168101908382118183101715620001c957620001c9620000fb565b816040528281528b86848701011115620001e1575f80fd5b5f93505b82841015620002045784840186015181850187015292850192620001e5565b5f86848301015280965050505050505092959194509250565b600181811c908216806200023257607f821691505b6020821081036200025157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620002a257805f5260205f20601f840160051c810160208510156200027e5750805b601f840160051c820191505b818110156200029f575f81556001016200028a565b50505b505050565b81516001600160401b03811115620002c357620002c3620000fb565b620002db81620002d484546200021d565b8462000257565b602080601f83116001811462000311575f8415620002f95750858301515b5f19600386901b1c1916600185901b1785556200036b565b5f85815260208120601f198616915b82811015620003415788860151825594840194600190910190840162000320565b50858210156200035f57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60805161171e620003925f395f818160ee0152610223015261171e5ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c8063a87cb6ea11610088578063ced1e97811610063578063ced1e978146101d6578063d0b71f99146101de578063f2fde38b146101f1578063f6c7226b14610204575f80fd5b8063a87cb6ea146101a6578063b870676c146101ae578063c0d05fed146101c1575f80fd5b80633d0c9cc4116100c35780633d0c9cc414610171578063672ae59714610179578063715018a61461018c5780638da5cb5b14610196575f80fd5b806315d276e1146100e957806317c8ecf21461012d57806334baeab91461014e575b5f80fd5b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61014061013b3660046111df565b610217565b604051908152602001610124565b61016161015c36600461120c565b610447565b6040519015158152602001610124565b610140600781565b600154610110906001600160a01b031681565b610194610a0d565b005b5f546001600160a01b0316610110565b610140610a20565b600254610110906001600160a01b031681565b6101c9610a90565b604051610124919061128f565b6101c9610b1c565b6101946101ec3660046112d5565b610bac565b6101946101ff3660046112d5565b610bd6565b61019461021236600461130b565b610c4c565b5f336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102955760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b604080516334baeab960e01b815230916334baeab9916102c89186919082019060c08301906101008401906004016113b6565b602060405180830381865afa1580156102e3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103079190611401565b6103435760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b604482015260640161028c565b61034b610a20565b6101008301351461039e5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b657920686173680000000000604482015260640161028c565b5f6103b0836101000160016004610c64565b905060036040516103c19190611466565b6040518091039020816040516020016103da91906114d8565b604051602081830303815290604052805190602001201461043d5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d2061646472657373000000000000604482015260640161028c565b5050610180013590565b5f61099e565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811061047c575f805260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa9150816104af575f805260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa915050806104de575f805260205ff35b5050505050565b7f12ab5a9624956b76265fc0eec1d900b529add7b70792dbf4e5a843dd604b268685527e9d18fb29076cc91333c58ed5efb1c16e4c4895b9f4163f7d1b3f7c8d4026a660208601525f608086018661058087357f160d02be8268c1b255c0a0ebde2da936232ed0e153d6f8996f1defac51f930477f1a0354875e82d8f0ac2ac8aeb2dd4fc16d0da2df59f5071140d037af419e2a748461047f565b6105d060208801357f30247428f688b9e3e1d9a0b69811eac6c928394e70e275120108106592076ba07f2e71a076d6490c2f15b995d8b68ad3a0bfa3eb68a58fa33df69c0cfc955a8bd38461047f565b61062060408801357f15db0918919bf88282f6a317b654c06195e674b6d4d833681dab4bd774d036cf7f2b37f6e04a0bca3b2cdcaa0a9f8c2d544a3c5b360d4874c9c1894c59225bc0828461047f565b61067060608801357f0fe29eea9c50213502ef28c871f902b18884958f4eb0596758a1f8389a9cce5e7f2d3bc5feca96b1abbee7368fbcb0ade12a856a5785d8fc3cfb0ac8215850f1a68461047f565b6106c060808801357f1d002702c6a69936e861d6e2a0d8e2ac85847afea1277294beebdb36af9cc91a7f226a60872afad35dabefcc99fd4f84eb93add0df114af28147b4dd2770793bbb8461047f565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f24e7ce3cf2d75f0b3bc44ddeeceef45d789f7c66da38ae223ef2eed52d894f1a6102808201527f170d835b2c98451e8b4e152ee67a3ceda06bbed8e6c68adc4a5c6f4342fec55c6102a08201527f1b2d30c8edee55fa0308f573fe5d1737f2e76ae12c5263f338e3b68e62911e4a6102c08201527f2ddcd10acc578091831b7e1a6edb36fb628c81b530513c55ffba19948e2004f66102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526109b55f84013561044d565b6109c2602084013561044d565b6109cf604084013561044d565b6109dc606084013561044d565b6109e9608084013561044d565b6109f660a084013561044d565b610a03818486888a6104e5565b9050805f5260205ff35b610a15610d34565b610a1e5f610d8d565b565b60015460408051630d901b9960e21b815290515f926001600160a01b0316916336406e649160048083019260209291908290030181865afa158015610a67573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a8b91906114f3565b905090565b60038054610a9d90611434565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac990611434565b8015610b145780601f10610aeb57610100808354040283529160200191610b14565b820191905f5260205f20905b815481529060010190602001808311610af757829003601f168201915b505050505081565b606060038054610b2b90611434565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5790611434565b8015610ba25780601f10610b7957610100808354040283529160200191610ba2565b820191905f5260205f20905b815481529060010190602001808311610b8557829003601f168201915b5050505050905090565b610bb4610d34565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610bde610d34565b6001600160a01b038116610c435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161028c565b61047c81610d8d565b610c54610d34565b6003610c608282611553565b5050565b60605f610c718484611627565b60ff1667ffffffffffffffff811115610c8c57610c8c6112f7565b604051908082528060200260200182016040528015610cb5578160200160208202803683370190505b50905060ff84165b8360ff16811015610d1057858160058110610cda57610cda611420565b602002013582610ced60ff881684611640565b81518110610cfd57610cfd611420565b6020908102919091010152600101610cbd565b50610d2b60078251610d229190611653565b82906007610ddc565b95945050505050565b5f546001600160a01b03163314610a1e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161028c565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60605f80838651610ded9190611653565b67ffffffffffffffff811115610e0557610e056112f7565b6040519080825280601f01601f191660200182016040528015610e2f576020820181803683370190505b5090505f805b87518161ffff161015610fc9575f888261ffff1681518110610e5957610e59611420565b602002602001015190505f8767ffffffffffffffff811115610e7d57610e7d6112f7565b604051908082528060200260200182016040528015610ea6578160200160208202803683370190505b5090505f5b88811015610eed57610ebe816008611653565b83901c828281518110610ed357610ed3611420565b60ff90921660209283029190910190910152600101610eab565b505f5b88811015610fb3575f828281518110610f0b57610f0b611420565b602002602001015160ff169050805f14610f80578060f81b878781518110610f3557610f35611420565b60200101906001600160f81b03191690815f1a90535085610f558161166a565b9650610f649050600289611682565b60ff165f03610f7b57610f786001896116af565b97505b610fa3565b610f8b600289611682565b60ff16600103610fa357610fa06001896116af565b97505b5060089290921c91600101610ef0565b5050508080610fc1906116c8565b915050610e35565b5060018360ff16101561106a5760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a40161028c565b858111156110d85760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b606482015260840161028c565b5f6110e2836110ee565b98975050505050505050565b805160609082905f5b82518110156111375782818151811061111257611112611420565b01602001516001600160f81b0319165f0361112f57809150611137565b6001016110f7565b505f8167ffffffffffffffff811115611152576111526112f7565b6040519080825280601f01601f19166020018201604052801561117c576020820181803683370190505b5090505f5b828110156111d65783818151811061119b5761119b611420565b602001015160f81c60f81b8282815181106111b8576111b8611420565b60200101906001600160f81b03191690815f1a905350600101611181565b50949350505050565b5f6101a082840312156111f0575f80fd5b50919050565b8060408101831015611206575f80fd5b92915050565b5f805f806101a0808688031215611221575f80fd5b61122b87876111f6565b945060c086018781111561123d575f80fd5b60408701945061124d88826111f6565b93505086818701111561125e575f80fd5b50929591945092610100019150565b5f5b8381101561128757818101518382015260200161126f565b50505f910152565b602081525f82518060208401526112ad81604085016020870161126d565b601f01601f19169190910160400192915050565b6001600160a01b038116811461047c575f80fd5b5f602082840312156112e5575f80fd5b81356112f0816112c1565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b5f6020828403121561131b575f80fd5b813567ffffffffffffffff80821115611332575f80fd5b818401915084601f830112611345575f80fd5b813581811115611357576113576112f7565b604051601f8201601f19908116603f0116810190838211818310171561137f5761137f6112f7565b81604052828152876020848701011115611397575f80fd5b826020860160208301375f928101602001929092525095945050505050565b6101a08101604080878437808301865f5b60028110156113e4578382843791830191908301906001016113c7565b505050808560c08501375060a08361010084013795945050505050565b5f60208284031215611411575f80fd5b815180151581146112f0575f80fd5b634e487b7160e01b5f52603260045260245ffd5b600181811c9082168061144857607f821691505b6020821081036111f057634e487b7160e01b5f52602260045260245ffd5b5f80835461147381611434565b6001828116801561148b57600181146114a0576114cc565b60ff19841687528215158302870194506114cc565b875f526020805f205f5b858110156114c35781548a8201529084019082016114aa565b50505082870194505b50929695505050505050565b5f82516114e981846020870161126d565b9190910192915050565b5f60208284031215611503575f80fd5b5051919050565b601f82111561154e57805f5260205f20601f840160051c8101602085101561152f5750805b601f840160051c820191505b818110156104de575f815560010161153b565b505050565b815167ffffffffffffffff81111561156d5761156d6112f7565b6115818161157b8454611434565b8461150a565b602080601f8311600181146115b4575f841561159d5750858301515b5f19600386901b1c1916600185901b17855561160b565b5f85815260208120601f198616915b828110156115e2578886015182559484019460019091019084016115c3565b50858210156115ff57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b60ff828116828216039081111561120657611206611613565b8181038181111561120657611206611613565b808202811582820484141761120657611206611613565b5f6001820161167b5761167b611613565b5060010190565b5f60ff8316806116a057634e487b7160e01b5f52601260045260245ffd5b8060ff84160691505092915050565b60ff818116838216019081111561120657611206611613565b5f61ffff8083168181036116de576116de611613565b600101939250505056fea2646970667358221220f66f99f4d273443d6c878987396bbc6c4d3ebfb9c759109146c68ec78715e48164736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106100e5575f3560e01c8063a87cb6ea11610088578063ced1e97811610063578063ced1e978146101d6578063d0b71f99146101de578063f2fde38b146101f1578063f6c7226b14610204575f80fd5b8063a87cb6ea146101a6578063b870676c146101ae578063c0d05fed146101c1575f80fd5b80633d0c9cc4116100c35780633d0c9cc414610171578063672ae59714610179578063715018a61461018c5780638da5cb5b14610196575f80fd5b806315d276e1146100e957806317c8ecf21461012d57806334baeab91461014e575b5f80fd5b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61014061013b3660046111df565b610217565b604051908152602001610124565b61016161015c36600461120c565b610447565b6040519015158152602001610124565b610140600781565b600154610110906001600160a01b031681565b610194610a0d565b005b5f546001600160a01b0316610110565b610140610a20565b600254610110906001600160a01b031681565b6101c9610a90565b604051610124919061128f565b6101c9610b1c565b6101946101ec3660046112d5565b610bac565b6101946101ff3660046112d5565b610bd6565b61019461021236600461130b565b610c4c565b5f336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102955760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b604080516334baeab960e01b815230916334baeab9916102c89186919082019060c08301906101008401906004016113b6565b602060405180830381865afa1580156102e3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103079190611401565b6103435760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b604482015260640161028c565b61034b610a20565b6101008301351461039e5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b657920686173680000000000604482015260640161028c565b5f6103b0836101000160016004610c64565b905060036040516103c19190611466565b6040518091039020816040516020016103da91906114d8565b604051602081830303815290604052805190602001201461043d5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d2061646472657373000000000000604482015260640161028c565b5050610180013590565b5f61099e565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811061047c575f805260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa9150816104af575f805260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa915050806104de575f805260205ff35b5050505050565b7f12ab5a9624956b76265fc0eec1d900b529add7b70792dbf4e5a843dd604b268685527e9d18fb29076cc91333c58ed5efb1c16e4c4895b9f4163f7d1b3f7c8d4026a660208601525f608086018661058087357f160d02be8268c1b255c0a0ebde2da936232ed0e153d6f8996f1defac51f930477f1a0354875e82d8f0ac2ac8aeb2dd4fc16d0da2df59f5071140d037af419e2a748461047f565b6105d060208801357f30247428f688b9e3e1d9a0b69811eac6c928394e70e275120108106592076ba07f2e71a076d6490c2f15b995d8b68ad3a0bfa3eb68a58fa33df69c0cfc955a8bd38461047f565b61062060408801357f15db0918919bf88282f6a317b654c06195e674b6d4d833681dab4bd774d036cf7f2b37f6e04a0bca3b2cdcaa0a9f8c2d544a3c5b360d4874c9c1894c59225bc0828461047f565b61067060608801357f0fe29eea9c50213502ef28c871f902b18884958f4eb0596758a1f8389a9cce5e7f2d3bc5feca96b1abbee7368fbcb0ade12a856a5785d8fc3cfb0ac8215850f1a68461047f565b6106c060808801357f1d002702c6a69936e861d6e2a0d8e2ac85847afea1277294beebdb36af9cc91a7f226a60872afad35dabefcc99fd4f84eb93add0df114af28147b4dd2770793bbb8461047f565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f24e7ce3cf2d75f0b3bc44ddeeceef45d789f7c66da38ae223ef2eed52d894f1a6102808201527f170d835b2c98451e8b4e152ee67a3ceda06bbed8e6c68adc4a5c6f4342fec55c6102a08201527f1b2d30c8edee55fa0308f573fe5d1737f2e76ae12c5263f338e3b68e62911e4a6102c08201527f2ddcd10acc578091831b7e1a6edb36fb628c81b530513c55ffba19948e2004f66102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526109b55f84013561044d565b6109c2602084013561044d565b6109cf604084013561044d565b6109dc606084013561044d565b6109e9608084013561044d565b6109f660a084013561044d565b610a03818486888a6104e5565b9050805f5260205ff35b610a15610d34565b610a1e5f610d8d565b565b60015460408051630d901b9960e21b815290515f926001600160a01b0316916336406e649160048083019260209291908290030181865afa158015610a67573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a8b91906114f3565b905090565b60038054610a9d90611434565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac990611434565b8015610b145780601f10610aeb57610100808354040283529160200191610b14565b820191905f5260205f20905b815481529060010190602001808311610af757829003601f168201915b505050505081565b606060038054610b2b90611434565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5790611434565b8015610ba25780601f10610b7957610100808354040283529160200191610ba2565b820191905f5260205f20905b815481529060010190602001808311610b8557829003601f168201915b5050505050905090565b610bb4610d34565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610bde610d34565b6001600160a01b038116610c435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161028c565b61047c81610d8d565b610c54610d34565b6003610c608282611553565b5050565b60605f610c718484611627565b60ff1667ffffffffffffffff811115610c8c57610c8c6112f7565b604051908082528060200260200182016040528015610cb5578160200160208202803683370190505b50905060ff84165b8360ff16811015610d1057858160058110610cda57610cda611420565b602002013582610ced60ff881684611640565b81518110610cfd57610cfd611420565b6020908102919091010152600101610cbd565b50610d2b60078251610d229190611653565b82906007610ddc565b95945050505050565b5f546001600160a01b03163314610a1e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161028c565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60605f80838651610ded9190611653565b67ffffffffffffffff811115610e0557610e056112f7565b6040519080825280601f01601f191660200182016040528015610e2f576020820181803683370190505b5090505f805b87518161ffff161015610fc9575f888261ffff1681518110610e5957610e59611420565b602002602001015190505f8767ffffffffffffffff811115610e7d57610e7d6112f7565b604051908082528060200260200182016040528015610ea6578160200160208202803683370190505b5090505f5b88811015610eed57610ebe816008611653565b83901c828281518110610ed357610ed3611420565b60ff90921660209283029190910190910152600101610eab565b505f5b88811015610fb3575f828281518110610f0b57610f0b611420565b602002602001015160ff169050805f14610f80578060f81b878781518110610f3557610f35611420565b60200101906001600160f81b03191690815f1a90535085610f558161166a565b9650610f649050600289611682565b60ff165f03610f7b57610f786001896116af565b97505b610fa3565b610f8b600289611682565b60ff16600103610fa357610fa06001896116af565b97505b5060089290921c91600101610ef0565b5050508080610fc1906116c8565b915050610e35565b5060018360ff16101561106a5760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a40161028c565b858111156110d85760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b606482015260840161028c565b5f6110e2836110ee565b98975050505050505050565b805160609082905f5b82518110156111375782818151811061111257611112611420565b01602001516001600160f81b0319165f0361112f57809150611137565b6001016110f7565b505f8167ffffffffffffffff811115611152576111526112f7565b6040519080825280601f01601f19166020018201604052801561117c576020820181803683370190505b5090505f5b828110156111d65783818151811061119b5761119b611420565b602001015160f81c60f81b8282815181106111b8576111b8611420565b60200101906001600160f81b03191690815f1a905350600101611181565b50949350505050565b5f6101a082840312156111f0575f80fd5b50919050565b8060408101831015611206575f80fd5b92915050565b5f805f806101a0808688031215611221575f80fd5b61122b87876111f6565b945060c086018781111561123d575f80fd5b60408701945061124d88826111f6565b93505086818701111561125e575f80fd5b50929591945092610100019150565b5f5b8381101561128757818101518382015260200161126f565b50505f910152565b602081525f82518060208401526112ad81604085016020870161126d565b601f01601f19169190910160400192915050565b6001600160a01b038116811461047c575f80fd5b5f602082840312156112e5575f80fd5b81356112f0816112c1565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b5f6020828403121561131b575f80fd5b813567ffffffffffffffff80821115611332575f80fd5b818401915084601f830112611345575f80fd5b813581811115611357576113576112f7565b604051601f8201601f19908116603f0116810190838211818310171561137f5761137f6112f7565b81604052828152876020848701011115611397575f80fd5b826020860160208301375f928101602001929092525095945050505050565b6101a08101604080878437808301865f5b60028110156113e4578382843791830191908301906001016113c7565b505050808560c08501375060a08361010084013795945050505050565b5f60208284031215611411575f80fd5b815180151581146112f0575f80fd5b634e487b7160e01b5f52603260045260245ffd5b600181811c9082168061144857607f821691505b6020821081036111f057634e487b7160e01b5f52602260045260245ffd5b5f80835461147381611434565b6001828116801561148b57600181146114a0576114cc565b60ff19841687528215158302870194506114cc565b875f526020805f205f5b858110156114c35781548a8201529084019082016114aa565b50505082870194505b50929695505050505050565b5f82516114e981846020870161126d565b9190910192915050565b5f60208284031215611503575f80fd5b5051919050565b601f82111561154e57805f5260205f20601f840160051c8101602085101561152f5750805b601f840160051c820191505b818110156104de575f815560010161153b565b505050565b815167ffffffffffffffff81111561156d5761156d6112f7565b6115818161157b8454611434565b8461150a565b602080601f8311600181146115b4575f841561159d5750858301515b5f19600386901b1c1916600185901b17855561160b565b5f85815260208120601f198616915b828110156115e2578886015182559484019460019091019084016115c3565b50858210156115ff57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b60ff828116828216039081111561120657611206611613565b8181038181111561120657611206611613565b808202811582820484141761120657611206611613565b5f6001820161167b5761167b611613565b5060010190565b5f60ff8316806116a057634e487b7160e01b5f52601260045260245ffd5b8060ff84160691505092915050565b60ff818116838216019081111561120657611206611613565b5f61ffff8083168181036116de576116de611613565b600101939250505056fea2646970667358221220f66f99f4d273443d6c878987396bbc6c4d3ebfb9c759109146c68ec78715e48164736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setEmailFromAddress(string)": {
        "params": {
          "_emailFromAddress": "The from email address for validated emails, MUST BE PROPERLY PADDED"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setEmailFromAddress(string)": {
        "notice": "ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ramps/venmo-v1/VenmoRegistrationProcessor.sol:VenmoRegistrationProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5930,
        "contract": "contracts/ramps/venmo-v1/VenmoRegistrationProcessor.sol:VenmoRegistrationProcessor",
        "label": "mailserverKeyHashAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKeyHashAdapter)6405"
      },
      {
        "astId": 5933,
        "contract": "contracts/ramps/venmo-v1/VenmoRegistrationProcessor.sol:VenmoRegistrationProcessor",
        "label": "nullifierRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INullifierRegistry)6636"
      },
      {
        "astId": 5935,
        "contract": "contracts/ramps/venmo-v1/VenmoRegistrationProcessor.sol:VenmoRegistrationProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IKeyHashAdapter)6405": {
        "encoding": "inplace",
        "label": "contract IKeyHashAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(INullifierRegistry)6636": {
        "encoding": "inplace",
        "label": "contract INullifierRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}