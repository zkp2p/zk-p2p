{
  "address": "0x4e85DC48a70DA1298489d5B6FC2492767d98f384",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "mailserverKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "setMailserverKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7dc4913ba74d23f7607b2c0e271cd6a97770ce2c0222ed02305045081ef4c2b6",
  "receipt": {
    "to": null,
    "from": "0xa0Ee7A142d267C1f36714E4a8F75612F20a79720",
    "contractAddress": "0x4e85DC48a70DA1298489d5B6FC2492767d98f384",
    "transactionIndex": 0,
    "gasUsed": "190490",
    "logsBloom": "0x00000000000000000000040000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000008000010000000080000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9e34da38a229b88af0f6d78023ff77c1c9a8ccd7353e46d2ea2cf2167f2fb1f9",
    "transactionHash": "0x7dc4913ba74d23f7607b2c0e271cd6a97770ce2c0222ed02305045081ef4c2b6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 61355,
        "transactionHash": "0x7dc4913ba74d23f7607b2c0e271cd6a97770ce2c0222ed02305045081ef4c2b6",
        "address": "0x4e85DC48a70DA1298489d5B6FC2492767d98f384",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0ee7a142d267c1f36714e4a8f75612f20a79720"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9e34da38a229b88af0f6d78023ff77c1c9a8ccd7353e46d2ea2cf2167f2fb1f9"
      }
    ],
    "blockNumber": 61355,
    "cumulativeGasUsed": "190490",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2ea3f223adbee4865e0cbfa3a6e748b1505a0094fd92c53d3d0dd2d4b0cd19d3"
  ],
  "numDeployments": 1,
  "solcInputHash": "75b8f55da346d7ed99a350632554d2fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_mailserverKeyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"mailserverKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"setMailserverKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/processors/keyHashAdapters/ManagedKeyHashAdapter.sol\":\"ManagedKeyHashAdapter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapter {\\n    function setMailserverKeyHash(bytes32 _mailserverKeyHash) external;\\n    function mailserverKeyHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb009a89c52a6e84972852d8c9e60758ca45aca9ac301268fb738459a91090873\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/ManagedKeyHashAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapter } from \\\"./IKeyHashAdapter.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract ManagedKeyHashAdapter is Ownable, IKeyHashAdapter {\\n    \\n    /* ============ State Variables ============ */\\n\\n    bytes32 public mailserverKeyHash;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        bytes32 _mailserverKeyHash\\n    )\\n        Ownable()\\n    {\\n        mailserverKeyHash = _mailserverKeyHash;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setMailserverKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\\n        mailserverKeyHash = _mailserverKeyHash;\\n    }\\n}\\n\",\"keccak256\":\"0x348720e86ab8fd55374953f267d674884f0cbfd3a612859dae5988363bd71c5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b5060405161033138038061033183398101604081905261002e9161008e565b6100373361003f565b6001556100a5565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6020828403121561009e575f80fd5b5051919050565b61027f806100b25f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c806336406e6414610059578063715018a6146100755780638da5cb5b1461007f5780638f06c5df14610099578063f2fde38b146100ac575b5f80fd5b61006260015481565b6040519081526020015b60405180910390f35b61007d6100bf565b005b5f546040516001600160a01b03909116815260200161006c565b61007d6100a7366004610205565b6100d2565b61007d6100ba36600461021c565b6100df565b6100c761015d565b6100d05f6101b6565b565b6100da61015d565b600155565b6100e761015d565b6001600160a01b0381166101515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61015a816101b6565b50565b5f546001600160a01b031633146100d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610148565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60208284031215610215575f80fd5b5035919050565b5f6020828403121561022c575f80fd5b81356001600160a01b0381168114610242575f80fd5b939250505056fea26469706673582212200be6ba4c84754329576d13be98c31a501ecd675dcf7b4f2a3dde48171bb33f0264736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610055575f3560e01c806336406e6414610059578063715018a6146100755780638da5cb5b1461007f5780638f06c5df14610099578063f2fde38b146100ac575b5f80fd5b61006260015481565b6040519081526020015b60405180910390f35b61007d6100bf565b005b5f546040516001600160a01b03909116815260200161006c565b61007d6100a7366004610205565b6100d2565b61007d6100ba36600461021c565b6100df565b6100c761015d565b6100d05f6101b6565b565b6100da61015d565b600155565b6100e761015d565b6001600160a01b0381166101515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61015a816101b6565b50565b5f546001600160a01b031633146100d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610148565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60208284031215610215575f80fd5b5035919050565b5f6020828403121561022c575f80fd5b81356001600160a01b0381168114610242575f80fd5b939250505056fea26469706673582212200be6ba4c84754329576d13be98c31a501ecd675dcf7b4f2a3dde48171bb33f0264736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/processors/keyHashAdapters/ManagedKeyHashAdapter.sol:ManagedKeyHashAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6443,
        "contract": "contracts/processors/keyHashAdapters/ManagedKeyHashAdapter.sol:ManagedKeyHashAdapter",
        "label": "mailserverKeyHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      }
    }
  }
}