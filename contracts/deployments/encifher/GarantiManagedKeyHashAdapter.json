{
  "address": "0xD18E3F31bD50B5c6e4cC740CB9Ca637F6eCC2944",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_mailServerKeyHashes",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "MailServerKeyHashAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "MailServerKeyHashRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "addMailServerKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMailServerKeyHashes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isMailServerKeyHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mailServerKeyHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "removeMailServerKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7180c7902f0d83191e3c746bb4878bc99cfcc8711294f235de5d3f19508c58fe",
  "receipt": {
    "to": null,
    "from": "0xa0Ee7A142d267C1f36714E4a8F75612F20a79720",
    "contractAddress": "0xD18E3F31bD50B5c6e4cC740CB9Ca637F6eCC2944",
    "transactionIndex": 0,
    "gasUsed": "475660",
    "logsBloom": "0x
    "blockHash": "0x18692bdcbc7e40f0f3790e57d2493a584ee7e6e70ce6524c1a33a64491347a50",
    "transactionHash": "0x7180c7902f0d83191e3c746bb4878bc99cfcc8711294f235de5d3f19508c58fe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 61391,
        "transactionHash": "0x7180c7902f0d83191e3c746bb4878bc99cfcc8711294f235de5d3f19508c58fe",
        "address": "0xD18E3F31bD50B5c6e4cC740CB9Ca637F6eCC2944",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0ee7a142d267c1f36714e4a8f75612f20a79720"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x18692bdcbc7e40f0f3790e57d2493a584ee7e6e70ce6524c1a33a64491347a50"
      }
    ],
    "blockNumber": 61391,
    "cumulativeGasUsed": "475660",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x03a9c8babd6b4ad94d711f3ffbee84b7aa69f4cb0dd08d491c5a5c32eca15f60"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "75b8f55da346d7ed99a350632554d2fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_mailServerKeyHashes\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"MailServerKeyHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"MailServerKeyHashRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"addMailServerKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMailServerKeyHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isMailServerKeyHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mailServerKeyHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"removeMailServerKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/processors/keyHashAdapters/ManagedKeyHashAdapterV2.sol\":\"ManagedKeyHashAdapterV2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapterV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapterV2 {\\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc849f2dc34e4463550b8e0a16541bde429cb1adf43776b2c4179e9d4e4e656a2\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/ManagedKeyHashAdapterV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapterV2 } from \\\"./IKeyHashAdapterV2.sol\\\";\\nimport { Bytes32ArrayUtils } from \\\"../../external/Bytes32ArrayUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract ManagedKeyHashAdapterV2 is Ownable, IKeyHashAdapterV2 {\\n    \\n    using Bytes32ArrayUtils for bytes32[];\\n\\n    /* ============ Events ============ */\\n    event MailServerKeyHashAdded(bytes32 mailserverKeyHash);\\n    event MailServerKeyHashRemoved(bytes32 mailserverKeyHash);\\n\\n    /* ============ State Variables ============ */\\n\\n    mapping(bytes32 => bool) public isMailServerKeyHash;\\n    bytes32[] public mailServerKeyHashes;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        bytes32[] memory _mailServerKeyHashes\\n    )\\n        Ownable()\\n    {\\n        for (uint256 i = 0; i < _mailServerKeyHashes.length; i++) {\\n            bytes32 mailserverKeyHash = _mailServerKeyHashes[i];\\n            require(!isMailServerKeyHash[mailserverKeyHash], \\\"Key hash already added\\\");\\n            \\n            isMailServerKeyHash[mailserverKeyHash] = true;\\n            mailServerKeyHashes.push(mailserverKeyHash);\\n        }\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\\n        require(!isMailServerKeyHash[_mailserverKeyHash], \\\"Key hash already added\\\");\\n\\n        isMailServerKeyHash[_mailserverKeyHash] = true;\\n        mailServerKeyHashes.push(_mailserverKeyHash);\\n\\n        emit MailServerKeyHashAdded(_mailserverKeyHash);\\n    }\\n\\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\\n        require(isMailServerKeyHash[_mailserverKeyHash], \\\"Key hash not added\\\");\\n\\n        isMailServerKeyHash[_mailserverKeyHash] = false;\\n        mailServerKeyHashes.removeStorage(_mailserverKeyHash);\\n\\n        emit MailServerKeyHashRemoved(_mailserverKeyHash);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getMailServerKeyHashes() external view override returns (bytes32[] memory) {\\n        return mailServerKeyHashes;\\n    }\\n}\\n\",\"keccak256\":\"0xb508d88dca3849e44c40adf29466772b5e6368e0b2eabad5652961344c72f58c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b5060405161096a38038061096a83398101604081905261002e91610183565b61003733610120565b5f5b8151811015610119575f8282815181106100555761005561023b565b6020908102919091018101515f818152600190925260409091205490915060ff16156100c75760405162461bcd60e51b815260206004820152601660248201527f4b6579206861736820616c726561647920616464656400000000000000000000604482015260640160405180910390fd5b5f8181526001602081905260408220805460ff19168217905560028054808301825592527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091019190915501610039565b505061024f565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215610194575f80fd5b82516001600160401b03808211156101aa575f80fd5b818501915085601f8301126101bd575f80fd5b8151818111156101cf576101cf61016f565b8060051b604051601f19603f830116810181811085821117156101f4576101f461016f565b604052918252848201925083810185019188831115610211575f80fd5b938501935b8285101561022f57845184529385019392850192610216565b98975050505050505050565b634e487b7160e01b5f52603260045260245ffd5b61070e8061025c5f395ff3fe608060405234801561000f575f80fd5b5060043610610085575f3560e01c80638da5cb5b116100585780638da5cb5b146100f2578063a26c04ee1461010c578063b86e2d721461011f578063f2fde38b14610140575f80fd5b806319d091521461008957806361ba662a146100c0578063687bc0ab146100d5578063715018a6146100ea575b5f80fd5b6100ab610097366004610604565b60016020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100d36100ce366004610604565b610153565b005b6100dd61023d565b6040516100b7919061061b565b6100d3610293565b5f546040516001600160a01b0390911681526020016100b7565b6100d361011a366004610604565b6102a6565b61013261012d366004610604565b610350565b6040519081526020016100b7565b6100d361014e36600461065e565b61036f565b61015b6103e8565b5f8181526001602052604090205460ff16156101b75760405162461bcd60e51b815260206004820152601660248201527512d95e481a185cda08185b1c9958591e48185919195960521b60448201526064015b60405180910390fd5b5f818152600160208190526040808320805460ff1916831790556002805492830181559092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01829055517fc1674d5f4b3c1397f7aad948ab8fb7adfb24a8f170f8c07349d880c342da030b906102329083815260200190565b60405180910390a150565b6060600280548060200260200160405190810160405280929190818152602001828054801561028957602002820191905f5260205f20905b815481526020019060010190808311610275575b5050505050905090565b61029b6103e8565b6102a45f610441565b565b6102ae6103e8565b5f8181526001602052604090205460ff166103005760405162461bcd60e51b815260206004820152601260248201527112d95e481a185cda081b9bdd08185919195960721b60448201526064016101ae565b5f818152600160205260409020805460ff19169055610320600282610490565b6040518181527f57f03401c03965ea5770efca656f696bdaa598efbaa2c899de9c70749634fabd90602001610232565b6002818154811061035f575f80fd5b5f91825260209091200154905081565b6103776103e8565b6001600160a01b0381166103dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101ae565b6103e581610441565b50565b5f546001600160a01b031633146102a45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ae565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f806104e9848054806020026020016040519081016040528092919081815260200182805480156104de57602002820191905f5260205f20905b8154815260200190600101908083116104ca575b5050505050846105ae565b91509150806105325760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b60448201526064016101ae565b83545f906105429060019061068b565b90508083146105845784818154811061055d5761055d6106b0565b905f5260205f200154858481548110610578576105786106b0565b5f918252602090912001555b84805480610594576105946106c4565b600190038181905f5260205f20015f905590555050505050565b81515f908190815b818110156105f357848682815181106105d1576105d16106b0565b6020026020010151036105eb579250600191506105fd9050565b6001016105b6565b505f195f92509250505b9250929050565b5f60208284031215610614575f80fd5b5035919050565b602080825282518282018190525f9190848201906040850190845b8181101561065257835183529284019291840191600101610636565b50909695505050505050565b5f6020828403121561066e575f80fd5b81356001600160a01b0381168114610684575f80fd5b9392505050565b818103818111156106aa57634e487b7160e01b5f52601160045260245ffd5b92915050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffdfea2646970667358221220ab41a7f4861f5df1c1f6a360281ac8bbfe83cb487622b9bc8e87526525d04f8764736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610085575f3560e01c80638da5cb5b116100585780638da5cb5b146100f2578063a26c04ee1461010c578063b86e2d721461011f578063f2fde38b14610140575f80fd5b806319d091521461008957806361ba662a146100c0578063687bc0ab146100d5578063715018a6146100ea575b5f80fd5b6100ab610097366004610604565b60016020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100d36100ce366004610604565b610153565b005b6100dd61023d565b6040516100b7919061061b565b6100d3610293565b5f546040516001600160a01b0390911681526020016100b7565b6100d361011a366004610604565b6102a6565b61013261012d366004610604565b610350565b6040519081526020016100b7565b6100d361014e36600461065e565b61036f565b61015b6103e8565b5f8181526001602052604090205460ff16156101b75760405162461bcd60e51b815260206004820152601660248201527512d95e481a185cda08185b1c9958591e48185919195960521b60448201526064015b60405180910390fd5b5f818152600160208190526040808320805460ff1916831790556002805492830181559092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01829055517fc1674d5f4b3c1397f7aad948ab8fb7adfb24a8f170f8c07349d880c342da030b906102329083815260200190565b60405180910390a150565b6060600280548060200260200160405190810160405280929190818152602001828054801561028957602002820191905f5260205f20905b815481526020019060010190808311610275575b5050505050905090565b61029b6103e8565b6102a45f610441565b565b6102ae6103e8565b5f8181526001602052604090205460ff166103005760405162461bcd60e51b815260206004820152601260248201527112d95e481a185cda081b9bdd08185919195960721b60448201526064016101ae565b5f818152600160205260409020805460ff19169055610320600282610490565b6040518181527f57f03401c03965ea5770efca656f696bdaa598efbaa2c899de9c70749634fabd90602001610232565b6002818154811061035f575f80fd5b5f91825260209091200154905081565b6103776103e8565b6001600160a01b0381166103dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101ae565b6103e581610441565b50565b5f546001600160a01b031633146102a45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ae565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f806104e9848054806020026020016040519081016040528092919081815260200182805480156104de57602002820191905f5260205f20905b8154815260200190600101908083116104ca575b5050505050846105ae565b91509150806105325760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b60448201526064016101ae565b83545f906105429060019061068b565b90508083146105845784818154811061055d5761055d6106b0565b905f5260205f200154858481548110610578576105786106b0565b5f918252602090912001555b84805480610594576105946106c4565b600190038181905f5260205f20015f905590555050505050565b81515f908190815b818110156105f357848682815181106105d1576105d16106b0565b6020026020010151036105eb579250600191506105fd9050565b6001016105b6565b505f195f92509250505b9250929050565b5f60208284031215610614575f80fd5b5035919050565b602080825282518282018190525f9190848201906040850190845b8181101561065257835183529284019291840191600101610636565b50909695505050505050565b5f6020828403121561066e575f80fd5b81356001600160a01b0381168114610684575f80fd5b9392505050565b818103818111156106aa57634e487b7160e01b5f52601160045260245ffd5b92915050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffdfea2646970667358221220ab41a7f4861f5df1c1f6a360281ac8bbfe83cb487622b9bc8e87526525d04f8764736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/processors/keyHashAdapters/ManagedKeyHashAdapterV2.sol:ManagedKeyHashAdapterV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6496,
        "contract": "contracts/processors/keyHashAdapters/ManagedKeyHashAdapterV2.sol:ManagedKeyHashAdapterV2",
        "label": "isMailServerKeyHash",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 6499,
        "contract": "contracts/processors/keyHashAdapters/ManagedKeyHashAdapterV2.sol:ManagedKeyHashAdapterV2",
        "label": "mailServerKeyHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}