{
  "address": "0x38381D63418Ff752Dba93eE018e36a6814388FA7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "_hdfcMailserverKeyHashAdapter",
          "type": "address"
        },
        {
          "internalType": "contract INullifierRegistry",
          "name": "_nullifierRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestampBuffer",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "isMailServerKeyHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailServerKeyHashAdapter",
      "outputs": [
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nullifierRegistry",
      "outputs": [
        {
          "internalType": "contract INullifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[15]",
              "name": "signals",
              "type": "uint256[15]"
            }
          ],
          "internalType": "struct IHDFCSendProcessor.SendProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "offRamperIdHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "onRamperIdHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "name": "setEmailFromAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "_mailServerKeyHashAdapter",
          "type": "address"
        }
      ],
      "name": "setMailserverKeyHashAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestampBuffer",
          "type": "uint256"
        }
      ],
      "name": "setTimestampBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[15]",
          "name": "_pubSignals",
          "type": "uint256[15]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb1c4c234a724981fb7ff1b96c7c5b6e2c269b33ac6f2be55825cbd79fd3da84",
  "receipt": {
    "to": null,
    "from": "0xa0Ee7A142d267C1f36714E4a8F75612F20a79720",
    "contractAddress": "0x38381D63418Ff752Dba93eE018e36a6814388FA7",
    "transactionIndex": 0,
    "gasUsed": "2294875",
    "logsBloom": "0x
    "blockHash": "0x83d1e2b0709b0e5dab4ce2471ca00e4f222afe5bdf84cf8cb8956f8dd2df2c6e",
    "transactionHash": "0xcb1c4c234a724981fb7ff1b96c7c5b6e2c269b33ac6f2be55825cbd79fd3da84",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 61372,
        "transactionHash": "0xcb1c4c234a724981fb7ff1b96c7c5b6e2c269b33ac6f2be55825cbd79fd3da84",
        "address": "0x38381D63418Ff752Dba93eE018e36a6814388FA7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0ee7a142d267c1f36714e4a8f75612f20a79720"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x83d1e2b0709b0e5dab4ce2471ca00e4f222afe5bdf84cf8cb8956f8dd2df2c6e"
      }
    ],
    "blockNumber": 61372,
    "cumulativeGasUsed": "2294875",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb1527802E7800034D6887b0a99a5Ad2683184b95",
    "0x4C073a92B1C8Fb55313102Ab412fb7F1704bcBdD",
    "0x4d8E02BBfCf205828A8352Af4376b165E123D7b0",
    "alerts@hdfcbank.net",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "75b8f55da346d7ed99a350632554d2fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"_hdfcMailserverKeyHashAdapter\",\"type\":\"address\"},{\"internalType\":\"contract INullifierRegistry\",\"name\":\"_nullifierRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestampBuffer\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"isMailServerKeyHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailServerKeyHashAdapter\",\"outputs\":[{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nullifierRegistry\",\"outputs\":[{\"internalType\":\"contract INullifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[15]\",\"name\":\"signals\",\"type\":\"uint256[15]\"}],\"internalType\":\"struct IHDFCSendProcessor.SendProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offRamperIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"onRamperIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"name\":\"setEmailFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"_mailServerKeyHashAdapter\",\"type\":\"address\"}],\"name\":\"setMailserverKeyHashAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestampBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimestampBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[15]\",\"name\":\"_pubSignals\",\"type\":\"uint256[15]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setEmailFromAddress(string)\":{\"params\":{\"_emailFromAddress\":\"The from email address for validated emails, MUST BE PROPERLY PADDED\"}},\"setTimestampBuffer(uint256)\":{\"params\":{\"_timestampBuffer\":\"The timestamp buffer for validated emails\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setEmailFromAddress(string)\":{\"notice\":\"ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\"},\"setTimestampBuffer(uint256)\":{\"notice\":\"ONLY OWNER: Sets the timestamp buffer for validated emails. This is the amount of time in seconds that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2 timestamps.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ramps/hdfc/HDFCSendProcessor.sol\":\"HDFCSendProcessor\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zk-email/contracts/utils/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n// https://github.com/nalinbhardwaj/ethdosnumber/blob/main/ethdos-contracts/src/HexStrings.sol\\nlibrary StringUtils {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n    uint256 internal constant DEFAULT_PACK_SIZE = 31;\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes32 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function stringEq(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toString(bytes memory data) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    // 1 packed byte = packSize (usually 31) normal bytes, all in one 255/256-bit value\\n    // Note that this is not 32 due to the field modulus of circom\\n    function convertPackedByteToString(uint256 packedByte, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint256[] memory packedBytes = new uint256[](1);\\n        packedBytes[0] = packedByte;\\n        return convertPackedBytesToString(packedBytes, packSize, packSize);\\n    }\\n\\n    // Note: This convenience function removes the max string length check, which may cause misalignment with the circom\\n    // If using this, then the circom needs to rangecheck packed length in the circuit itself\\n    // This defaults to 31 bytes per packed byte\\n    function convertPackedBytesToString(uint256[] memory packedBytes) \\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        return convertPackedBytesToString(packedBytes, packedBytes.length * DEFAULT_PACK_SIZE, DEFAULT_PACK_SIZE);\\n    }\\n\\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\\n    // signals is the total number of signals (i.e. bytes) packed into the packedBytes. it defaults to packedBytes.length * packSize\\n    function convertPackedBytesToString(uint256[] memory packedBytes, uint256 signals, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint8 state = 0;\\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * packSize);\\n        uint256 nonzeroBytesArrayIndex = 0;\\n        for (uint16 i = 0; i < packedBytes.length; i++) {\\n            uint256 packedByte = packedBytes[i];\\n            uint8[] memory unpackedBytes = new uint8[](packSize);\\n            for (uint256 j = 0; j < packSize; j++) {\\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\\n            }\\n            for (uint256 j = 0; j < packSize; j++) {\\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\\n                if (unpackedByte != 0) {\\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\\n                    nonzeroBytesArrayIndex++;\\n                    if (state % 2 == 0) {\\n                        state += 1;\\n                    }\\n                } else {\\n                    if (state % 2 == 1) {\\n                        state += 1;\\n                    }\\n                }\\n                packedByte = packedByte >> 8;\\n            }\\n        }\\n        // TODO: You might want to assert that the state is exactly 1 or 2\\n        // If not, that means empty bytse have been removed from the middle and things have been concatenated.\\n        // We removed due to some tests failing, but this is not ideal and the require should be uncommented as soon as tests pass with it.\\n\\n        // require(state == 1 || state == 2, \\\"Invalid final state of packed bytes in email; more than two non-zero regions found!\\\");\\n        require(state >= 1, \\\"No packed bytes found! Invalid final state of packed bytes in email; value is likely 0!\\\");\\n        require(nonzeroBytesArrayIndex <= signals, \\\"Packed bytes more than allowed max number of signals!\\\");\\n        string memory returnValue = removeTrailingZeros(string(nonzeroBytesArray));\\n        return returnValue;\\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\\n    }\\n\\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\\n        uint256 i;\\n        for (i = 0; i < 32 && input[i] != 0; i++) {}\\n        bytes memory resultBytes = new bytes(i);\\n        for (i = 0; i < 32 && input[i] != 0; i++) {\\n            resultBytes[i] = input[i];\\n        }\\n        return string(resultBytes);\\n    }\\n\\n    // sliceArray is used to slice an array of uint256s from start-end into a new array of uint256s\\n    function sliceArray(uint256[] memory input, uint256 start, uint256 end) internal pure returns (uint256[] memory) {\\n        require(start <= end && end <= input.length, \\\"Invalid slice indices\\\");\\n        uint256[] memory result = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = input[i];\\n        }\\n        return result;\\n    }\\n\\n    // stringToUint is used to convert a string like \\\"45\\\" to a uint256 4\\n    function stringToUint(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            // TODO: Currently truncates decimals\\n            if (b[i] == 0x2E) {\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // getDomainFromEmail is used to extract the domain from an email i.e. the part after the @\\n    function getDomainFromEmail(string memory fromEmail) internal pure returns (string memory) {\\n        bytes memory emailBytes = bytes(fromEmail);\\n        uint256 atIndex;\\n        for (uint256 i = 0; i < emailBytes.length; i++) {\\n            if (emailBytes[i] == \\\"@\\\") {\\n                atIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory domainBytes = new bytes(emailBytes.length - atIndex - 1);\\n        for (uint256 j = 0; j < domainBytes.length; j++) {\\n            domainBytes[j] = emailBytes[atIndex + 1 + j];\\n        }\\n        return bytes32ToString(bytes32(bytes(domainBytes)));\\n    }\\n\\n    function removeTrailingZeros(string memory input) public pure returns (string memory) {\\n        bytes memory inputBytes = bytes(input);\\n        uint256 endIndex = inputBytes.length;\\n\\n        for (uint256 i = 0; i < inputBytes.length; i++) {\\n            if (inputBytes[i] == 0) {\\n                endIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory resultBytes = new bytes(endIndex);\\n        for (uint256 i = 0; i < endIndex; i++) {\\n            resultBytes[i] = inputBytes[i];\\n        }\\n\\n        return string(resultBytes);\\n    }\\n\\n    // Upper/lower string utils from https://github.com/willitscale/solidity-util/blob/master/lib/Strings.sol\\n    /**\\n     * Upper\\n     *\\n     * Converts all the values of a string to their corresponding upper case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to upper case\\n     * @return string\\n     */\\n    function upper(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _upper(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Converts all the values of a string to their corresponding lower case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to lower case\\n     * @return string\\n     */\\n    function lower(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _lower(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Upper\\n     *\\n     * Convert an alphabetic character to upper case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to upper case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a lower case otherwise returns the original value\\n     */\\n    function _upper(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\\n            return bytes1(uint8(_b1) - 32);\\n        }\\n\\n        return _b1;\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Convert an alphabetic character to lower case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to lower case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a upper case otherwise returns the original value\\n     */\\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\\n            return bytes1(uint8(_b1) + 32);\\n        }\\n\\n        return _b1;\\n    }\\n}\\n\",\"keccak256\":\"0x8c5b56494116a0c056c63e28fe892eea9bee5b056b09efa6aba1c9a82dc26c18\",\"license\":\"MIT\"},\"contracts/external/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n//\\n// NOTE: This library has been pruned to keep only functions needed by zkp2p\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    )\\n        internal\\n        pure\\n        returns (uint256 timestamp)\\n    {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\\n            + minute * SECONDS_PER_MINUTE + second;\\n    }\\n}\\n\",\"keccak256\":\"0x64f6113ad342f8bd3c2eb74fde279401d604faf77dd08f6c16c3912c3519f170\",\"license\":\"MIT\"},\"contracts/lib/StringConversionUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\\n// converting from string to Uint\\nlibrary StringConversionUtils {\\n    \\n    /**\\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\\n     * the returned number has multiple floating points then the function will revert.\\n     *\\n     * Examples: _s = \\\"12.34\\\", _expectedDecimals = 6 => 12340000\\n     *           _s = \\\"12.34\\\", _expectedDecimals = 2 => 1234\\n     *           _s = \\\"12.34\\\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\\n     *           _s = \\\"12.34.56\\\", _expectedDecimals = 6 => REVERT (Invalid number)\\n     *\\n     * @param _s                    String being processed\\n     * @param _desiredDecimals      Desired amount of decimal places\\n     */\\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\\n        return stringToUint(_s, 0x2E, _desiredDecimals);\\n    }\\n\\n    function stringToUint(\\n        string memory _s,\\n        bytes1 _decimalCharacter,\\n        uint256 _desiredDecimals\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        bytes memory b = bytes(_s);\\n\\n        uint256 result = 0;\\n        uint256 decimalPlaces = 0;\\n\\n        bool decimals = false;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            if (decimals) {\\n                decimalPlaces++;\\n            }\\n\\n            if (b[i] == _decimalCharacter) {\\n                require(decimals == false, \\\"String has multiple decimals\\\");\\n                decimals = true;\\n            }\\n        }\\n\\n        require(decimalPlaces <= _desiredDecimals, \\\"String has too many decimal places\\\");\\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\\n    }\\n\\n    /**\\n     * @notice Function that returns a substring from _startIndex to _endIndex (non-inclusive).\\n     *\\n     * @param _str           String being processed\\n     * @param _startIndex    Index to start parsing from\\n     * @param _endIndex      Index to stop parsing at (index not included in result)\\n     */\\n    function substring(string memory _str, uint _startIndex, uint _endIndex) internal pure returns (string memory ) {\\n        bytes memory strBytes = bytes(_str);\\n        bytes memory result = new bytes(_endIndex-_startIndex);\\n        for(uint i = _startIndex; i < _endIndex; i++) {\\n            result[i-_startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function replaceString(\\n        string memory _str,\\n        string memory _lookupValue,\\n        string memory _replaceValue\\n    )\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory strBytes = bytes(_str);\\n        bytes memory lookupBytes = bytes(_lookupValue);\\n\\n        uint256 lookupIndex = indexOf(_str, _lookupValue);\\n        if (lookupIndex == type(uint256).max) {\\n            return _str;\\n        }\\n\\n        // Split the original string into two parts: before and after the keyword\\n        string memory beforeKeyword = substring(_str, 0, lookupIndex);\\n        string memory afterKeyword = substring(_str, lookupIndex + lookupBytes.length, strBytes.length);\\n        \\n        return string.concat(beforeKeyword, _replaceValue, afterKeyword);\\n    }\\n\\n    function indexOf(string memory str, string memory substr) internal pure returns (uint) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory substrBytes = bytes(substr);\\n        \\n        if (strBytes.length < substrBytes.length) return type(uint256).max;\\n        \\n        for (uint i = 0; i <= strBytes.length - substrBytes.length; i++) {\\n            bool found = true;\\n            for (uint j = 0; j < substrBytes.length; j++) {\\n                if (strBytes[i + j] != substrBytes[j]) {\\n                    found = false;\\n                    break;\\n                }\\n            }\\n            if (found) return i;\\n        }\\n        \\n        return type(uint256).max;\\n    }\\n\\n    function stringComparison(string memory _a, string memory _b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0xfcdfb3c2c8d5a6b7f480f827049782a70fb98f8b3838dcad0e0bb95237b94a0c\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessorV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapterV2 } from \\\"./keyHashAdapters/IKeyHashAdapterV2.sol\\\";\\nimport { INullifierRegistry } from \\\"./nullifierRegistries/INullifierRegistry.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessorV2 is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    IKeyHashAdapterV2 public mailServerKeyHashAdapter;\\n    INullifierRegistry public nullifierRegistry;\\n    bytes public emailFromAddress;\\n    uint256 public timestampBuffer;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapterV2 _mailServerKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress,\\n        uint256 _timestampBuffer\\n    )\\n        Ownable()\\n    {\\n        ramp = _ramp;\\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\\n        nullifierRegistry = _nullifierRegistry;\\n        emailFromAddress = bytes(_emailFromAddress);\\n        timestampBuffer = _timestampBuffer;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setMailserverKeyHashAdapter(IKeyHashAdapterV2 _mailServerKeyHashAdapter) external onlyOwner {\\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly\\n     * padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\\n     *\\n     * @param _emailFromAddress    The from email address for validated emails, MUST BE PROPERLY PADDED\\n     */\\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Sets the timestamp buffer for validated emails. This is the amount of time in seconds\\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2\\n     * timestamps.\\n     *\\n     * @param _timestampBuffer    The timestamp buffer for validated emails\\n     */\\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\\n        timestampBuffer = _timestampBuffer;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function getEmailFromAddress() external view returns (bytes memory) {\\n        return emailFromAddress;\\n    }\\n\\n    function isMailServerKeyHash(bytes32 _keyHash) public view returns (bool) {\\n        return IKeyHashAdapterV2(mailServerKeyHashAdapter).isMailServerKeyHash(_keyHash);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\\n        require(!nullifierRegistry.isNullified(_nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(_nullifier);\\n    }\\n}\\n\",\"keccak256\":\"0x207174fcbbfa8d2de65a5a5665f05e3f2d668f7df33b682a0f139c967dd3f6be\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapterV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapterV2 {\\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc849f2dc34e4463550b8e0a16541bde429cb1adf43776b2c4179e9d4e4e656a2\",\"license\":\"MIT\"},\"contracts/processors/nullifierRegistries/INullifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface INullifierRegistry {\\n    function addNullifier(bytes32 _nullifier) external;\\n    function isNullified(bytes32 _nullifier) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x107164bc9a320938b513305878163b7fa884da4cdae58d0c8e81bfbb00c97c5e\",\"license\":\"MIT\"},\"contracts/ramps/hdfc/HDFCSendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { StringUtils } from \\\"@zk-email/contracts/utils/StringUtils.sol\\\";\\n\\nimport { BaseProcessorV2 } from \\\"../../processors/BaseProcessorV2.sol\\\";\\nimport { Groth16Verifier } from \\\"../../verifiers/hdfc_send_verifier.sol\\\";\\nimport { HDFCTimestampParsing } from \\\"./lib/HDFCTimestampParsing.sol\\\";\\nimport { IKeyHashAdapterV2 } from \\\"../../processors/keyHashAdapters/IKeyHashAdapterV2.sol\\\";\\nimport { INullifierRegistry } from \\\"../../processors/nullifierRegistries/INullifierRegistry.sol\\\";\\nimport { IHDFCSendProcessor } from \\\"./interfaces/IHDFCSendProcessor.sol\\\";\\nimport { StringConversionUtils } from \\\"../../lib/StringConversionUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract HDFCSendProcessor is Groth16Verifier, IHDFCSendProcessor, BaseProcessorV2 {\\n    \\n    using StringUtils for uint256[];\\n    using StringConversionUtils for string;\\n\\n    /* ============ Constants ============ */\\n    uint256 constant PACK_SIZE = 7;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapterV2 _hdfcMailserverKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress,\\n        uint256 _timestampBuffer\\n    )\\n        Groth16Verifier()\\n        BaseProcessorV2(\\n            _ramp,\\n            _hdfcMailserverKeyHashAdapter,\\n            _nullifierRegistry,\\n            _emailFromAddress,\\n            _timestampBuffer\\n        )\\n    {}\\n    \\n    /* ============ External Functions ============ */\\n    function processProof(\\n        IHDFCSendProcessor.SendProof calldata _proof\\n    )\\n        public\\n        override\\n        onlyRamp\\n        returns(\\n            uint256 amount,\\n            uint256 timestamp,\\n            bytes32 offRamperIdHash,\\n            bytes32 onRamperIdHash,\\n            bytes32 intentHash\\n        )\\n    {\\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        require(isMailServerKeyHash(bytes32(_proof.signals[0])), \\\"Invalid mailserver key hash\\\");\\n\\n        // Signals [1:4] are the packed from email address\\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \\\"Invalid email from address\\\");\\n\\n        // Signals [4:6] is the packed amount, since this is a USDC amount we want to make sure the returned number is\\n        // properly padded to 6 decimals. If the parsed has more than 6 figures to the right of the decimal it will revert\\n        amount = _parseSignalArray(_proof.signals, 4, 6).stringToUint(6);\\n\\n        // Signals [6:11] are the packed timestamp, the timestamp is returned as a string in the format, that we need to\\n        // parse and convert to a unix timestamp\\n        string memory rawTimestamp = _parseSignalArray(_proof.signals, 6, 11);\\n        // Add the buffer to build in flexibility with L2 timestamps\\n        timestamp = HDFCTimestampParsing._dateStringToTimestamp(rawTimestamp) + timestampBuffer;\\n\\n        // Signals [11] is the packed onRamperIdHash\\n        onRamperIdHash = bytes32(_proof.signals[11]);\\n\\n        // Signals [12] is the packed offRamper UPI ID hash\\n        offRamperIdHash = bytes32(_proof.signals[12]);\\n\\n        // Check if email has been used previously, if not nullify it so it can't be used again\\n        _validateAndAddNullifier(bytes32(_proof.signals[13]));\\n\\n        // Signals [14] is intentHash\\n        intentHash = bytes32(_proof.signals[14]);\\n    }\\n    \\n    /* ============ Internal Functions ============ */\\n\\n    function _parseSignalArray(uint256[15] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\\n        uint256[] memory signalArray = new uint256[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) {\\n            signalArray[i - _from] = _signals[i];\\n        }\\n\\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\\n    }\\n}\\n\",\"keccak256\":\"0x817fbb9806670719d4e42665dfdf60a3beb3852f3ad8178049e3836732de7034\",\"license\":\"MIT\"},\"contracts/ramps/hdfc/interfaces/IHDFCSendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IHDFCSendProcessor {\\n\\n    struct SendProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[15] signals;\\n    }\\n\\n    function processProof(\\n        SendProof calldata _proof\\n    )\\n        external\\n    returns(uint256, uint256, bytes32, bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0xe022a0768bd0928ca85ebcfc7541907038fc0b786572701c5a37b97ec6040847\",\"license\":\"MIT\"},\"contracts/ramps/hdfc/lib/HDFCTimestampParsing.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { DateTime } from \\\"../../../external/DateTime.sol\\\";\\n\\nimport { StringConversionUtils } from \\\"../../../lib/StringConversionUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\nlibrary HDFCTimestampParsing {\\n\\n    using StringConversionUtils for string;\\n\\n    /**\\n     * @notice Iterates through every character in the date string and splits the string at each space or colon. Function will revert\\n     * if there are not 8 substrings formed from the split. The substrings are then converted to uints and passed to the DateTime lib\\n     * to get the unix timestamp. This function is specific to the date format used by HDFC, not suitable for use with other date formats.\\n     */\\n    function _dateStringToTimestamp(string memory _dateString) internal pure returns (uint256) {\\n        string[8] memory extractedStrings;\\n        uint256 breakCounter;\\n        uint256 lastBreak;\\n        for (uint256 i = 0; i < bytes(_dateString).length; i++) {\\n            if (bytes(_dateString)[i] == 0x20 || bytes(_dateString)[i] == 0x3a) {\\n                extractedStrings[breakCounter] = _dateString.substring(lastBreak, i);\\n                lastBreak = i + 1;\\n                breakCounter++;\\n            }\\n        }\\n        // Add last substring to array\\n        extractedStrings[breakCounter] = _dateString.substring(lastBreak, bytes(_dateString).length);\\n\\n        // Check that exactly 8 substrings were found (string is split at 7 different places)\\n        require(breakCounter == 7, \\\"Invalid date string\\\");\\n\\n        uint256 unOffsetTimestamp = DateTime.timestampFromDateTime(\\n            extractedStrings[3].stringToUint(0), // year\\n            _parseMonth(extractedStrings[2]), // month\\n            extractedStrings[1].stringToUint(0), // day\\n            extractedStrings[4].stringToUint(0), // hour\\n            extractedStrings[5].stringToUint(0), // minute\\n            extractedStrings[6].stringToUint(0) // second\\n        );\\n\\n        return _calculateTimestampWithOffset(unOffsetTimestamp, extractedStrings[7]);\\n    }\\n\\n    /**\\n     * @notice Adds or subtracts an offset from the calculated unOffset timestamp based on the timezone offset string. The timezone offset\\n     * string is of the format \\\"+0530\\\" or \\\"-0530\\\" where the first character is either a \\\"+\\\" or a \\\"-\\\" and the next 4 characters are hhmm. If\\n     * the _timeOffsetString is \\\"+0530\\\" then we subtract 5 hours and 30 minutes (19800s) from the unOffset timestamp, to get a GMT timestamp.\\n     * We constrain the _timeOffsetString to be 5 characters long to be of the format +/-hhmm.\\n     *\\n     * @param unOffsetTimestamp     The unix timestamp without any timezone offset applied\\n     * @param _timeOffsetString     The timezone offset string indicating the magnitude and direction of the timezone offset\\n     */\\n    function _calculateTimestampWithOffset(uint256 unOffsetTimestamp, string memory _timeOffsetString) internal pure returns (uint256) {\\n        require(bytes(_timeOffsetString).length == 5, \\\"Invalid timezone offset\\\");\\n        uint256 tzHours = _timeOffsetString.substring(1, 3).stringToUint(0);\\n        uint256 tzMinutes = _timeOffsetString.substring(3, 5).stringToUint(0);\\n\\n        uint256 rawOffset = tzHours * 3600 + tzMinutes * 60;\\n\\n        // Check if tz offset is positive or negative relative to GMT, 0x2b is the hex value for \\\"+\\\" meaning the tz is ahead of GMT and must\\n        // be subtracted\\n        bytes1 _offsetDirection = bytes(_timeOffsetString.substring(0, 1))[0];\\n        return _offsetDirection == 0x2b ? unOffsetTimestamp - rawOffset : unOffsetTimestamp + rawOffset;\\n    }\\n\\n    function _parseMonth(string memory _month) internal pure returns (uint256) {\\n        if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Jan\\\")) {\\n            return 1;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Feb\\\")) {\\n            return 2;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Mar\\\")) {\\n            return 3;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Apr\\\")) {\\n            return 4;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"May\\\")) {\\n            return 5;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Jun\\\")) {\\n            return 6;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Jul\\\")) {\\n            return 7;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Aug\\\")) {\\n            return 8;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Sep\\\")) {\\n            return 9;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Oct\\\")) {\\n            return 10;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Nov\\\")) {\\n            return 11;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Dec\\\")) {\\n            return 12;\\n        } else {\\n            revert(\\\"Invalid month\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74067d5ce3820b0763d3faee918d58f423377b0729af325e8f7670ee4466b713\",\"license\":\"MIT\"},\"contracts/verifiers/hdfc_send_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 4702324236483749359376242949045822465319116726958430523945202749659299908356;\\n    uint256 constant deltax2 = 3208360273321841799729262863226982899406813453791710733556183670543714948331;\\n    uint256 constant deltay1 = 20522417867108599823821076712059869373887669366867675744686285826246555872195;\\n    uint256 constant deltay2 = 12670660525148580266180384698238910692596142688879851786303352145688714106072;\\n\\n\\n    uint256 constant IC0x = 8030280747517387687084877954234429976549976554414160216395914656104281510226;\\n    uint256 constant IC0y = 17104142844454039490663032536549076577086340484025562888729760759694808607073;\\n\\n    uint256 constant IC1x = 8772237536144360869027888991210947226074582978952325102593968904821952496262;\\n    uint256 constant IC1y = 3122625119048240212134605236752638202088112691321561361183603728052095638860;\\n\\n    uint256 constant IC2x = 9866912783934848269401547176895297308112639832209806585476829119584997553683;\\n    uint256 constant IC2y = 18902285702690262680512478183614519704432813846276579831365492715033962922088;\\n\\n    uint256 constant IC3x = 16438843084767575186842465721500270558254188834133860009416059973276198912687;\\n    uint256 constant IC3y = 19637681743089590686621664763467973754245190088097969027495488201226096932201;\\n\\n    uint256 constant IC4x = 16244957609429507716576008270804128279750543290646474514068167892102606186532;\\n    uint256 constant IC4y = 16583611018934211828874350883177026517224756607611408661470436361325164178493;\\n\\n    uint256 constant IC5x = 1880231857260586659536997649990861400508081010769531584628586338531085366147;\\n    uint256 constant IC5y = 3722839973812376181715232865179709729667208171660553266886579036419738778905;\\n\\n    uint256 constant IC6x = 1270409441163088899313281517456149544998439975345678595006767836844214411555;\\n    uint256 constant IC6y = 10860874768269047281776646019661374802388524425936615586287903660208564296932;\\n\\n    uint256 constant IC7x = 8434045441105599576935866859120453521448783233787069448109618000861402242607;\\n    uint256 constant IC7y = 21026011281811734411736486883798620858743532933669000129465844405873540372296;\\n\\n    uint256 constant IC8x = 16444826603046727982676650569240181121009190318002859965831975618430480163200;\\n    uint256 constant IC8y = 13330479436133799576954496017456751243468101156567577943444875506883800747485;\\n\\n    uint256 constant IC9x = 10555698792423422968534735611731058731769401972428000627056129295681285141769;\\n    uint256 constant IC9y = 16920701552148154082888907960678652530790355790484478529127070630322055182590;\\n\\n    uint256 constant IC10x = 560745557010411154560455562795570257381559403111495489793631749127360454692;\\n    uint256 constant IC10y = 1810559313890482073038275535517759684260573040004038901411592861530654003553;\\n\\n    uint256 constant IC11x = 16290647924331362744847363177877456121951933254859466501497770055360811608170;\\n    uint256 constant IC11y = 7357664199131242056460365154843603175601302622408068632904637798809388576439;\\n\\n    uint256 constant IC12x = 18752167508011332686902609807404507911733917202367475123738963433802316522501;\\n    uint256 constant IC12y = 18915834728830385178845869536888475042275783085177607701559012212414153432990;\\n\\n    uint256 constant IC13x = 510508922566750460861825255921948971141871467672055616177326398295988211346;\\n    uint256 constant IC13y = 897537967901588078181449387398733392563087304136250554173225523551061601615;\\n\\n    uint256 constant IC14x = 12705726630718483467144829385938528127462379446304491139120491926133440095304;\\n    uint256 constant IC14y = 17721913697683987271820073115272158306375363130125429582329456762454201602835;\\n\\n    uint256 constant IC15x = 5311519503957019671658191600270827412585500467097722438446167059198229906675;\\n    uint256 constant IC15y = 18882610836190640499297283067779602696308349987082087123526913107849320426311;\\n\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[15] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n\\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n\\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n\\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n\\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n\\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n\\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n\\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\\n\\n                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\\n\\n                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))\\n\\n                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))\\n\\n                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))\\n\\n                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))\\n\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            checkField(calldataload(add(_pubSignals, 64)))\\n\\n            checkField(calldataload(add(_pubSignals, 96)))\\n\\n            checkField(calldataload(add(_pubSignals, 128)))\\n\\n            checkField(calldataload(add(_pubSignals, 160)))\\n\\n            checkField(calldataload(add(_pubSignals, 192)))\\n\\n            checkField(calldataload(add(_pubSignals, 224)))\\n\\n            checkField(calldataload(add(_pubSignals, 256)))\\n\\n            checkField(calldataload(add(_pubSignals, 288)))\\n\\n            checkField(calldataload(add(_pubSignals, 320)))\\n\\n            checkField(calldataload(add(_pubSignals, 352)))\\n\\n            checkField(calldataload(add(_pubSignals, 384)))\\n\\n            checkField(calldataload(add(_pubSignals, 416)))\\n\\n            checkField(calldataload(add(_pubSignals, 448)))\\n\\n            checkField(calldataload(add(_pubSignals, 480)))\\n\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\",\"keccak256\":\"0x708985be21c0895b2b06ac50102da21cdf2bb14ab8f3f7c0a7be754bcc4207d8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801562000010575f80fd5b5060405162002d0738038062002d07833981016040819052620000339162000115565b848484848462000043336200009a565b6001600160a01b03858116608052600180546001600160a01b031990811687841617909155600280549091169185169190911790556003620000868382620002b6565b506004555062000382975050505050505050565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000fe575f80fd5b50565b634e487b7160e01b5f52604160045260245ffd5b5f805f805f60a086880312156200012a575f80fd5b85516200013781620000e9565b809550506020808701516200014c81620000e9565b60408801519095506200015f81620000e9565b60608801519094506001600160401b03808211156200017c575f80fd5b818901915089601f83011262000190575f80fd5b815181811115620001a557620001a562000101565b604051601f8201601f19908116603f01168101908382118183101715620001d057620001d062000101565b816040528281528c86848701011115620001e8575f80fd5b5f93505b828410156200020b5784840186015181850187015292850192620001ec565b5f868483010152809750505050505050608086015190509295509295909350565b600181811c908216806200024157607f821691505b6020821081036200026057634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620002b157805f5260205f20601f840160051c810160208510156200028d5750805b601f840160051c820191505b81811015620002ae575f815560010162000299565b50505b505050565b81516001600160401b03811115620002d257620002d262000101565b620002ea81620002e384546200022c565b8462000266565b602080601f83116001811462000320575f8415620003085750858301515b5f19600386901b1c1916600185901b1785556200037a565b5f85815260208120601f198616915b8281101562000350578886015182559484019460019091019084016200032f565b50858210156200036e57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b608051612966620003a15f395f818160f9015261030a01526129665ff3fe608060405234801561000f575f80fd5b50600436106100f0575f3560e01c8063bf93fde111610093578063dbac582111610063578063dbac582114610219578063f054a9a314610230578063f2fde38b14610243578063f6c7226b14610256575f80fd5b8063bf93fde1146101ae578063c0d05fed146101e9578063ced1e978146101fe578063d0b71f9914610206575f80fd5b80638da5cb5b116100ce5780638da5cb5b14610165578063a8ef333f14610175578063b2a3fda414610188578063b870676c1461019b575f80fd5b806315d276e1146100f457806319d0915214610138578063715018a61461015b575b5f80fd5b61011b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61014b610146366004612285565b610269565b604051901515815260200161012f565b6101636102da565b005b5f546001600160a01b031661011b565b60015461011b906001600160a01b031681565b610163610196366004612285565b6102ed565b60025461011b906001600160a01b031681565b6101c16101bc36600461229c565b6102fa565b604080519586526020860194909452928401919091526060830152608082015260a00161012f565b6101f16105a1565b60405161012f91906122d5565b6101f161062d565b61016361021436600461231b565b6106bd565b61022260045481565b60405190815260200161012f565b61014b61023e366004612346565b6106e7565b61016361025136600461231b565b61105f565b6101636102643660046123bb565b6110d5565b600154604051630ce848a960e11b8152600481018390525f916001600160a01b0316906319d0915290602401602060405180830381865afa1580156102b0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d49190612466565b92915050565b6102e26110ed565b6102eb5f611146565b565b6102f56110ed565b600455565b5f80808080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037c5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b6040805163f054a9a360e01b8152309163f054a9a3916103af918a919082019060c0830190610100840190600401612485565b602060405180830381865afa1580156103ca573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ee9190612466565b61042a5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610373565b610438610100870135610269565b6104845760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610373565b5f610496876101000160016004611195565b905060036040516104a79190612517565b6040518091039020816040516020016104c09190612589565b60405160208183030381529060405280519060200120146105235760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610373565b61053f6006610539896101000160046006611195565b90611265565b95505f61055388610100016006600b611195565b90506004546105618261127c565b61056b91906125b8565b95506102808801359450610260880135935061058b6102a0890135611417565b509496939592945090926102c090920135919050565b600380546105ae906124e5565b80601f01602080910402602001604051908101604052809291908181526020018280546105da906124e5565b80156106255780601f106105fc57610100808354040283529160200191610625565b820191905f5260205f20905b81548152906001019060200180831161060857829003601f168201915b505050505081565b60606003805461063c906124e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610668906124e5565b80156106b35780601f1061068a576101008083540402835291602001916106b3565b820191905f5260205f20905b81548152906001019060200180831161069657829003601f168201915b5050505050905090565b6106c56110ed565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b5f610f66565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811061071c575f805260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa91508161074f575f805260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa9150508061077e575f805260205ff35b5050505050565b7f11c0fa536785a14ea232244faf4db797ed78290ed4fb27d5038cac6ae9a3915285527f25d09a0e68aa815305c2995cc88de47499c6bf8dd88aebc829db24846944696160208601525f608086018661082187357f06e757dafa88a886ce63a8c2b453fedcc71a0eb31f0131a905a4913207355d4c7f1364e9163e5b15b2805a6aac65afcb4001017d5343017c737564a23b6d0842868461071f565b61087160208801357f29ca5087e79a2d1fb754d59033fec517f164dfd734b75a8cc89c6e2894cec0687f15d07987dd5b551b72857cefaed299e7a1989a2927f859a6d0ad593beba936138461071f565b6108c160408801357f2b6a88b3112d75e15c1fc7f737cf28da3a22df26156e80d1dceb1d792aa6f5697f24580e32cd5353fa5aa622fec5d0cb8834ad9a35a5d7ed3de960648f39fa42af8461071f565b61091160608801357f24a9fdbfeb9e558ea7eb1c0f9d2f59adb3e19fee489181e0649cac9968d92c3d7f23ea51f6d35583a15c0e0f0bb44cdb055ddccb3109365d0feb10559bce3f68248461071f565b61096160808801357f083b0d8149f542f7d51ff78dd5bd947ac228adf4765f13cbb8ae4b0c9de33d197f04282c6bb25a8a05b9d698fa726e427251a636a05ae11f8178ed74ce70c7b3838461071f565b6109b160a08801357f1803098aec4fded4fc5b2bab68cf7fb1f5cdfc173e8b4c2d6f3ad5ae8b7d5ce47f02cf06b9216abdbe0d145ee6ba106240740f6554ba338900ae157bc1d11361238461071f565b610a0160c08801357f2e7c4cf7b58d9b12bb9cee35f053430f80678fe1885b216886c042d0cde497487f12a5802440d5b5d29b299b8818078e7c2165b5d2f49776e55ac4c8da11581e2f8461071f565b610a5160e08801357f1d78c8b32944313d7e911c1c721109f4a04d0879fe1e1802e3ddf943612a4ddd7f245b7127d480d0e750564b78818a037a57e3a17f889b15dbb01e9e243ad421808461071f565b610aa26101008801357f2568c716b634adaf4106a56b42776b724d5ef21e52864a1347088de129b478fe7f17565054db4aa08be111cfc14344b79875bc704e563362d7a9d3992271be35098461071f565b610af36101208801357f0400bd816ec371a36d4594b5466ba7a092139238746fcee0f5e254b7944c51617f013d5ee8b0b9e671e5bde7130e47682c47ca38dd479db7331ca393bf5edfa0248461071f565b610b446101408801357f10444a550566f8186e8fd121fe8a929e92f66e479515b67833a3d4bc07e5eeb77f24042e12cbcf48ac6d7b05da02753790ed095694fe2b3184239ec60500d3a86a8461071f565b610b956101608801357f29d1fba93734715a1dee7b66433894a2fb3304bcc7784a98f5f54b57c5f31f9e7f297559c6982845ac8cbc9d10c68703d05fff58f59bd022718930361da7d624058461071f565b610be66101808801357f01fbfd0d8299e28fe5b7b1e44840e0e49175cd784ea29456a5544d41ec56ed4f7f0120f0145b0c23de99655163334fafda2296421f9ff6d616a4381b731bcf8e928461071f565b610c376101a08801357f272e3f68e4dde921f3fecbf1da3e48be0375066071f79cf60d12a94909b013137f1c172fb9ad177d1f52f6f867020a4fd1d20819d027b26b5306eabd3d6a2da4488461071f565b610c886101c08801357f29bf2dd28bddc6677bfc29ae10bc2fc88614c805470de8f9c3bd943ef5b56b477f0bbe36a822bf94a2563eccdcdf022dce00eb8770630efa37084f7dabe6ec84f38461071f565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f0a656bd3ce0f460dfb7f25d7c71d52fecdc0eb363d413b2585775d8283eb0b046102808201527f0717de189821c8fd7338c4b95469c6dd47ee1aad6c8510dc9bcd7983852514eb6102a08201527f2d5f46e1cbebc83f7340eecebc2fff23e5da01cab367c8f7ec52c1bd3f6a2bc36102c08201527f1c0356f78812a13151f9212f9c69e8a7a9b2a7634c2b43617adda632ce9954d86102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610f7d5f8401356106ed565b610f8a60208401356106ed565b610f9760408401356106ed565b610fa460608401356106ed565b610fb160808401356106ed565b610fbe60a08401356106ed565b610fcb60c08401356106ed565b610fd860e08401356106ed565b610fe66101008401356106ed565b610ff46101208401356106ed565b6110026101408401356106ed565b6110106101608401356106ed565b61101e6101808401356106ed565b61102c6101a08401356106ed565b61103a6101c08401356106ed565b6110486101e08401356106ed565b611055818486888a610785565b9050805f5260205ff35b6110676110ed565b6001600160a01b0381166110cc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610373565b61071c81611146565b6110dd6110ed565b60036110e98282612614565b5050565b5f546001600160a01b031633146102eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610373565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60605f6111a284846126d4565b60ff1667ffffffffffffffff8111156111bd576111bd6123a7565b6040519080825280602002602001820160405280156111e6578160200160208202803683370190505b50905060ff84165b8360ff16811015611241578581600f811061120b5761120b6124d1565b60200201358261121e60ff8816846126ed565b8151811061122e5761122e6124d1565b60209081029190910101526001016111ee565b5061125c600782516112539190612700565b82906007611524565b95945050505050565b5f61127583601760f91b84611836565b9392505050565b5f61128561225d565b5f805f5b8551811015611333578581815181106112a4576112a46124d1565b6020910101516001600160f81b031916600160fd1b14806112e957508581815181106112d2576112d26124d1565b6020910101516001600160f81b031916601d60f91b145b1561132b576112f98683836119fc565b84846008811061130b5761130b6124d1565b602002015261131b8160016125b8565b91508261132781612717565b9350505b600101611289565b50845161134390869083906119fc565b838360088110611355576113556124d1565b6020020152600782146113a05760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206461746520737472696e6760681b6044820152606401610373565b5f6113fa6113b7828660035b602002015190611265565b60408601516113c590611abd565b6113d15f8860016113ac565b6113dd5f8960046113ac565b6113e95f8a60056113ac565b6113f55f8b60066113ac565b611ef2565b905061140d818560076020020151611f4d565b9695505050505050565b60025460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa15801561145e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114829190612466565b156114cf5760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e2075736564006044820152606401610373565b600254604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df32906024015f604051808303815f87803b158015611512575f80fd5b505af115801561077e573d5f803e3d5ffd5b60605f808386516115359190612700565b67ffffffffffffffff81111561154d5761154d6123a7565b6040519080825280601f01601f191660200182016040528015611577576020820181803683370190505b5090505f805b87518161ffff161015611711575f888261ffff16815181106115a1576115a16124d1565b602002602001015190505f8767ffffffffffffffff8111156115c5576115c56123a7565b6040519080825280602002602001820160405280156115ee578160200160208202803683370190505b5090505f5b8881101561163557611606816008612700565b83901c82828151811061161b5761161b6124d1565b60ff909216602092830291909101909101526001016115f3565b505f5b888110156116fb575f828281518110611653576116536124d1565b602002602001015160ff169050805f146116c8578060f81b87878151811061167d5761167d6124d1565b60200101906001600160f81b03191690815f1a9053508561169d81612717565b96506116ac9050600289612743565b60ff165f036116c3576116c0600189612764565b97505b6116eb565b6116d3600289612743565b60ff166001036116eb576116e8600189612764565b97505b5060089290921c91600101611638565b50505080806117099061277d565b91505061157d565b5060018360ff1610156117b25760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a401610373565b858111156118205760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b6064820152608401610373565b5f61182a8361203e565b98975050505050505050565b5f83818080805b845181101561198157603060f81b85828151811061185d5761185d6124d1565b01602001516001600160f81b0319161080159061189e5750603960f81b85828151811061188c5761188c6124d1565b01602001516001600160f81b03191611155b156118e15760308582815181106118b7576118b76124d1565b01602001516118c9919060f81c6126ed565b6118d485600a612700565b6118de91906125b8565b93505b81156118f557826118f181612717565b9350505b876001600160f81b031916858281518110611912576119126124d1565b01602001516001600160f81b031916036119795781156119745760405162461bcd60e51b815260206004820152601c60248201527f537472696e6720686173206d756c7469706c6520646563696d616c73000000006044820152606401610373565b600191505b60010161183d565b50858211156119dd5760405162461bcd60e51b815260206004820152602260248201527f537472696e672068617320746f6f206d616e7920646563696d616c20706c6163604482015261657360f01b6064820152608401610373565b6119e782876126ed565b6119f290600a61287d565b61182a9084612700565b6060835f611a0a85856126ed565b67ffffffffffffffff811115611a2257611a226123a7565b6040519080825280601f01601f191660200182016040528015611a4c576020820181803683370190505b509050845b84811015611ab357828181518110611a6b57611a6b6124d1565b01602001516001600160f81b03191682611a8588846126ed565b81518110611a9557611a956124d1565b60200101906001600160f81b03191690815f1a905350600101611a51565b5095945050505050565b5f7f4a18c9083b936e0757952a5d9d34b5575d427661506fbe9908c2a1da3f3e80d982604051602001611af09190612589565b6040516020818303038152906040528051906020012003611b1357506001919050565b7f78ec83563b948f0ac242d7eaefd592adf65964e11cc27f11ae41faa99a1e990a82604051602001611b459190612589565b6040516020818303038152906040528051906020012003611b6857506002919050565b7f2bab7d3f253ae0e3722abcc2571faced288946968116996ffc3de31fb7348ec382604051602001611b9a9190612589565b6040516020818303038152906040528051906020012003611bbd57506003919050565b7fc6f33aba2381b69f05afc78835e501547a9daffa08d674623068c378423ac18882604051602001611bef9190612589565b6040516020818303038152906040528051906020012003611c1257506004919050565b7fdb5ee1006003349b29eda5be5fe34f728659f836a948d4ec595114aebbb159d382604051602001611c449190612589565b6040516020818303038152906040528051906020012003611c6757506005919050565b7f44a0046ab54c1458fc3c39dfcadc52509ad809730ec301470d2d747dbe77242d82604051602001611c999190612589565b6040516020818303038152906040528051906020012003611cbc57506006919050565b7f74d9e46f10329e61dc333ff1800274be516163110de31961b4e0c61de3e90c5c82604051602001611cee9190612589565b6040516020818303038152906040528051906020012003611d1157506007919050565b7fed40c08ab6f3d9c5d71155e25b1271d5b9eca8c27bf89e1d2293fcb77c5abf6482604051602001611d439190612589565b6040516020818303038152906040528051906020012003611d6657506008919050565b7f7d801199c77197eb9933a633741db90c2c6f3d7d14aca35f5f80a41b4a8863ac82604051602001611d989190612589565b6040516020818303038152906040528051906020012003611dbb57506009919050565b7fb7841ed82fc96483f061ddc0b19846855df22558c4aea3b3b058ce0d9f1f516482604051602001611ded9190612589565b6040516020818303038152906040528051906020012003611e105750600a919050565b7f487851233e540dddea8f904d6802590aead5463b1c44965d68348bb7def25cf482604051602001611e429190612589565b6040516020818303038152906040528051906020012003611e655750600b919050565b7f3bd971d8758c58fe0c4d635451404450c5edda87d624a89819e0be5a122933dc82604051602001611e979190612589565b6040516020818303038152906040528051906020012003611eba5750600c919050565b60405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840dadedce8d609b1b6044820152606401610373565b5f81611eff603c85612700565b611f0b610e1087612700565b62015180611f1a8b8b8b61212f565b611f249190612700565b611f2e91906125b8565b611f3891906125b8565b611f4291906125b8565b979650505050505050565b5f8151600514611f9f5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642074696d657a6f6e65206f66667365740000000000000000006044820152606401610373565b5f611fb18161053985600160036119fc565b90505f611fc58161053986600360056119fc565b90505f611fd382603c612700565b611fdf84610e10612700565b611fe991906125b8565b90505f611ff8868260016119fc565b5f81518110612009576120096124d1565b01602001516001600160f81b0319169050602b60f81b81146120345761202f82886125b8565b611f42565b611f4282886126ed565b805160609082905f5b825181101561208757828181518110612062576120626124d1565b01602001516001600160f81b0319165f0361207f57809150612087565b600101612047565b505f8167ffffffffffffffff8111156120a2576120a26123a7565b6040519080825280601f01601f1916602001820160405280156120cc576020820181803683370190505b5090505f5b82811015612126578381815181106120eb576120eb6124d1565b602001015160f81c60f81b828281518110612108576121086124d1565b60200101906001600160f81b03191690815f1a9053506001016120d1565b50949350505050565b5f6107b284101561213e575f80fd5b8383835f62253d8c60046064600c612157600e88612888565b61216191906128ae565b61216d886113246128da565b61217791906128da565b61218191906128ae565b61218c906003612901565b61219691906128ae565b600c806121a4600e88612888565b6121ae91906128ae565b6121b990600c612901565b6121c4600288612888565b6121ce9190612888565b6121da9061016f612901565b6121e491906128ae565b6004600c6121f3600e89612888565b6121fd91906128ae565b612209896112c06128da565b61221391906128da565b61221f906105b5612901565b61222991906128ae565b612235617d4b87612888565b61223f91906128da565b61224991906128da565b6122539190612888565b61182a9190612888565b6040518061010001604052806008905b606081526020019060019003908161226d5790505090565b5f60208284031215612295575f80fd5b5035919050565b5f6102e082840312156122ad575f80fd5b50919050565b5f5b838110156122cd5781810151838201526020016122b5565b50505f910152565b602081525f82518060208401526122f38160408501602087016122b3565b601f01601f19169190910160400192915050565b6001600160a01b038116811461071c575f80fd5b5f6020828403121561232b575f80fd5b813561127581612307565b80604081018310156102d4575f80fd5b5f805f806102e080868803121561235b575f80fd5b6123658787612336565b945060c0860187811115612377575f80fd5b6040870194506123878882612336565b935050868187011115612398575f80fd5b50929591945092610100019150565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156123cb575f80fd5b813567ffffffffffffffff808211156123e2575f80fd5b818401915084601f8301126123f5575f80fd5b813581811115612407576124076123a7565b604051601f8201601f19908116603f0116810190838211818310171561242f5761242f6123a7565b81604052828152876020848701011115612447575f80fd5b826020860160208301375f928101602001929092525095945050505050565b5f60208284031215612476575f80fd5b81518015158114611275575f80fd5b6102e08101604080878437808301865f5b60028110156124b357838284379183019190830190600101612496565b505050808560c0850137506101e08361010084013795945050505050565b634e487b7160e01b5f52603260045260245ffd5b600181811c908216806124f957607f821691505b6020821081036122ad57634e487b7160e01b5f52602260045260245ffd5b5f808354612524816124e5565b6001828116801561253c57600181146125515761257d565b60ff198416875282151583028701945061257d565b875f526020805f205f5b858110156125745781548a82015290840190820161255b565b50505082870194505b50929695505050505050565b5f825161259a8184602087016122b3565b9190910192915050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156102d4576102d46125a4565b601f82111561260f57805f5260205f20601f840160051c810160208510156125f05750805b601f840160051c820191505b8181101561077e575f81556001016125fc565b505050565b815167ffffffffffffffff81111561262e5761262e6123a7565b6126428161263c84546124e5565b846125cb565b602080601f831160018114612675575f841561265e5750858301515b5f19600386901b1c1916600185901b1785556126cc565b5f85815260208120601f198616915b828110156126a357888601518255948401946001909101908401612684565b50858210156126c057878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60ff82811682821603908111156102d4576102d46125a4565b818103818111156102d4576102d46125a4565b80820281158282048414176102d4576102d46125a4565b5f60018201612728576127286125a4565b5060010190565b634e487b7160e01b5f52601260045260245ffd5b5f60ff8316806127555761275561272f565b8060ff84160691505092915050565b60ff81811683821601908111156102d4576102d46125a4565b5f61ffff808316818103612793576127936125a4565b6001019392505050565b600181815b808511156127d757815f19048211156127bd576127bd6125a4565b808516156127ca57918102915b93841c93908002906127a2565b509250929050565b5f826127ed575060016102d4565b816127f957505f6102d4565b816001811461280f576002811461281957612835565b60019150506102d4565b60ff84111561282a5761282a6125a4565b50506001821b6102d4565b5060208310610133831016604e8410600b8410161715612858575081810a6102d4565b612862838361279d565b805f1904821115612875576128756125a4565b029392505050565b5f61127583836127df565b8181035f8312801583831316838312821617156128a7576128a76125a4565b5092915050565b5f826128bc576128bc61272f565b600160ff1b82145f19841416156128d5576128d56125a4565b500590565b8082018281125f8312801582168215821617156128f9576128f96125a4565b505092915050565b8082025f8212600160ff1b8414161561291c5761291c6125a4565b81810583148215176102d4576102d46125a456fea26469706673582212203ccd4a35386f7e621857328986ffd9e421258a15f9bd4cad5efa73430d11305064736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106100f0575f3560e01c8063bf93fde111610093578063dbac582111610063578063dbac582114610219578063f054a9a314610230578063f2fde38b14610243578063f6c7226b14610256575f80fd5b8063bf93fde1146101ae578063c0d05fed146101e9578063ced1e978146101fe578063d0b71f9914610206575f80fd5b80638da5cb5b116100ce5780638da5cb5b14610165578063a8ef333f14610175578063b2a3fda414610188578063b870676c1461019b575f80fd5b806315d276e1146100f457806319d0915214610138578063715018a61461015b575b5f80fd5b61011b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61014b610146366004612285565b610269565b604051901515815260200161012f565b6101636102da565b005b5f546001600160a01b031661011b565b60015461011b906001600160a01b031681565b610163610196366004612285565b6102ed565b60025461011b906001600160a01b031681565b6101c16101bc36600461229c565b6102fa565b604080519586526020860194909452928401919091526060830152608082015260a00161012f565b6101f16105a1565b60405161012f91906122d5565b6101f161062d565b61016361021436600461231b565b6106bd565b61022260045481565b60405190815260200161012f565b61014b61023e366004612346565b6106e7565b61016361025136600461231b565b61105f565b6101636102643660046123bb565b6110d5565b600154604051630ce848a960e11b8152600481018390525f916001600160a01b0316906319d0915290602401602060405180830381865afa1580156102b0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d49190612466565b92915050565b6102e26110ed565b6102eb5f611146565b565b6102f56110ed565b600455565b5f80808080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037c5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b6040805163f054a9a360e01b8152309163f054a9a3916103af918a919082019060c0830190610100840190600401612485565b602060405180830381865afa1580156103ca573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ee9190612466565b61042a5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610373565b610438610100870135610269565b6104845760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610373565b5f610496876101000160016004611195565b905060036040516104a79190612517565b6040518091039020816040516020016104c09190612589565b60405160208183030381529060405280519060200120146105235760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610373565b61053f6006610539896101000160046006611195565b90611265565b95505f61055388610100016006600b611195565b90506004546105618261127c565b61056b91906125b8565b95506102808801359450610260880135935061058b6102a0890135611417565b509496939592945090926102c090920135919050565b600380546105ae906124e5565b80601f01602080910402602001604051908101604052809291908181526020018280546105da906124e5565b80156106255780601f106105fc57610100808354040283529160200191610625565b820191905f5260205f20905b81548152906001019060200180831161060857829003601f168201915b505050505081565b60606003805461063c906124e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610668906124e5565b80156106b35780601f1061068a576101008083540402835291602001916106b3565b820191905f5260205f20905b81548152906001019060200180831161069657829003601f168201915b5050505050905090565b6106c56110ed565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b5f610f66565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811061071c575f805260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa91508161074f575f805260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa9150508061077e575f805260205ff35b5050505050565b7f11c0fa536785a14ea232244faf4db797ed78290ed4fb27d5038cac6ae9a3915285527f25d09a0e68aa815305c2995cc88de47499c6bf8dd88aebc829db24846944696160208601525f608086018661082187357f06e757dafa88a886ce63a8c2b453fedcc71a0eb31f0131a905a4913207355d4c7f1364e9163e5b15b2805a6aac65afcb4001017d5343017c737564a23b6d0842868461071f565b61087160208801357f29ca5087e79a2d1fb754d59033fec517f164dfd734b75a8cc89c6e2894cec0687f15d07987dd5b551b72857cefaed299e7a1989a2927f859a6d0ad593beba936138461071f565b6108c160408801357f2b6a88b3112d75e15c1fc7f737cf28da3a22df26156e80d1dceb1d792aa6f5697f24580e32cd5353fa5aa622fec5d0cb8834ad9a35a5d7ed3de960648f39fa42af8461071f565b61091160608801357f24a9fdbfeb9e558ea7eb1c0f9d2f59adb3e19fee489181e0649cac9968d92c3d7f23ea51f6d35583a15c0e0f0bb44cdb055ddccb3109365d0feb10559bce3f68248461071f565b61096160808801357f083b0d8149f542f7d51ff78dd5bd947ac228adf4765f13cbb8ae4b0c9de33d197f04282c6bb25a8a05b9d698fa726e427251a636a05ae11f8178ed74ce70c7b3838461071f565b6109b160a08801357f1803098aec4fded4fc5b2bab68cf7fb1f5cdfc173e8b4c2d6f3ad5ae8b7d5ce47f02cf06b9216abdbe0d145ee6ba106240740f6554ba338900ae157bc1d11361238461071f565b610a0160c08801357f2e7c4cf7b58d9b12bb9cee35f053430f80678fe1885b216886c042d0cde497487f12a5802440d5b5d29b299b8818078e7c2165b5d2f49776e55ac4c8da11581e2f8461071f565b610a5160e08801357f1d78c8b32944313d7e911c1c721109f4a04d0879fe1e1802e3ddf943612a4ddd7f245b7127d480d0e750564b78818a037a57e3a17f889b15dbb01e9e243ad421808461071f565b610aa26101008801357f2568c716b634adaf4106a56b42776b724d5ef21e52864a1347088de129b478fe7f17565054db4aa08be111cfc14344b79875bc704e563362d7a9d3992271be35098461071f565b610af36101208801357f0400bd816ec371a36d4594b5466ba7a092139238746fcee0f5e254b7944c51617f013d5ee8b0b9e671e5bde7130e47682c47ca38dd479db7331ca393bf5edfa0248461071f565b610b446101408801357f10444a550566f8186e8fd121fe8a929e92f66e479515b67833a3d4bc07e5eeb77f24042e12cbcf48ac6d7b05da02753790ed095694fe2b3184239ec60500d3a86a8461071f565b610b956101608801357f29d1fba93734715a1dee7b66433894a2fb3304bcc7784a98f5f54b57c5f31f9e7f297559c6982845ac8cbc9d10c68703d05fff58f59bd022718930361da7d624058461071f565b610be66101808801357f01fbfd0d8299e28fe5b7b1e44840e0e49175cd784ea29456a5544d41ec56ed4f7f0120f0145b0c23de99655163334fafda2296421f9ff6d616a4381b731bcf8e928461071f565b610c376101a08801357f272e3f68e4dde921f3fecbf1da3e48be0375066071f79cf60d12a94909b013137f1c172fb9ad177d1f52f6f867020a4fd1d20819d027b26b5306eabd3d6a2da4488461071f565b610c886101c08801357f29bf2dd28bddc6677bfc29ae10bc2fc88614c805470de8f9c3bd943ef5b56b477f0bbe36a822bf94a2563eccdcdf022dce00eb8770630efa37084f7dabe6ec84f38461071f565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f0a656bd3ce0f460dfb7f25d7c71d52fecdc0eb363d413b2585775d8283eb0b046102808201527f0717de189821c8fd7338c4b95469c6dd47ee1aad6c8510dc9bcd7983852514eb6102a08201527f2d5f46e1cbebc83f7340eecebc2fff23e5da01cab367c8f7ec52c1bd3f6a2bc36102c08201527f1c0356f78812a13151f9212f9c69e8a7a9b2a7634c2b43617adda632ce9954d86102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610f7d5f8401356106ed565b610f8a60208401356106ed565b610f9760408401356106ed565b610fa460608401356106ed565b610fb160808401356106ed565b610fbe60a08401356106ed565b610fcb60c08401356106ed565b610fd860e08401356106ed565b610fe66101008401356106ed565b610ff46101208401356106ed565b6110026101408401356106ed565b6110106101608401356106ed565b61101e6101808401356106ed565b61102c6101a08401356106ed565b61103a6101c08401356106ed565b6110486101e08401356106ed565b611055818486888a610785565b9050805f5260205ff35b6110676110ed565b6001600160a01b0381166110cc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610373565b61071c81611146565b6110dd6110ed565b60036110e98282612614565b5050565b5f546001600160a01b031633146102eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610373565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60605f6111a284846126d4565b60ff1667ffffffffffffffff8111156111bd576111bd6123a7565b6040519080825280602002602001820160405280156111e6578160200160208202803683370190505b50905060ff84165b8360ff16811015611241578581600f811061120b5761120b6124d1565b60200201358261121e60ff8816846126ed565b8151811061122e5761122e6124d1565b60209081029190910101526001016111ee565b5061125c600782516112539190612700565b82906007611524565b95945050505050565b5f61127583601760f91b84611836565b9392505050565b5f61128561225d565b5f805f5b8551811015611333578581815181106112a4576112a46124d1565b6020910101516001600160f81b031916600160fd1b14806112e957508581815181106112d2576112d26124d1565b6020910101516001600160f81b031916601d60f91b145b1561132b576112f98683836119fc565b84846008811061130b5761130b6124d1565b602002015261131b8160016125b8565b91508261132781612717565b9350505b600101611289565b50845161134390869083906119fc565b838360088110611355576113556124d1565b6020020152600782146113a05760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206461746520737472696e6760681b6044820152606401610373565b5f6113fa6113b7828660035b602002015190611265565b60408601516113c590611abd565b6113d15f8860016113ac565b6113dd5f8960046113ac565b6113e95f8a60056113ac565b6113f55f8b60066113ac565b611ef2565b905061140d818560076020020151611f4d565b9695505050505050565b60025460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa15801561145e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114829190612466565b156114cf5760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e2075736564006044820152606401610373565b600254604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df32906024015f604051808303815f87803b158015611512575f80fd5b505af115801561077e573d5f803e3d5ffd5b60605f808386516115359190612700565b67ffffffffffffffff81111561154d5761154d6123a7565b6040519080825280601f01601f191660200182016040528015611577576020820181803683370190505b5090505f805b87518161ffff161015611711575f888261ffff16815181106115a1576115a16124d1565b602002602001015190505f8767ffffffffffffffff8111156115c5576115c56123a7565b6040519080825280602002602001820160405280156115ee578160200160208202803683370190505b5090505f5b8881101561163557611606816008612700565b83901c82828151811061161b5761161b6124d1565b60ff909216602092830291909101909101526001016115f3565b505f5b888110156116fb575f828281518110611653576116536124d1565b602002602001015160ff169050805f146116c8578060f81b87878151811061167d5761167d6124d1565b60200101906001600160f81b03191690815f1a9053508561169d81612717565b96506116ac9050600289612743565b60ff165f036116c3576116c0600189612764565b97505b6116eb565b6116d3600289612743565b60ff166001036116eb576116e8600189612764565b97505b5060089290921c91600101611638565b50505080806117099061277d565b91505061157d565b5060018360ff1610156117b25760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a401610373565b858111156118205760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b6064820152608401610373565b5f61182a8361203e565b98975050505050505050565b5f83818080805b845181101561198157603060f81b85828151811061185d5761185d6124d1565b01602001516001600160f81b0319161080159061189e5750603960f81b85828151811061188c5761188c6124d1565b01602001516001600160f81b03191611155b156118e15760308582815181106118b7576118b76124d1565b01602001516118c9919060f81c6126ed565b6118d485600a612700565b6118de91906125b8565b93505b81156118f557826118f181612717565b9350505b876001600160f81b031916858281518110611912576119126124d1565b01602001516001600160f81b031916036119795781156119745760405162461bcd60e51b815260206004820152601c60248201527f537472696e6720686173206d756c7469706c6520646563696d616c73000000006044820152606401610373565b600191505b60010161183d565b50858211156119dd5760405162461bcd60e51b815260206004820152602260248201527f537472696e672068617320746f6f206d616e7920646563696d616c20706c6163604482015261657360f01b6064820152608401610373565b6119e782876126ed565b6119f290600a61287d565b61182a9084612700565b6060835f611a0a85856126ed565b67ffffffffffffffff811115611a2257611a226123a7565b6040519080825280601f01601f191660200182016040528015611a4c576020820181803683370190505b509050845b84811015611ab357828181518110611a6b57611a6b6124d1565b01602001516001600160f81b03191682611a8588846126ed565b81518110611a9557611a956124d1565b60200101906001600160f81b03191690815f1a905350600101611a51565b5095945050505050565b5f7f4a18c9083b936e0757952a5d9d34b5575d427661506fbe9908c2a1da3f3e80d982604051602001611af09190612589565b6040516020818303038152906040528051906020012003611b1357506001919050565b7f78ec83563b948f0ac242d7eaefd592adf65964e11cc27f11ae41faa99a1e990a82604051602001611b459190612589565b6040516020818303038152906040528051906020012003611b6857506002919050565b7f2bab7d3f253ae0e3722abcc2571faced288946968116996ffc3de31fb7348ec382604051602001611b9a9190612589565b6040516020818303038152906040528051906020012003611bbd57506003919050565b7fc6f33aba2381b69f05afc78835e501547a9daffa08d674623068c378423ac18882604051602001611bef9190612589565b6040516020818303038152906040528051906020012003611c1257506004919050565b7fdb5ee1006003349b29eda5be5fe34f728659f836a948d4ec595114aebbb159d382604051602001611c449190612589565b6040516020818303038152906040528051906020012003611c6757506005919050565b7f44a0046ab54c1458fc3c39dfcadc52509ad809730ec301470d2d747dbe77242d82604051602001611c999190612589565b6040516020818303038152906040528051906020012003611cbc57506006919050565b7f74d9e46f10329e61dc333ff1800274be516163110de31961b4e0c61de3e90c5c82604051602001611cee9190612589565b6040516020818303038152906040528051906020012003611d1157506007919050565b7fed40c08ab6f3d9c5d71155e25b1271d5b9eca8c27bf89e1d2293fcb77c5abf6482604051602001611d439190612589565b6040516020818303038152906040528051906020012003611d6657506008919050565b7f7d801199c77197eb9933a633741db90c2c6f3d7d14aca35f5f80a41b4a8863ac82604051602001611d989190612589565b6040516020818303038152906040528051906020012003611dbb57506009919050565b7fb7841ed82fc96483f061ddc0b19846855df22558c4aea3b3b058ce0d9f1f516482604051602001611ded9190612589565b6040516020818303038152906040528051906020012003611e105750600a919050565b7f487851233e540dddea8f904d6802590aead5463b1c44965d68348bb7def25cf482604051602001611e429190612589565b6040516020818303038152906040528051906020012003611e655750600b919050565b7f3bd971d8758c58fe0c4d635451404450c5edda87d624a89819e0be5a122933dc82604051602001611e979190612589565b6040516020818303038152906040528051906020012003611eba5750600c919050565b60405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840dadedce8d609b1b6044820152606401610373565b5f81611eff603c85612700565b611f0b610e1087612700565b62015180611f1a8b8b8b61212f565b611f249190612700565b611f2e91906125b8565b611f3891906125b8565b611f4291906125b8565b979650505050505050565b5f8151600514611f9f5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642074696d657a6f6e65206f66667365740000000000000000006044820152606401610373565b5f611fb18161053985600160036119fc565b90505f611fc58161053986600360056119fc565b90505f611fd382603c612700565b611fdf84610e10612700565b611fe991906125b8565b90505f611ff8868260016119fc565b5f81518110612009576120096124d1565b01602001516001600160f81b0319169050602b60f81b81146120345761202f82886125b8565b611f42565b611f4282886126ed565b805160609082905f5b825181101561208757828181518110612062576120626124d1565b01602001516001600160f81b0319165f0361207f57809150612087565b600101612047565b505f8167ffffffffffffffff8111156120a2576120a26123a7565b6040519080825280601f01601f1916602001820160405280156120cc576020820181803683370190505b5090505f5b82811015612126578381815181106120eb576120eb6124d1565b602001015160f81c60f81b828281518110612108576121086124d1565b60200101906001600160f81b03191690815f1a9053506001016120d1565b50949350505050565b5f6107b284101561213e575f80fd5b8383835f62253d8c60046064600c612157600e88612888565b61216191906128ae565b61216d886113246128da565b61217791906128da565b61218191906128ae565b61218c906003612901565b61219691906128ae565b600c806121a4600e88612888565b6121ae91906128ae565b6121b990600c612901565b6121c4600288612888565b6121ce9190612888565b6121da9061016f612901565b6121e491906128ae565b6004600c6121f3600e89612888565b6121fd91906128ae565b612209896112c06128da565b61221391906128da565b61221f906105b5612901565b61222991906128ae565b612235617d4b87612888565b61223f91906128da565b61224991906128da565b6122539190612888565b61182a9190612888565b6040518061010001604052806008905b606081526020019060019003908161226d5790505090565b5f60208284031215612295575f80fd5b5035919050565b5f6102e082840312156122ad575f80fd5b50919050565b5f5b838110156122cd5781810151838201526020016122b5565b50505f910152565b602081525f82518060208401526122f38160408501602087016122b3565b601f01601f19169190910160400192915050565b6001600160a01b038116811461071c575f80fd5b5f6020828403121561232b575f80fd5b813561127581612307565b80604081018310156102d4575f80fd5b5f805f806102e080868803121561235b575f80fd5b6123658787612336565b945060c0860187811115612377575f80fd5b6040870194506123878882612336565b935050868187011115612398575f80fd5b50929591945092610100019150565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156123cb575f80fd5b813567ffffffffffffffff808211156123e2575f80fd5b818401915084601f8301126123f5575f80fd5b813581811115612407576124076123a7565b604051601f8201601f19908116603f0116810190838211818310171561242f5761242f6123a7565b81604052828152876020848701011115612447575f80fd5b826020860160208301375f928101602001929092525095945050505050565b5f60208284031215612476575f80fd5b81518015158114611275575f80fd5b6102e08101604080878437808301865f5b60028110156124b357838284379183019190830190600101612496565b505050808560c0850137506101e08361010084013795945050505050565b634e487b7160e01b5f52603260045260245ffd5b600181811c908216806124f957607f821691505b6020821081036122ad57634e487b7160e01b5f52602260045260245ffd5b5f808354612524816124e5565b6001828116801561253c57600181146125515761257d565b60ff198416875282151583028701945061257d565b875f526020805f205f5b858110156125745781548a82015290840190820161255b565b50505082870194505b50929695505050505050565b5f825161259a8184602087016122b3565b9190910192915050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156102d4576102d46125a4565b601f82111561260f57805f5260205f20601f840160051c810160208510156125f05750805b601f840160051c820191505b8181101561077e575f81556001016125fc565b505050565b815167ffffffffffffffff81111561262e5761262e6123a7565b6126428161263c84546124e5565b846125cb565b602080601f831160018114612675575f841561265e5750858301515b5f19600386901b1c1916600185901b1785556126cc565b5f85815260208120601f198616915b828110156126a357888601518255948401946001909101908401612684565b50858210156126c057878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60ff82811682821603908111156102d4576102d46125a4565b818103818111156102d4576102d46125a4565b80820281158282048414176102d4576102d46125a4565b5f60018201612728576127286125a4565b5060010190565b634e487b7160e01b5f52601260045260245ffd5b5f60ff8316806127555761275561272f565b8060ff84160691505092915050565b60ff81811683821601908111156102d4576102d46125a4565b5f61ffff808316818103612793576127936125a4565b6001019392505050565b600181815b808511156127d757815f19048211156127bd576127bd6125a4565b808516156127ca57918102915b93841c93908002906127a2565b509250929050565b5f826127ed575060016102d4565b816127f957505f6102d4565b816001811461280f576002811461281957612835565b60019150506102d4565b60ff84111561282a5761282a6125a4565b50506001821b6102d4565b5060208310610133831016604e8410600b8410161715612858575081810a6102d4565b612862838361279d565b805f1904821115612875576128756125a4565b029392505050565b5f61127583836127df565b8181035f8312801583831316838312821617156128a7576128a76125a4565b5092915050565b5f826128bc576128bc61272f565b600160ff1b82145f19841416156128d5576128d56125a4565b500590565b8082018281125f8312801582168215821617156128f9576128f96125a4565b505092915050565b8082025f8212600160ff1b8414161561291c5761291c6125a4565b81810583148215176102d4576102d46125a456fea26469706673582212203ccd4a35386f7e621857328986ffd9e421258a15f9bd4cad5efa73430d11305064736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setEmailFromAddress(string)": {
        "params": {
          "_emailFromAddress": "The from email address for validated emails, MUST BE PROPERLY PADDED"
        }
      },
      "setTimestampBuffer(uint256)": {
        "params": {
          "_timestampBuffer": "The timestamp buffer for validated emails"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setEmailFromAddress(string)": {
        "notice": "ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not."
      },
      "setTimestampBuffer(uint256)": {
        "notice": "ONLY OWNER: Sets the timestamp buffer for validated emails. This is the amount of time in seconds that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2 timestamps."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6068,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "mailServerKeyHashAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKeyHashAdapterV2)6431"
      },
      {
        "astId": 6071,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "nullifierRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INullifierRegistry)6636"
      },
      {
        "astId": 6073,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 6075,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "timestampBuffer",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IKeyHashAdapterV2)6431": {
        "encoding": "inplace",
        "label": "contract IKeyHashAdapterV2",
        "numberOfBytes": "20"
      },
      "t_contract(INullifierRegistry)6636": {
        "encoding": "inplace",
        "label": "contract INullifierRegistry",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}