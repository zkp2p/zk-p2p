{
  "address": "0x90bB87c6258aD0D309D2f3a263d3Bc7B0B9F522D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "_hdfcMailserverKeyHashAdapter",
          "type": "address"
        },
        {
          "internalType": "contract INullifierRegistry",
          "name": "_nullifierRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestampBuffer",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PACK_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "isMailServerKeyHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailServerKeyHashAdapter",
      "outputs": [
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nullifierRegistry",
      "outputs": [
        {
          "internalType": "contract INullifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[5]",
              "name": "signals",
              "type": "uint256[5]"
            }
          ],
          "internalType": "struct IRegistrationProcessor.RegistrationProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "userIdHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "name": "setEmailFromAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "_mailServerKeyHashAdapter",
          "type": "address"
        }
      ],
      "name": "setMailserverKeyHashAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestampBuffer",
          "type": "uint256"
        }
      ],
      "name": "setTimestampBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[5]",
          "name": "_pubSignals",
          "type": "uint256[5]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x34f2d568435a197e7e31e7f113ba1497292375121afa05433c300e94dd4edfb1",
  "receipt": {
    "to": null,
    "from": "0xa0Ee7A142d267C1f36714E4a8F75612F20a79720",
    "contractAddress": "0x90bB87c6258aD0D309D2f3a263d3Bc7B0B9F522D",
    "transactionIndex": 0,
    "gasUsed": "1412369",
    "logsBloom": "0x
    "blockHash": "0xb80d8dbdf23cfc2b8cbdf9150aa64d53990383f13b4ab645e32dbdfc0bf59fe0",
    "transactionHash": "0x34f2d568435a197e7e31e7f113ba1497292375121afa05433c300e94dd4edfb1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 61370,
        "transactionHash": "0x34f2d568435a197e7e31e7f113ba1497292375121afa05433c300e94dd4edfb1",
        "address": "0x90bB87c6258aD0D309D2f3a263d3Bc7B0B9F522D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0ee7a142d267c1f36714e4a8f75612f20a79720"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb80d8dbdf23cfc2b8cbdf9150aa64d53990383f13b4ab645e32dbdfc0bf59fe0"
      }
    ],
    "blockNumber": 61370,
    "cumulativeGasUsed": "1412369",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb1527802E7800034D6887b0a99a5Ad2683184b95",
    "0x4C073a92B1C8Fb55313102Ab412fb7F1704bcBdD",
    "0x4d8E02BBfCf205828A8352Af4376b165E123D7b0",
    "alerts@hdfcbank.net",
    "0"
  ],
  "numDeployments": 1,
  "solcInputHash": "75b8f55da346d7ed99a350632554d2fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"_hdfcMailserverKeyHashAdapter\",\"type\":\"address\"},{\"internalType\":\"contract INullifierRegistry\",\"name\":\"_nullifierRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestampBuffer\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACK_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"isMailServerKeyHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailServerKeyHashAdapter\",\"outputs\":[{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nullifierRegistry\",\"outputs\":[{\"internalType\":\"contract INullifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"signals\",\"type\":\"uint256[5]\"}],\"internalType\":\"struct IRegistrationProcessor.RegistrationProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"userIdHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"name\":\"setEmailFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"_mailServerKeyHashAdapter\",\"type\":\"address\"}],\"name\":\"setMailserverKeyHashAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestampBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimestampBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_pubSignals\",\"type\":\"uint256[5]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setEmailFromAddress(string)\":{\"params\":{\"_emailFromAddress\":\"The from email address for validated emails, MUST BE PROPERLY PADDED\"}},\"setTimestampBuffer(uint256)\":{\"params\":{\"_timestampBuffer\":\"The timestamp buffer for validated emails\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setEmailFromAddress(string)\":{\"notice\":\"ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\"},\"setTimestampBuffer(uint256)\":{\"notice\":\"ONLY OWNER: Sets the timestamp buffer for validated emails. This is the amount of time in seconds that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2 timestamps.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ramps/hdfc/HDFCRegistrationProcessor.sol\":\"HDFCRegistrationProcessor\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zk-email/contracts/utils/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n// https://github.com/nalinbhardwaj/ethdosnumber/blob/main/ethdos-contracts/src/HexStrings.sol\\nlibrary StringUtils {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n    uint256 internal constant DEFAULT_PACK_SIZE = 31;\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes32 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function stringEq(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toString(bytes memory data) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    // 1 packed byte = packSize (usually 31) normal bytes, all in one 255/256-bit value\\n    // Note that this is not 32 due to the field modulus of circom\\n    function convertPackedByteToString(uint256 packedByte, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint256[] memory packedBytes = new uint256[](1);\\n        packedBytes[0] = packedByte;\\n        return convertPackedBytesToString(packedBytes, packSize, packSize);\\n    }\\n\\n    // Note: This convenience function removes the max string length check, which may cause misalignment with the circom\\n    // If using this, then the circom needs to rangecheck packed length in the circuit itself\\n    // This defaults to 31 bytes per packed byte\\n    function convertPackedBytesToString(uint256[] memory packedBytes) \\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        return convertPackedBytesToString(packedBytes, packedBytes.length * DEFAULT_PACK_SIZE, DEFAULT_PACK_SIZE);\\n    }\\n\\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\\n    // signals is the total number of signals (i.e. bytes) packed into the packedBytes. it defaults to packedBytes.length * packSize\\n    function convertPackedBytesToString(uint256[] memory packedBytes, uint256 signals, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint8 state = 0;\\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * packSize);\\n        uint256 nonzeroBytesArrayIndex = 0;\\n        for (uint16 i = 0; i < packedBytes.length; i++) {\\n            uint256 packedByte = packedBytes[i];\\n            uint8[] memory unpackedBytes = new uint8[](packSize);\\n            for (uint256 j = 0; j < packSize; j++) {\\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\\n            }\\n            for (uint256 j = 0; j < packSize; j++) {\\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\\n                if (unpackedByte != 0) {\\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\\n                    nonzeroBytesArrayIndex++;\\n                    if (state % 2 == 0) {\\n                        state += 1;\\n                    }\\n                } else {\\n                    if (state % 2 == 1) {\\n                        state += 1;\\n                    }\\n                }\\n                packedByte = packedByte >> 8;\\n            }\\n        }\\n        // TODO: You might want to assert that the state is exactly 1 or 2\\n        // If not, that means empty bytse have been removed from the middle and things have been concatenated.\\n        // We removed due to some tests failing, but this is not ideal and the require should be uncommented as soon as tests pass with it.\\n\\n        // require(state == 1 || state == 2, \\\"Invalid final state of packed bytes in email; more than two non-zero regions found!\\\");\\n        require(state >= 1, \\\"No packed bytes found! Invalid final state of packed bytes in email; value is likely 0!\\\");\\n        require(nonzeroBytesArrayIndex <= signals, \\\"Packed bytes more than allowed max number of signals!\\\");\\n        string memory returnValue = removeTrailingZeros(string(nonzeroBytesArray));\\n        return returnValue;\\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\\n    }\\n\\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\\n        uint256 i;\\n        for (i = 0; i < 32 && input[i] != 0; i++) {}\\n        bytes memory resultBytes = new bytes(i);\\n        for (i = 0; i < 32 && input[i] != 0; i++) {\\n            resultBytes[i] = input[i];\\n        }\\n        return string(resultBytes);\\n    }\\n\\n    // sliceArray is used to slice an array of uint256s from start-end into a new array of uint256s\\n    function sliceArray(uint256[] memory input, uint256 start, uint256 end) internal pure returns (uint256[] memory) {\\n        require(start <= end && end <= input.length, \\\"Invalid slice indices\\\");\\n        uint256[] memory result = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = input[i];\\n        }\\n        return result;\\n    }\\n\\n    // stringToUint is used to convert a string like \\\"45\\\" to a uint256 4\\n    function stringToUint(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            // TODO: Currently truncates decimals\\n            if (b[i] == 0x2E) {\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // getDomainFromEmail is used to extract the domain from an email i.e. the part after the @\\n    function getDomainFromEmail(string memory fromEmail) internal pure returns (string memory) {\\n        bytes memory emailBytes = bytes(fromEmail);\\n        uint256 atIndex;\\n        for (uint256 i = 0; i < emailBytes.length; i++) {\\n            if (emailBytes[i] == \\\"@\\\") {\\n                atIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory domainBytes = new bytes(emailBytes.length - atIndex - 1);\\n        for (uint256 j = 0; j < domainBytes.length; j++) {\\n            domainBytes[j] = emailBytes[atIndex + 1 + j];\\n        }\\n        return bytes32ToString(bytes32(bytes(domainBytes)));\\n    }\\n\\n    function removeTrailingZeros(string memory input) public pure returns (string memory) {\\n        bytes memory inputBytes = bytes(input);\\n        uint256 endIndex = inputBytes.length;\\n\\n        for (uint256 i = 0; i < inputBytes.length; i++) {\\n            if (inputBytes[i] == 0) {\\n                endIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory resultBytes = new bytes(endIndex);\\n        for (uint256 i = 0; i < endIndex; i++) {\\n            resultBytes[i] = inputBytes[i];\\n        }\\n\\n        return string(resultBytes);\\n    }\\n\\n    // Upper/lower string utils from https://github.com/willitscale/solidity-util/blob/master/lib/Strings.sol\\n    /**\\n     * Upper\\n     *\\n     * Converts all the values of a string to their corresponding upper case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to upper case\\n     * @return string\\n     */\\n    function upper(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _upper(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Converts all the values of a string to their corresponding lower case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to lower case\\n     * @return string\\n     */\\n    function lower(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _lower(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Upper\\n     *\\n     * Convert an alphabetic character to upper case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to upper case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a lower case otherwise returns the original value\\n     */\\n    function _upper(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\\n            return bytes1(uint8(_b1) - 32);\\n        }\\n\\n        return _b1;\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Convert an alphabetic character to lower case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to lower case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a upper case otherwise returns the original value\\n     */\\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\\n            return bytes1(uint8(_b1) + 32);\\n        }\\n\\n        return _b1;\\n    }\\n}\\n\",\"keccak256\":\"0x8c5b56494116a0c056c63e28fe892eea9bee5b056b09efa6aba1c9a82dc26c18\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessorV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapterV2 } from \\\"./keyHashAdapters/IKeyHashAdapterV2.sol\\\";\\nimport { INullifierRegistry } from \\\"./nullifierRegistries/INullifierRegistry.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessorV2 is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    IKeyHashAdapterV2 public mailServerKeyHashAdapter;\\n    INullifierRegistry public nullifierRegistry;\\n    bytes public emailFromAddress;\\n    uint256 public timestampBuffer;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapterV2 _mailServerKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress,\\n        uint256 _timestampBuffer\\n    )\\n        Ownable()\\n    {\\n        ramp = _ramp;\\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\\n        nullifierRegistry = _nullifierRegistry;\\n        emailFromAddress = bytes(_emailFromAddress);\\n        timestampBuffer = _timestampBuffer;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setMailserverKeyHashAdapter(IKeyHashAdapterV2 _mailServerKeyHashAdapter) external onlyOwner {\\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly\\n     * padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\\n     *\\n     * @param _emailFromAddress    The from email address for validated emails, MUST BE PROPERLY PADDED\\n     */\\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Sets the timestamp buffer for validated emails. This is the amount of time in seconds\\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2\\n     * timestamps.\\n     *\\n     * @param _timestampBuffer    The timestamp buffer for validated emails\\n     */\\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\\n        timestampBuffer = _timestampBuffer;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function getEmailFromAddress() external view returns (bytes memory) {\\n        return emailFromAddress;\\n    }\\n\\n    function isMailServerKeyHash(bytes32 _keyHash) public view returns (bool) {\\n        return IKeyHashAdapterV2(mailServerKeyHashAdapter).isMailServerKeyHash(_keyHash);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\\n        require(!nullifierRegistry.isNullified(_nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(_nullifier);\\n    }\\n}\\n\",\"keccak256\":\"0x207174fcbbfa8d2de65a5a5665f05e3f2d668f7df33b682a0f139c967dd3f6be\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapterV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapterV2 {\\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc849f2dc34e4463550b8e0a16541bde429cb1adf43776b2c4179e9d4e4e656a2\",\"license\":\"MIT\"},\"contracts/processors/nullifierRegistries/INullifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface INullifierRegistry {\\n    function addNullifier(bytes32 _nullifier) external;\\n    function isNullified(bytes32 _nullifier) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x107164bc9a320938b513305878163b7fa884da4cdae58d0c8e81bfbb00c97c5e\",\"license\":\"MIT\"},\"contracts/ramps/hdfc/HDFCRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { StringUtils } from \\\"@zk-email/contracts/utils/StringUtils.sol\\\";\\n\\nimport { BaseProcessorV2 } from \\\"../../processors/BaseProcessorV2.sol\\\";\\nimport { Groth16Verifier } from \\\"../../verifiers/hdfc_registration_verifier.sol\\\";\\nimport { IKeyHashAdapterV2 } from \\\"../../processors/keyHashAdapters/IKeyHashAdapterV2.sol\\\";\\nimport { INullifierRegistry } from \\\"../../processors/nullifierRegistries/INullifierRegistry.sol\\\";\\nimport { IRegistrationProcessor } from \\\"./interfaces/IRegistrationProcessor.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract HDFCRegistrationProcessor is Groth16Verifier, IRegistrationProcessor, BaseProcessorV2 {\\n\\n    using StringUtils for uint256[];\\n\\n    /* ============ Constants ============ */\\n    uint256 constant public PACK_SIZE = 7;\\n    \\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapterV2 _hdfcMailserverKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress,\\n        uint256 _timestampBuffer\\n    )\\n        Groth16Verifier()\\n        BaseProcessorV2(\\n            _ramp,\\n            _hdfcMailserverKeyHashAdapter,\\n            _nullifierRegistry,\\n            _emailFromAddress,\\n            _timestampBuffer\\n        )\\n    {}\\n\\n    /* ============ External Functions ============ */\\n\\n    function processProof(\\n        IRegistrationProcessor.RegistrationProof calldata _proof\\n    )\\n        public\\n        override\\n        onlyRamp\\n        returns(bytes32 userIdHash)\\n    {\\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        require(isMailServerKeyHash(bytes32(_proof.signals[0])), \\\"Invalid mailserver key hash\\\");\\n\\n        // Signals [1:4] are the packed from email address\\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \\\"Invalid email from address\\\");\\n\\n        _validateAndAddNullifier(keccak256(abi.encode(_proof)));\\n\\n        // Signals [4] is the packed userIdHash\\n        userIdHash = bytes32(_proof.signals[4]);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _parseSignalArray(uint256[5] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\\n        uint256[] memory signalArray = new uint256[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) {\\n            signalArray[i - _from] = _signals[i];\\n        }\\n\\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\\n    }\\n}\\n\",\"keccak256\":\"0x201e3eb65e17171b5359065b51e78356853be26e598180822ebb4305b0cc3884\",\"license\":\"MIT\"},\"contracts/ramps/hdfc/interfaces/IRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IRegistrationProcessor {\\n\\n    struct RegistrationProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[5] signals;\\n    }\\n\\n    function processProof(\\n        RegistrationProof calldata _proof\\n    )\\n        external\\n    returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6a89de57b7dfd51409bd06565af608c976dda3fc267d939df728b37d4c1f5006\",\"license\":\"MIT\"},\"contracts/verifiers/hdfc_registration_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 18941993809644597263122344954710203970320565994383305999328476744235410761420;\\n    uint256 constant deltax2 = 16269071872410952148518498647090098652233286976541031880547316776610079594158;\\n    uint256 constant deltay1 = 1550998249936592441357989923809006764271578090146442710328018508594456802732;\\n    uint256 constant deltay2 = 19185606473196777841488599791312660844041715603856581158138067158870364920677;\\n\\n\\n    uint256 constant IC0x = 18372946622689748518823039356212228839772233944452095064036571257568061521778;\\n    uint256 constant IC0y = 4090510570013847365600433655993260067276592374276000919765717308908464822251;\\n\\n    uint256 constant IC1x = 14530896712312421799791723884957588697322730616061235674192507548768166179620;\\n    uint256 constant IC1y = 13241452075905838374684838766757247775031921510259565862881370673172146127140;\\n\\n    uint256 constant IC2x = 14067991457947420245134633075363919619678925016010769439544345434672907387120;\\n    uint256 constant IC2y = 15075242420546569507483308905973479840611557062002193416356995522848676830458;\\n\\n    uint256 constant IC3x = 2268679644940985681075191131123258317084928252651134980820814399102444034331;\\n    uint256 constant IC3y = 610946500236913130324137013956528865009524976591765517218479867010763423535;\\n\\n    uint256 constant IC4x = 13966057128193603356523191212776509611934676597484902071144796821963056393663;\\n    uint256 constant IC4y = 10287649621411400155282198379447556062773569989590617756213092986925054733118;\\n\\n    uint256 constant IC5x = 16014135780036425835288045946537103382733734245255165282336104564746920453689;\\n    uint256 constant IC5y = 5690379499787398426952245667412062460369879600268772354791710800039878218708;\\n\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[5] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n\\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n\\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            checkField(calldataload(add(_pubSignals, 64)))\\n\\n            checkField(calldataload(add(_pubSignals, 96)))\\n\\n            checkField(calldataload(add(_pubSignals, 128)))\\n\\n            checkField(calldataload(add(_pubSignals, 160)))\\n\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\",\"keccak256\":\"0x2bc6b9f3db91263227b1e3a6b8fa9a965b9aa896bf3d12434766198a8b823e81\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801562000010575f80fd5b5060405162001c8838038062001c88833981016040819052620000339162000115565b848484848462000043336200009a565b6001600160a01b03858116608052600180546001600160a01b031990811687841617909155600280549091169185169190911790556003620000868382620002b6565b506004555062000382975050505050505050565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000fe575f80fd5b50565b634e487b7160e01b5f52604160045260245ffd5b5f805f805f60a086880312156200012a575f80fd5b85516200013781620000e9565b809550506020808701516200014c81620000e9565b60408801519095506200015f81620000e9565b60608801519094506001600160401b03808211156200017c575f80fd5b818901915089601f83011262000190575f80fd5b815181811115620001a557620001a562000101565b604051601f8201601f19908116603f01168101908382118183101715620001d057620001d062000101565b816040528281528c86848701011115620001e8575f80fd5b5f93505b828410156200020b5784840186015181850187015292850192620001ec565b5f868483010152809750505050505050608086015190509295509295909350565b600181811c908216806200024157607f821691505b6020821081036200026057634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620002b157805f5260205f20601f840160051c810160208510156200028d5750805b601f840160051c820191505b81811015620002ae575f815560010162000299565b50505b505050565b81516001600160401b03811115620002d257620002d262000101565b620002ea81620002e384546200022c565b8462000266565b602080601f83116001811462000320575f8415620003085750858301515b5f19600386901b1c1916600185901b1785556200037a565b5f85815260208120601f198616915b8281101562000350578886015182559484019460019091019084016200032f565b50858210156200036e57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b6080516118e6620003a25f395f8181610104015261026001526118e65ff3fe608060405234801561000f575f80fd5b50600436106100fb575f3560e01c8063b2a3fda411610093578063d0b71f9911610063578063d0b71f9914610212578063dbac582114610225578063f2fde38b1461022e578063f6c7226b14610241575f80fd5b8063b2a3fda4146101cf578063b870676c146101e2578063c0d05fed146101f5578063ced1e9781461020a575f80fd5b80633d0c9cc4116100ce5780633d0c9cc41461019a578063715018a6146101a25780638da5cb5b146101ac578063a8ef333f146101bc575f80fd5b806315d276e1146100ff57806317c8ecf21461014357806319d091521461016457806334baeab914610187575b5f80fd5b6101267f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610156610151366004611366565b610254565b60405190815260200161013a565b61017761017236600461137d565b6104b2565b604051901515815260200161013a565b6101776101953660046113a4565b610523565b610156600781565b6101aa610aea565b005b5f546001600160a01b0316610126565b600154610126906001600160a01b031681565b6101aa6101dd36600461137d565b610afd565b600254610126906001600160a01b031681565b6101fd610b0a565b60405161013a9190611427565b6101fd610b96565b6101aa61022036600461146d565b610c26565b61015660045481565b6101aa61023c36600461146d565b610c50565b6101aa61024f3660046114a3565b610cc6565b5f336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102d25760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b604080516334baeab960e01b815230916334baeab9916103059186919082019060c0830190610100840190600401611577565b602060405180830381865afa158015610320573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061034491906115a8565b6103805760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b60448201526064016102c9565b61038e6101008301356104b2565b6103da5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b65792068617368000000000060448201526064016102c9565b5f6103ec836101000160016004610cde565b905060036040516103fd919061160d565b604051809103902081604051602001610416919061167f565b60405160208183030381529060405280519060200120146104795760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d206164647265737300000000000060448201526064016102c9565b6104a88360405160200161048d919061169a565b60405160208183030381529060405280519060200120610dae565b5050610180013590565b600154604051630ce848a960e11b8152600481018390525f916001600160a01b0316906319d0915290602401602060405180830381865afa1580156104f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061051d91906115a8565b92915050565b5f610a7b565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610558575f805260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa91508161058b575f805260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa915050806105ba575f805260205ff35b5050505050565b7f289eb82230faad0c62fbd2f540384142221e6b43882036be535e03d4d49f7f7285527f090b259da85021f388985bd3de1665a5d035c5a770be66b75093da97e178d7eb60208601525f608086018661065d87357f1d466572d6fee03f19c311206ca5817e0088ca3817fae4f83ffc87f87c6d81247f202032329a66a39b16ab45b84d1a4c5fb030644957050a46b628de101ffb73248461055b565b6106ad60208801357f215448eb180d4812a749a8eb0085b5cc108dbaea6af4614ea38ca86ddd3adcfa7f1f1a33746fb5bb57c457768bab47b04fe76d00a7290a62f71344a8ed659f80f08461055b565b6106fd60408801357f0159c8912a08d29aa9af11e4daf0adbf26108fe74c45ff2d636ecc69d5437f2f7f050406f4edf6a26e9227eebdac7c9c6ef22a1275fc6bdbd59e3f5072dd62d91b8461055b565b61074d60608801357f16be9a7484c0895cd1cdb9526ccf2d6d1645e53f5cda64cfa00749884c58ab3e7f1ee0821a01e9f589b248ac2c66efa1961e7f82aad907d0d30b1fae4495d4adbf8461055b565b61079d60808801357f0c94a4026750622d8fcbe4f7a710552a26a1fdbddec11103d3eaf25f3e8253d47f2367adfd5521befb39f7482424f3ca32be5f36c7b79096f04cd51e5760b8e6398461055b565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f29e0c9df733e35f5a0f4a592c344dfa5669b61230266e156d86ac98bd3dfa6cc6102808201527f23f7f7e68d1d08a306a9752966290057d6167da414f3a75de9e253febc9e56ae6102a08201527f036dd57a7bd3ead51c3d0d5bd18cf6182b104511db118a576c0b7050a7c3b5ac6102c08201527f2a6aab1f59ba4c8b68d1835c9518fb5e30d07e1699f58ceec65b5bd38b461b656102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610a925f840135610529565b610a9f6020840135610529565b610aac6040840135610529565b610ab96060840135610529565b610ac66080840135610529565b610ad360a0840135610529565b610ae0818486888a6105c1565b9050805f5260205ff35b610af2610ebb565b610afb5f610f14565b565b610b05610ebb565b600455565b60038054610b17906115db565b80601f0160208091040260200160405190810160405280929190818152602001828054610b43906115db565b8015610b8e5780601f10610b6557610100808354040283529160200191610b8e565b820191905f5260205f20905b815481529060010190602001808311610b7157829003601f168201915b505050505081565b606060038054610ba5906115db565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd1906115db565b8015610c1c5780601f10610bf357610100808354040283529160200191610c1c565b820191905f5260205f20905b815481529060010190602001808311610bff57829003601f168201915b5050505050905090565b610c2e610ebb565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610c58610ebb565b6001600160a01b038116610cbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c9565b61055881610f14565b610cce610ebb565b6003610cda828261171b565b5050565b60605f610ceb84846117ef565b60ff1667ffffffffffffffff811115610d0657610d0661148f565b604051908082528060200260200182016040528015610d2f578160200160208202803683370190505b50905060ff84165b8360ff16811015610d8a57858160058110610d5457610d546115c7565b602002013582610d6760ff881684611808565b81518110610d7757610d776115c7565b6020908102919091010152600101610d37565b50610da560078251610d9c919061181b565b82906007610f63565b95945050505050565b60025460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa158015610df5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e1991906115a8565b15610e665760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e20757365640060448201526064016102c9565b600254604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df32906024015f604051808303815f87803b158015610ea9575f80fd5b505af11580156105ba573d5f803e3d5ffd5b5f546001600160a01b03163314610afb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c9565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60605f80838651610f74919061181b565b67ffffffffffffffff811115610f8c57610f8c61148f565b6040519080825280601f01601f191660200182016040528015610fb6576020820181803683370190505b5090505f805b87518161ffff161015611150575f888261ffff1681518110610fe057610fe06115c7565b602002602001015190505f8767ffffffffffffffff8111156110045761100461148f565b60405190808252806020026020018201604052801561102d578160200160208202803683370190505b5090505f5b888110156110745761104581600861181b565b83901c82828151811061105a5761105a6115c7565b60ff90921660209283029190910190910152600101611032565b505f5b8881101561113a575f828281518110611092576110926115c7565b602002602001015160ff169050805f14611107578060f81b8787815181106110bc576110bc6115c7565b60200101906001600160f81b03191690815f1a905350856110dc81611832565b96506110eb905060028961184a565b60ff165f03611102576110ff600189611877565b97505b61112a565b61111260028961184a565b60ff1660010361112a57611127600189611877565b97505b5060089290921c91600101611077565b505050808061114890611890565b915050610fbc565b5060018360ff1610156111f15760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a4016102c9565b8581111561125f5760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b60648201526084016102c9565b5f61126983611275565b98975050505050505050565b805160609082905f5b82518110156112be57828181518110611299576112996115c7565b01602001516001600160f81b0319165f036112b6578091506112be565b60010161127e565b505f8167ffffffffffffffff8111156112d9576112d961148f565b6040519080825280601f01601f191660200182016040528015611303576020820181803683370190505b5090505f5b8281101561135d57838181518110611322576113226115c7565b602001015160f81c60f81b82828151811061133f5761133f6115c7565b60200101906001600160f81b03191690815f1a905350600101611308565b50949350505050565b5f6101a08284031215611377575f80fd5b50919050565b5f6020828403121561138d575f80fd5b5035919050565b806040810183101561051d575f80fd5b5f805f806101a08086880312156113b9575f80fd5b6113c38787611394565b945060c08601878111156113d5575f80fd5b6040870194506113e58882611394565b9350508681870111156113f6575f80fd5b50929591945092610100019150565b5f5b8381101561141f578181015183820152602001611407565b50505f910152565b602081525f8251806020840152611445816040850160208701611405565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610558575f80fd5b5f6020828403121561147d575f80fd5b813561148881611459565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156114b3575f80fd5b813567ffffffffffffffff808211156114ca575f80fd5b818401915084601f8301126114dd575f80fd5b8135818111156114ef576114ef61148f565b604051601f8201601f19908116603f011681019083821181831017156115175761151761148f565b8160405282815287602084870101111561152f575f80fd5b826020860160208301375f928101602001929092525095945050505050565b805f5b600281101561157157604080838637938401939190910190600101611551565b50505050565b6101a08101604086833761158e604083018661154e565b60408460c084013760a08361010084013795945050505050565b5f602082840312156115b8575f80fd5b81518015158114611488575f80fd5b634e487b7160e01b5f52603260045260245ffd5b600181811c908216806115ef57607f821691505b60208210810361137757634e487b7160e01b5f52602260045260245ffd5b5f80835461161a816115db565b60018281168015611632576001811461164757611673565b60ff1984168752821515830287019450611673565b875f526020805f205f5b8581101561166a5781548a820152908401908201611651565b50505082870194505b50929695505050505050565b5f8251611690818460208701611405565b9190910192915050565b6101a0810160408383376116b4604083016040850161154e565b604060c0840160c084013761010060a0818501828501375092915050565b601f82111561171657805f5260205f20601f840160051c810160208510156116f75750805b601f840160051c820191505b818110156105ba575f8155600101611703565b505050565b815167ffffffffffffffff8111156117355761173561148f565b6117498161174384546115db565b846116d2565b602080601f83116001811461177c575f84156117655750858301515b5f19600386901b1c1916600185901b1785556117d3565b5f85815260208120601f198616915b828110156117aa5788860151825594840194600190910190840161178b565b50858210156117c757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b60ff828116828216039081111561051d5761051d6117db565b8181038181111561051d5761051d6117db565b808202811582820484141761051d5761051d6117db565b5f60018201611843576118436117db565b5060010190565b5f60ff83168061186857634e487b7160e01b5f52601260045260245ffd5b8060ff84160691505092915050565b60ff818116838216019081111561051d5761051d6117db565b5f61ffff8083168181036118a6576118a66117db565b600101939250505056fea264697066735822122023ab9679a00c4a132211b1ef35a1b0bd1334bd888bab5fa36c163f079878f2d964736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106100fb575f3560e01c8063b2a3fda411610093578063d0b71f9911610063578063d0b71f9914610212578063dbac582114610225578063f2fde38b1461022e578063f6c7226b14610241575f80fd5b8063b2a3fda4146101cf578063b870676c146101e2578063c0d05fed146101f5578063ced1e9781461020a575f80fd5b80633d0c9cc4116100ce5780633d0c9cc41461019a578063715018a6146101a25780638da5cb5b146101ac578063a8ef333f146101bc575f80fd5b806315d276e1146100ff57806317c8ecf21461014357806319d091521461016457806334baeab914610187575b5f80fd5b6101267f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610156610151366004611366565b610254565b60405190815260200161013a565b61017761017236600461137d565b6104b2565b604051901515815260200161013a565b6101776101953660046113a4565b610523565b610156600781565b6101aa610aea565b005b5f546001600160a01b0316610126565b600154610126906001600160a01b031681565b6101aa6101dd36600461137d565b610afd565b600254610126906001600160a01b031681565b6101fd610b0a565b60405161013a9190611427565b6101fd610b96565b6101aa61022036600461146d565b610c26565b61015660045481565b6101aa61023c36600461146d565b610c50565b6101aa61024f3660046114a3565b610cc6565b5f336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102d25760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b604080516334baeab960e01b815230916334baeab9916103059186919082019060c0830190610100840190600401611577565b602060405180830381865afa158015610320573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061034491906115a8565b6103805760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b60448201526064016102c9565b61038e6101008301356104b2565b6103da5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b65792068617368000000000060448201526064016102c9565b5f6103ec836101000160016004610cde565b905060036040516103fd919061160d565b604051809103902081604051602001610416919061167f565b60405160208183030381529060405280519060200120146104795760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d206164647265737300000000000060448201526064016102c9565b6104a88360405160200161048d919061169a565b60405160208183030381529060405280519060200120610dae565b5050610180013590565b600154604051630ce848a960e11b8152600481018390525f916001600160a01b0316906319d0915290602401602060405180830381865afa1580156104f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061051d91906115a8565b92915050565b5f610a7b565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610558575f805260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa91508161058b575f805260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa915050806105ba575f805260205ff35b5050505050565b7f289eb82230faad0c62fbd2f540384142221e6b43882036be535e03d4d49f7f7285527f090b259da85021f388985bd3de1665a5d035c5a770be66b75093da97e178d7eb60208601525f608086018661065d87357f1d466572d6fee03f19c311206ca5817e0088ca3817fae4f83ffc87f87c6d81247f202032329a66a39b16ab45b84d1a4c5fb030644957050a46b628de101ffb73248461055b565b6106ad60208801357f215448eb180d4812a749a8eb0085b5cc108dbaea6af4614ea38ca86ddd3adcfa7f1f1a33746fb5bb57c457768bab47b04fe76d00a7290a62f71344a8ed659f80f08461055b565b6106fd60408801357f0159c8912a08d29aa9af11e4daf0adbf26108fe74c45ff2d636ecc69d5437f2f7f050406f4edf6a26e9227eebdac7c9c6ef22a1275fc6bdbd59e3f5072dd62d91b8461055b565b61074d60608801357f16be9a7484c0895cd1cdb9526ccf2d6d1645e53f5cda64cfa00749884c58ab3e7f1ee0821a01e9f589b248ac2c66efa1961e7f82aad907d0d30b1fae4495d4adbf8461055b565b61079d60808801357f0c94a4026750622d8fcbe4f7a710552a26a1fdbddec11103d3eaf25f3e8253d47f2367adfd5521befb39f7482424f3ca32be5f36c7b79096f04cd51e5760b8e6398461055b565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f29e0c9df733e35f5a0f4a592c344dfa5669b61230266e156d86ac98bd3dfa6cc6102808201527f23f7f7e68d1d08a306a9752966290057d6167da414f3a75de9e253febc9e56ae6102a08201527f036dd57a7bd3ead51c3d0d5bd18cf6182b104511db118a576c0b7050a7c3b5ac6102c08201527f2a6aab1f59ba4c8b68d1835c9518fb5e30d07e1699f58ceec65b5bd38b461b656102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610a925f840135610529565b610a9f6020840135610529565b610aac6040840135610529565b610ab96060840135610529565b610ac66080840135610529565b610ad360a0840135610529565b610ae0818486888a6105c1565b9050805f5260205ff35b610af2610ebb565b610afb5f610f14565b565b610b05610ebb565b600455565b60038054610b17906115db565b80601f0160208091040260200160405190810160405280929190818152602001828054610b43906115db565b8015610b8e5780601f10610b6557610100808354040283529160200191610b8e565b820191905f5260205f20905b815481529060010190602001808311610b7157829003601f168201915b505050505081565b606060038054610ba5906115db565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd1906115db565b8015610c1c5780601f10610bf357610100808354040283529160200191610c1c565b820191905f5260205f20905b815481529060010190602001808311610bff57829003601f168201915b5050505050905090565b610c2e610ebb565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610c58610ebb565b6001600160a01b038116610cbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c9565b61055881610f14565b610cce610ebb565b6003610cda828261171b565b5050565b60605f610ceb84846117ef565b60ff1667ffffffffffffffff811115610d0657610d0661148f565b604051908082528060200260200182016040528015610d2f578160200160208202803683370190505b50905060ff84165b8360ff16811015610d8a57858160058110610d5457610d546115c7565b602002013582610d6760ff881684611808565b81518110610d7757610d776115c7565b6020908102919091010152600101610d37565b50610da560078251610d9c919061181b565b82906007610f63565b95945050505050565b60025460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa158015610df5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e1991906115a8565b15610e665760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e20757365640060448201526064016102c9565b600254604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df32906024015f604051808303815f87803b158015610ea9575f80fd5b505af11580156105ba573d5f803e3d5ffd5b5f546001600160a01b03163314610afb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c9565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60605f80838651610f74919061181b565b67ffffffffffffffff811115610f8c57610f8c61148f565b6040519080825280601f01601f191660200182016040528015610fb6576020820181803683370190505b5090505f805b87518161ffff161015611150575f888261ffff1681518110610fe057610fe06115c7565b602002602001015190505f8767ffffffffffffffff8111156110045761100461148f565b60405190808252806020026020018201604052801561102d578160200160208202803683370190505b5090505f5b888110156110745761104581600861181b565b83901c82828151811061105a5761105a6115c7565b60ff90921660209283029190910190910152600101611032565b505f5b8881101561113a575f828281518110611092576110926115c7565b602002602001015160ff169050805f14611107578060f81b8787815181106110bc576110bc6115c7565b60200101906001600160f81b03191690815f1a905350856110dc81611832565b96506110eb905060028961184a565b60ff165f03611102576110ff600189611877565b97505b61112a565b61111260028961184a565b60ff1660010361112a57611127600189611877565b97505b5060089290921c91600101611077565b505050808061114890611890565b915050610fbc565b5060018360ff1610156111f15760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a4016102c9565b8581111561125f5760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b60648201526084016102c9565b5f61126983611275565b98975050505050505050565b805160609082905f5b82518110156112be57828181518110611299576112996115c7565b01602001516001600160f81b0319165f036112b6578091506112be565b60010161127e565b505f8167ffffffffffffffff8111156112d9576112d961148f565b6040519080825280601f01601f191660200182016040528015611303576020820181803683370190505b5090505f5b8281101561135d57838181518110611322576113226115c7565b602001015160f81c60f81b82828151811061133f5761133f6115c7565b60200101906001600160f81b03191690815f1a905350600101611308565b50949350505050565b5f6101a08284031215611377575f80fd5b50919050565b5f6020828403121561138d575f80fd5b5035919050565b806040810183101561051d575f80fd5b5f805f806101a08086880312156113b9575f80fd5b6113c38787611394565b945060c08601878111156113d5575f80fd5b6040870194506113e58882611394565b9350508681870111156113f6575f80fd5b50929591945092610100019150565b5f5b8381101561141f578181015183820152602001611407565b50505f910152565b602081525f8251806020840152611445816040850160208701611405565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610558575f80fd5b5f6020828403121561147d575f80fd5b813561148881611459565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156114b3575f80fd5b813567ffffffffffffffff808211156114ca575f80fd5b818401915084601f8301126114dd575f80fd5b8135818111156114ef576114ef61148f565b604051601f8201601f19908116603f011681019083821181831017156115175761151761148f565b8160405282815287602084870101111561152f575f80fd5b826020860160208301375f928101602001929092525095945050505050565b805f5b600281101561157157604080838637938401939190910190600101611551565b50505050565b6101a08101604086833761158e604083018661154e565b60408460c084013760a08361010084013795945050505050565b5f602082840312156115b8575f80fd5b81518015158114611488575f80fd5b634e487b7160e01b5f52603260045260245ffd5b600181811c908216806115ef57607f821691505b60208210810361137757634e487b7160e01b5f52602260045260245ffd5b5f80835461161a816115db565b60018281168015611632576001811461164757611673565b60ff1984168752821515830287019450611673565b875f526020805f205f5b8581101561166a5781548a820152908401908201611651565b50505082870194505b50929695505050505050565b5f8251611690818460208701611405565b9190910192915050565b6101a0810160408383376116b4604083016040850161154e565b604060c0840160c084013761010060a0818501828501375092915050565b601f82111561171657805f5260205f20601f840160051c810160208510156116f75750805b601f840160051c820191505b818110156105ba575f8155600101611703565b505050565b815167ffffffffffffffff8111156117355761173561148f565b6117498161174384546115db565b846116d2565b602080601f83116001811461177c575f84156117655750858301515b5f19600386901b1c1916600185901b1785556117d3565b5f85815260208120601f198616915b828110156117aa5788860151825594840194600190910190840161178b565b50858210156117c757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b60ff828116828216039081111561051d5761051d6117db565b8181038181111561051d5761051d6117db565b808202811582820484141761051d5761051d6117db565b5f60018201611843576118436117db565b5060010190565b5f60ff83168061186857634e487b7160e01b5f52601260045260245ffd5b8060ff84160691505092915050565b60ff818116838216019081111561051d5761051d6117db565b5f61ffff8083168181036118a6576118a66117db565b600101939250505056fea264697066735822122023ab9679a00c4a132211b1ef35a1b0bd1334bd888bab5fa36c163f079878f2d964736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setEmailFromAddress(string)": {
        "params": {
          "_emailFromAddress": "The from email address for validated emails, MUST BE PROPERLY PADDED"
        }
      },
      "setTimestampBuffer(uint256)": {
        "params": {
          "_timestampBuffer": "The timestamp buffer for validated emails"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setEmailFromAddress(string)": {
        "notice": "ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not."
      },
      "setTimestampBuffer(uint256)": {
        "notice": "ONLY OWNER: Sets the timestamp buffer for validated emails. This is the amount of time in seconds that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2 timestamps."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ramps/hdfc/HDFCRegistrationProcessor.sol:HDFCRegistrationProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6068,
        "contract": "contracts/ramps/hdfc/HDFCRegistrationProcessor.sol:HDFCRegistrationProcessor",
        "label": "mailServerKeyHashAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKeyHashAdapterV2)6431"
      },
      {
        "astId": 6071,
        "contract": "contracts/ramps/hdfc/HDFCRegistrationProcessor.sol:HDFCRegistrationProcessor",
        "label": "nullifierRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INullifierRegistry)6636"
      },
      {
        "astId": 6073,
        "contract": "contracts/ramps/hdfc/HDFCRegistrationProcessor.sol:HDFCRegistrationProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 6075,
        "contract": "contracts/ramps/hdfc/HDFCRegistrationProcessor.sol:HDFCRegistrationProcessor",
        "label": "timestampBuffer",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IKeyHashAdapterV2)6431": {
        "encoding": "inplace",
        "label": "contract IKeyHashAdapterV2",
        "numberOfBytes": "20"
      },
      "t_contract(INullifierRegistry)6636": {
        "encoding": "inplace",
        "label": "contract INullifierRegistry",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}