{
  "address": "0x8D54b20922aEA549224D61501225a0DaB5bC3839",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "_hdfcMailserverKeyHashAdapter",
          "type": "address"
        },
        {
          "internalType": "contract INullifierRegistry",
          "name": "_nullifierRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "isMailServerKeyHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailServerKeyHashAdapter",
      "outputs": [
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nullifierRegistry",
      "outputs": [
        {
          "internalType": "contract INullifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[15]",
              "name": "signals",
              "type": "uint256[15]"
            }
          ],
          "internalType": "struct IHDFCSendProcessor.SendProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "offRamperIdHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "onRamperIdHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "name": "setEmailFromAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeyHashAdapterV2",
          "name": "_mailServerKeyHashAdapter",
          "type": "address"
        }
      ],
      "name": "setMailserverKeyHashAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[15]",
          "name": "_pubSignals",
          "type": "uint256[15]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa99bdfd74f1fe1fee99948d59256f05a37d0f03ee6e773a144cb358720f18f6a",
  "receipt": {
    "to": null,
    "from": "0x4e39cF8578698131c57404e8bc3eEC820EDa51d8",
    "contractAddress": "0x8D54b20922aEA549224D61501225a0DaB5bC3839",
    "transactionIndex": 36,
    "gasUsed": "2404192",
    "logsBloom": "0x
    "blockHash": "0xa227cb4c4108d1ad7d7016c8d6180fa8bee8838a696e96a84b189eecea008a73",
    "transactionHash": "0xa99bdfd74f1fe1fee99948d59256f05a37d0f03ee6e773a144cb358720f18f6a",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 5081900,
        "transactionHash": "0xa99bdfd74f1fe1fee99948d59256f05a37d0f03ee6e773a144cb358720f18f6a",
        "address": "0x8D54b20922aEA549224D61501225a0DaB5bC3839",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e39cf8578698131c57404e8bc3eec820eda51d8"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0xa227cb4c4108d1ad7d7016c8d6180fa8bee8838a696e96a84b189eecea008a73"
      }
    ],
    "blockNumber": 5081900,
    "cumulativeGasUsed": "5736763",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb4A7486b0EFa264D5FC6A8181bfc7A150cD57849",
    "0x1A2dcc7AfC7Bf09bE718E54466aA18166C00E4FD",
    "0xAf0196f22a1383B779E3f833AD35BFf38722c8AD",
    "alerts@hdfcbank.net"
  ],
  "numDeployments": 1,
  "solcInputHash": "c76db42e3552a72f819af71bb2be52ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"_hdfcMailserverKeyHashAdapter\",\"type\":\"address\"},{\"internalType\":\"contract INullifierRegistry\",\"name\":\"_nullifierRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"isMailServerKeyHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailServerKeyHashAdapter\",\"outputs\":[{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nullifierRegistry\",\"outputs\":[{\"internalType\":\"contract INullifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[15]\",\"name\":\"signals\",\"type\":\"uint256[15]\"}],\"internalType\":\"struct IHDFCSendProcessor.SendProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offRamperIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"onRamperIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"name\":\"setEmailFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeyHashAdapterV2\",\"name\":\"_mailServerKeyHashAdapter\",\"type\":\"address\"}],\"name\":\"setMailserverKeyHashAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[15]\",\"name\":\"_pubSignals\",\"type\":\"uint256[15]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setEmailFromAddress(string)\":{\"params\":{\"_emailFromAddress\":\"The from email address for validated emails, MUST BE PROPERLY PADDED\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setEmailFromAddress(string)\":{\"notice\":\"ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ramps/hdfc/HDFCSendProcessor.sol\":\"HDFCSendProcessor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zk-email/contracts/utils/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n// https://github.com/nalinbhardwaj/ethdosnumber/blob/main/ethdos-contracts/src/HexStrings.sol\\nlibrary StringUtils {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n    uint256 internal constant DEFAULT_PACK_SIZE = 31;\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes32 value) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function stringEq(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toString(bytes memory data) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    // 1 packed byte = packSize (usually 31) normal bytes, all in one 255/256-bit value\\n    // Note that this is not 32 due to the field modulus of circom\\n    function convertPackedByteToString(uint256 packedByte, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint256[] memory packedBytes = new uint256[](1);\\n        packedBytes[0] = packedByte;\\n        return convertPackedBytesToString(packedBytes, packSize, packSize);\\n    }\\n\\n    // Note: This convenience function removes the max string length check, which may cause misalignment with the circom\\n    // If using this, then the circom needs to rangecheck packed length in the circuit itself\\n    // This defaults to 31 bytes per packed byte\\n    function convertPackedBytesToString(uint256[] memory packedBytes) \\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        return convertPackedBytesToString(packedBytes, packedBytes.length * DEFAULT_PACK_SIZE, DEFAULT_PACK_SIZE);\\n    }\\n\\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\\n    // signals is the total number of signals (i.e. bytes) packed into the packedBytes. it defaults to packedBytes.length * packSize\\n    function convertPackedBytesToString(uint256[] memory packedBytes, uint256 signals, uint256 packSize)\\n        internal\\n        pure\\n        returns (string memory extractedString)\\n    {\\n        uint8 state = 0;\\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * packSize);\\n        uint256 nonzeroBytesArrayIndex = 0;\\n        for (uint16 i = 0; i < packedBytes.length; i++) {\\n            uint256 packedByte = packedBytes[i];\\n            uint8[] memory unpackedBytes = new uint8[](packSize);\\n            for (uint256 j = 0; j < packSize; j++) {\\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\\n            }\\n            for (uint256 j = 0; j < packSize; j++) {\\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\\n                if (unpackedByte != 0) {\\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\\n                    nonzeroBytesArrayIndex++;\\n                    if (state % 2 == 0) {\\n                        state += 1;\\n                    }\\n                } else {\\n                    if (state % 2 == 1) {\\n                        state += 1;\\n                    }\\n                }\\n                packedByte = packedByte >> 8;\\n            }\\n        }\\n        // TODO: You might want to assert that the state is exactly 1 or 2\\n        // If not, that means empty bytse have been removed from the middle and things have been concatenated.\\n        // We removed due to some tests failing, but this is not ideal and the require should be uncommented as soon as tests pass with it.\\n\\n        // require(state == 1 || state == 2, \\\"Invalid final state of packed bytes in email; more than two non-zero regions found!\\\");\\n        require(state >= 1, \\\"No packed bytes found! Invalid final state of packed bytes in email; value is likely 0!\\\");\\n        require(nonzeroBytesArrayIndex <= signals, \\\"Packed bytes more than allowed max number of signals!\\\");\\n        string memory returnValue = removeTrailingZeros(string(nonzeroBytesArray));\\n        return returnValue;\\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\\n    }\\n\\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\\n        uint256 i;\\n        for (i = 0; i < 32 && input[i] != 0; i++) {}\\n        bytes memory resultBytes = new bytes(i);\\n        for (i = 0; i < 32 && input[i] != 0; i++) {\\n            resultBytes[i] = input[i];\\n        }\\n        return string(resultBytes);\\n    }\\n\\n    // sliceArray is used to slice an array of uint256s from start-end into a new array of uint256s\\n    function sliceArray(uint256[] memory input, uint256 start, uint256 end) internal pure returns (uint256[] memory) {\\n        require(start <= end && end <= input.length, \\\"Invalid slice indices\\\");\\n        uint256[] memory result = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = input[i];\\n        }\\n        return result;\\n    }\\n\\n    // stringToUint is used to convert a string like \\\"45\\\" to a uint256 4\\n    function stringToUint(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            // TODO: Currently truncates decimals\\n            if (b[i] == 0x2E) {\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // getDomainFromEmail is used to extract the domain from an email i.e. the part after the @\\n    function getDomainFromEmail(string memory fromEmail) internal pure returns (string memory) {\\n        bytes memory emailBytes = bytes(fromEmail);\\n        uint256 atIndex;\\n        for (uint256 i = 0; i < emailBytes.length; i++) {\\n            if (emailBytes[i] == \\\"@\\\") {\\n                atIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory domainBytes = new bytes(emailBytes.length - atIndex - 1);\\n        for (uint256 j = 0; j < domainBytes.length; j++) {\\n            domainBytes[j] = emailBytes[atIndex + 1 + j];\\n        }\\n        return bytes32ToString(bytes32(bytes(domainBytes)));\\n    }\\n\\n    function removeTrailingZeros(string memory input) public pure returns (string memory) {\\n        bytes memory inputBytes = bytes(input);\\n        uint256 endIndex = inputBytes.length;\\n\\n        for (uint256 i = 0; i < inputBytes.length; i++) {\\n            if (inputBytes[i] == 0) {\\n                endIndex = i;\\n                break;\\n            }\\n        }\\n\\n        bytes memory resultBytes = new bytes(endIndex);\\n        for (uint256 i = 0; i < endIndex; i++) {\\n            resultBytes[i] = inputBytes[i];\\n        }\\n\\n        return string(resultBytes);\\n    }\\n\\n    // Upper/lower string utils from https://github.com/willitscale/solidity-util/blob/master/lib/Strings.sol\\n    /**\\n     * Upper\\n     *\\n     * Converts all the values of a string to their corresponding upper case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to upper case\\n     * @return string\\n     */\\n    function upper(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _upper(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Converts all the values of a string to their corresponding lower case\\n     * value.\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string base to convert to lower case\\n     * @return string\\n     */\\n    function lower(string memory _base) public pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _lower(_baseBytes[i]);\\n        }\\n        return string(_baseBytes);\\n    }\\n\\n    /**\\n     * Upper\\n     *\\n     * Convert an alphabetic character to upper case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to upper case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a lower case otherwise returns the original value\\n     */\\n    function _upper(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\\n            return bytes1(uint8(_b1) - 32);\\n        }\\n\\n        return _b1;\\n    }\\n\\n    /**\\n     * Lower\\n     *\\n     * Convert an alphabetic character to lower case and return the original\\n     * value when not alphabetic\\n     *\\n     * @param _b1 The byte to be converted to lower case\\n     * @return bytes1 The converted value if the passed value was alphabetic\\n     *                and in a upper case otherwise returns the original value\\n     */\\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\\n            return bytes1(uint8(_b1) + 32);\\n        }\\n\\n        return _b1;\\n    }\\n}\\n\",\"keccak256\":\"0x8c5b56494116a0c056c63e28fe892eea9bee5b056b09efa6aba1c9a82dc26c18\",\"license\":\"MIT\"},\"contracts/external/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n//\\n// NOTE: This library has been pruned to keep only functions needed by zkp2p\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    )\\n        internal\\n        pure\\n        returns (uint256 timestamp)\\n    {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\\n            + minute * SECONDS_PER_MINUTE + second;\\n    }\\n}\\n\",\"keccak256\":\"0x64f6113ad342f8bd3c2eb74fde279401d604faf77dd08f6c16c3912c3519f170\",\"license\":\"MIT\"},\"contracts/lib/StringConversionUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\\n// converting from string to Uint\\nlibrary StringConversionUtils {\\n    \\n    /**\\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\\n     * the returned number has multiple floating points then the function will revert.\\n     *\\n     * Examples: _s = \\\"12.34\\\", _expectedDecimals = 6 => 12340000\\n     *           _s = \\\"12.34\\\", _expectedDecimals = 2 => 1234\\n     *           _s = \\\"12.34\\\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\\n     *           _s = \\\"12.34.56\\\", _expectedDecimals = 6 => REVERT (Invalid number)\\n     *\\n     * @param _s                    String being processed\\n     * @param _desiredDecimals      Desired amount of decimal places\\n     */\\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\\n        bytes memory b = bytes(_s);\\n\\n        uint256 result = 0;\\n        uint256 decimalPlaces = 0;\\n\\n        bool decimals = false;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            if (decimals) {\\n                decimalPlaces++;\\n            }\\n\\n            if (b[i] == 0x2E) {\\n                require(decimals == false, \\\"String has multiple decimals\\\");\\n                decimals = true;\\n            }\\n        }\\n\\n        require(decimalPlaces <= _desiredDecimals, \\\"String has too many decimal places\\\");\\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\\n    }\\n\\n    /**\\n     * @notice Function that returns a substring from _startIndex to _endIndex (non-inclusive).\\n     *\\n     * @param _str           String being processed\\n     * @param _startIndex    Index to start parsing from\\n     * @param _endIndex      Index to stop parsing at (index not included in result)\\n     */\\n    function substring(string memory _str, uint _startIndex, uint _endIndex) internal pure returns (string memory ) {\\n        bytes memory strBytes = bytes(_str);\\n        bytes memory result = new bytes(_endIndex-_startIndex);\\n        for(uint i = _startIndex; i < _endIndex; i++) {\\n            result[i-_startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xa90dee5481e04437ab9ff0dac63fa4023a6505f184b01926f48a2d3c9cce7381\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessorV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapterV2 } from \\\"./keyHashAdapters/IKeyHashAdapterV2.sol\\\";\\nimport { INullifierRegistry } from \\\"./nullifierRegistries/INullifierRegistry.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessorV2 is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    IKeyHashAdapterV2 public mailServerKeyHashAdapter;\\n    INullifierRegistry public nullifierRegistry;\\n    bytes public emailFromAddress;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapterV2 _mailServerKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress\\n    )\\n        Ownable()\\n    {\\n        ramp = _ramp;\\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\\n        nullifierRegistry = _nullifierRegistry;\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setMailserverKeyHashAdapter(IKeyHashAdapterV2 _mailServerKeyHashAdapter) external onlyOwner {\\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly\\n     * padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\\n     *\\n     * @param _emailFromAddress    The from email address for validated emails, MUST BE PROPERLY PADDED\\n     */\\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function getEmailFromAddress() external view returns (bytes memory) {\\n        return emailFromAddress;\\n    }\\n\\n    function isMailServerKeyHash(bytes32 _keyHash) public view returns (bool) {\\n        return IKeyHashAdapterV2(mailServerKeyHashAdapter).isMailServerKeyHash(_keyHash);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\\n        require(!nullifierRegistry.isNullified(_nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(_nullifier);\\n    }\\n}\\n\",\"keccak256\":\"0x85ec4f2b6130ed9f6c91e6a5874ba0a3df09992147056c2010a88fd7be519c82\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapterV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapterV2 {\\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc849f2dc34e4463550b8e0a16541bde429cb1adf43776b2c4179e9d4e4e656a2\",\"license\":\"MIT\"},\"contracts/processors/nullifierRegistries/INullifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface INullifierRegistry {\\n    function addNullifier(bytes32 _nullifier) external;\\n    function isNullified(bytes32 _nullifier) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x107164bc9a320938b513305878163b7fa884da4cdae58d0c8e81bfbb00c97c5e\",\"license\":\"MIT\"},\"contracts/ramps/hdfc/HDFCSendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { StringUtils } from \\\"@zk-email/contracts/utils/StringUtils.sol\\\";\\n\\nimport { DateTime } from \\\"../../external/DateTime.sol\\\";\\n\\nimport { BaseProcessorV2 } from \\\"../../processors/BaseProcessorV2.sol\\\";\\nimport { Groth16Verifier } from \\\"../../verifiers/hdfc_send_verifier.sol\\\";\\nimport { IKeyHashAdapterV2 } from \\\"../../processors/keyHashAdapters/IKeyHashAdapterV2.sol\\\";\\nimport { INullifierRegistry } from \\\"../../processors/nullifierRegistries/INullifierRegistry.sol\\\";\\nimport { IHDFCSendProcessor } from \\\"./interfaces/IHDFCSendProcessor.sol\\\";\\nimport { StringConversionUtils } from \\\"../../lib/StringConversionUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract HDFCSendProcessor is Groth16Verifier, IHDFCSendProcessor, BaseProcessorV2 {\\n    \\n    using StringUtils for uint256[];\\n    using StringConversionUtils for string;\\n\\n    /* ============ Constants ============ */\\n    uint256 constant PACK_SIZE = 7;\\n    uint256 constant IST_OFFSET = 19800;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapterV2 _hdfcMailserverKeyHashAdapter,\\n        INullifierRegistry _nullifierRegistry,\\n        string memory _emailFromAddress\\n    )\\n        Groth16Verifier()\\n        BaseProcessorV2(_ramp, _hdfcMailserverKeyHashAdapter, _nullifierRegistry, _emailFromAddress)\\n    {}\\n    \\n    /* ============ External Functions ============ */\\n    function processProof(\\n        IHDFCSendProcessor.SendProof calldata _proof\\n    )\\n        public\\n        override\\n        onlyRamp\\n        returns(\\n            uint256 amount,\\n            uint256 timestamp,\\n            bytes32 offRamperIdHash,\\n            bytes32 onRamperIdHash,\\n            bytes32 intentHash\\n        )\\n    {\\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        require(isMailServerKeyHash(bytes32(_proof.signals[0])), \\\"Invalid mailserver key hash\\\");\\n\\n        // Signals [1:4] are the packed from email address\\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \\\"Invalid email from address\\\");\\n\\n        // Signals [4:6] is the packed amount, since this is a USDC amount we want to make sure the returned number is\\n        // properly padded to 6 decimals. If the parsed has more than 6 figures to the right of the decimal it will revert\\n        amount = _parseSignalArray(_proof.signals, 4, 6).stringToUint(6);\\n\\n        // Signals [6:11] are the packed timestamp, the timestamp is returned as a string in the format, that we need to\\n        // parse and convert to a unix timestamp\\n        string memory rawTimestamp = _parseSignalArray(_proof.signals, 6, 11);\\n        timestamp = _dateStringToTimestamp(rawTimestamp);\\n\\n        // Signals [11] is the packed onRamperIdHash\\n        onRamperIdHash = bytes32(_proof.signals[11]);\\n\\n        // Signals [12] is the packed offRamper UPI ID hash\\n        offRamperIdHash = bytes32(_proof.signals[12]);\\n\\n        // Check if email has been used previously, if not nullify it so it can't be used again\\n        _validateAndAddNullifier(bytes32(_proof.signals[13]));\\n\\n        // Signals [14] is intentHash\\n        intentHash = bytes32(_proof.signals[14]);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _parseSignalArray(uint256[15] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\\n        uint256[] memory signalArray = new uint256[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) {\\n            signalArray[i - _from] = _signals[i];\\n        }\\n\\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\\n    }\\n\\n    /**\\n     * @notice Iterates through every character in the date string and splits the string at each space or colon. Function will revert\\n     * if there are not 8 substrings formed from the split. The substrings are then converted to uints and passed to the DateTime lib\\n     * to get the unix timestamp. This function is specific to the date format used by HDFC, not suitable for use with other date formats.\\n     */\\n    function _dateStringToTimestamp(string memory _dateString) internal pure returns (uint256) {\\n        string[8] memory extractedStrings;\\n        uint256 breakCounter;\\n        uint256 lastBreak;\\n        for (uint256 i = 0; i < bytes(_dateString).length; i++) {\\n            if (bytes(_dateString)[i] == 0x20 || bytes(_dateString)[i] == 0x3a) {\\n                extractedStrings[breakCounter] = _dateString.substring(lastBreak, i);\\n                lastBreak = i + 1;\\n                breakCounter++;\\n            }\\n        }\\n        // Check that exactly 8 substrings were found (string is split at 7 different places)\\n        require(breakCounter == 7, \\\"Invalid date string\\\");\\n\\n        return DateTime.timestampFromDateTime(\\n            extractedStrings[3].stringToUint(0), // year\\n            _parseMonth(extractedStrings[2]), // month\\n            extractedStrings[1].stringToUint(0), // day\\n            extractedStrings[4].stringToUint(0), // hour\\n            extractedStrings[5].stringToUint(0), // minute\\n            extractedStrings[6].stringToUint(0) // second\\n        ) - IST_OFFSET;\\n    }\\n\\n    function _parseMonth(string memory _month) internal pure returns (uint256) {\\n        if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Jan\\\")) {\\n            return 1;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Feb\\\")) {\\n            return 2;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Mar\\\")) {\\n            return 3;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Apr\\\")) {\\n            return 4;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"May\\\")) {\\n            return 5;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Jun\\\")) {\\n            return 6;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Jul\\\")) {\\n            return 7;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Aug\\\")) {\\n            return 8;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Sep\\\")) {\\n            return 9;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Oct\\\")) {\\n            return 10;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Nov\\\")) {\\n            return 11;\\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\\\"Dec\\\")) {\\n            return 12;\\n        } else {\\n            revert(\\\"Invalid month\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7740139160ec0e7b981af85a66b0ceeb1f0a46b1b1c7461af9ba2452901533b2\",\"license\":\"MIT\"},\"contracts/ramps/hdfc/interfaces/IHDFCSendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IHDFCSendProcessor {\\n\\n    struct SendProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[15] signals;\\n    }\\n\\n    function processProof(\\n        SendProof calldata _proof\\n    )\\n        external\\n    returns(uint256, uint256, bytes32, bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0xe022a0768bd0928ca85ebcfc7541907038fc0b786572701c5a37b97ec6040847\",\"license\":\"MIT\"},\"contracts/verifiers/hdfc_send_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 13715093910953477444594932613394637161592645326267490952383773258932680530785;\\n    uint256 constant deltax2 = 6917355939685380899148753334446963866296679557559265300195124805902372568736;\\n    uint256 constant deltay1 = 10027537635408556375640886021174498274338207339803607940642263434646237658144;\\n    uint256 constant deltay2 = 19825314797083105356154821733414236732602675829642895849779157432388025780748;\\n\\n    \\n    uint256 constant IC0x = 7948712917874849781328365661027367011398916994267746344840851439625837578323;\\n    uint256 constant IC0y = 14445610336427827969214783890094209349619216720637343095223018572693254280923;\\n    \\n    uint256 constant IC1x = 3654976868371838169631577898462947005550108125685649400186026683210975806547;\\n    uint256 constant IC1y = 7383470632301847779131345725687431208414525939319998905342796582584383932784;\\n    \\n    uint256 constant IC2x = 15960136517117002583905099076229506420678130465330836605642076667698312488907;\\n    uint256 constant IC2y = 10981003641590459938830276725941498612829685925850889415515039958666798745545;\\n    \\n    uint256 constant IC3x = 18064147597098347735634254758923927729758051955626895483758091493962336324910;\\n    uint256 constant IC3y = 14561976814062079545004557051651175882415454473414826337411715544694691078488;\\n    \\n    uint256 constant IC4x = 5479872440797886105045613557892343574379959348291323344571145668056905130790;\\n    uint256 constant IC4y = 19816668883377774512316396795679515122358992446677555233530823190449668202575;\\n    \\n    uint256 constant IC5x = 9764995418164291848924916053122788044578670279004409359935206951759326535751;\\n    uint256 constant IC5y = 11151240738595525109186562114546767429226785384258075837825604200334229399893;\\n    \\n    uint256 constant IC6x = 8592289604370662283816667811371636409851377122184258261984779162566069289701;\\n    uint256 constant IC6y = 14924863702174947616504138427154175911132478861008643941575632275190130139352;\\n    \\n    uint256 constant IC7x = 18144310048336844926716356091507529474953804436633311455291234260603469939801;\\n    uint256 constant IC7y = 20695654519010539727518673528536864282905304035588394263484365314168181698771;\\n    \\n    uint256 constant IC8x = 6502380984206062082509747555585722773109086149921002084837192664976139632635;\\n    uint256 constant IC8y = 20559694265554344023542679863623632229239552087994730960172389697388976005511;\\n    \\n    uint256 constant IC9x = 20112907151747105787761530796573701791334087761671369712034010592321424588594;\\n    uint256 constant IC9y = 7868275330531868976088552522626764067554872392097431803379373791917043873429;\\n    \\n    uint256 constant IC10x = 21738568466342470712305504479308744377477421607586657477021567762815751353985;\\n    uint256 constant IC10y = 15899136431442502164449286654852349998271141738582178828650897248716421930967;\\n    \\n    uint256 constant IC11x = 8797574036872579022038442307145559829777119719185174358600414786794648200526;\\n    uint256 constant IC11y = 19158045316273481821441527564745598208594831388291307046183673615092116714767;\\n    \\n    uint256 constant IC12x = 1856159710792583584076099033562199824825551035760525968182870506068750338922;\\n    uint256 constant IC12y = 5431689035393664841658365783566955093050903672278814147361678362199701787106;\\n    \\n    uint256 constant IC13x = 1326184215165888620491943578175089960460457074386949049899809721605475868360;\\n    uint256 constant IC13y = 19798068085286831236096103256261325470985925228876029833389405086405680467005;\\n    \\n    uint256 constant IC14x = 21303925226345182261601479972988106925149727015068245014063996271014722518363;\\n    uint256 constant IC14y = 13822581075918761258491041321378418848172590182506086615070972333032971332948;\\n    \\n    uint256 constant IC15x = 7601301681882298785665130103217482061846330487834337423048688553591898089998;\\n    uint256 constant IC15y = 16353595650180105876268966027044363473882857313997670459546834066677499432092;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[15] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                \\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                \\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                \\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                \\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n                \\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\\n                \\n                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\\n                \\n                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))\\n                \\n                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))\\n                \\n                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))\\n                \\n                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n            checkField(calldataload(add(_pubSignals, 160)))\\n            \\n            checkField(calldataload(add(_pubSignals, 192)))\\n            \\n            checkField(calldataload(add(_pubSignals, 224)))\\n            \\n            checkField(calldataload(add(_pubSignals, 256)))\\n            \\n            checkField(calldataload(add(_pubSignals, 288)))\\n            \\n            checkField(calldataload(add(_pubSignals, 320)))\\n            \\n            checkField(calldataload(add(_pubSignals, 352)))\\n            \\n            checkField(calldataload(add(_pubSignals, 384)))\\n            \\n            checkField(calldataload(add(_pubSignals, 416)))\\n            \\n            checkField(calldataload(add(_pubSignals, 448)))\\n            \\n            checkField(calldataload(add(_pubSignals, 480)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0xef37ff5b88371040ce3fb287d517fb2b55b9fba76a4034af73f78000b90116fc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002c3d38038062002c3d833981016040819052620000349162000114565b83838383620000433362000095565b6001600160a01b03848116608052600180546001600160a01b031990811686841617909155600280549091169184169190911790556003620000868282620002b9565b50505050505050505062000385565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000fb57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200012b57600080fd5b84516200013881620000e5565b809450506020808601516200014d81620000e5565b60408701519094506200016081620000e5565b60608701519093506001600160401b03808211156200017e57600080fd5b818801915088601f8301126200019357600080fd5b815181811115620001a857620001a8620000fe565b604051601f8201601f19908116603f01168101908382118183101715620001d357620001d3620000fe565b816040528281528b86848701011115620001ec57600080fd5b600093505b82841015620002105784840186015181850187015292850192620001f1565b600086848301015280965050505050505092959194509250565b600181811c908216806200023f57607f821691505b6020821081036200026057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002b457600081815260208120601f850160051c810160208610156200028f5750805b601f850160051c820191505b81811015620002b0578281556001016200029b565b5050505b505050565b81516001600160401b03811115620002d557620002d5620000fe565b620002ed81620002e684546200022a565b8462000266565b602080601f8311600181146200032557600084156200030c5750858301515b600019600386901b1c1916600185901b178555620002b0565b600085815260208120601f198616915b82811015620003565788860151825594840194600190910190840162000335565b5085821015620003755787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051612896620003a76000396000818160d901526102b901526128966000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063bf93fde11161008c578063d0b71f9911610066578063d0b71f99146101d4578063f054a9a3146101e7578063f2fde38b146101fa578063f6c7226b1461020d57600080fd5b8063bf93fde11461017c578063c0d05fed146101b7578063ced1e978146101cc57600080fd5b806315d276e1146100d457806319d0915214610118578063715018a61461013b5780638da5cb5b14610145578063a8ef333f14610156578063b870676c14610169575b600080fd5b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61012b610126366004612172565b610220565b604051901515815260200161010f565b610143610294565b005b6000546001600160a01b03166100fb565b6001546100fb906001600160a01b031681565b6002546100fb906001600160a01b031681565b61018f61018a36600461218b565b6102a8565b604080519586526020860194909452928401919091526060830152608082015260a00161010f565b6101bf610547565b60405161010f91906121c8565b6101bf6105d5565b6101436101e2366004612210565b610667565b61012b6101f5366004612245565b610691565b610143610208366004612210565b611017565b61014361021b3660046122c1565b61108d565b600154604051630ce848a960e11b8152600481018390526000916001600160a01b0316906319d0915290602401602060405180830381865afa15801561026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028e9190612372565b92915050565b61029c6110a5565b6102a660006110ff565b565b600080808080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461032b5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b6040805163f054a9a360e01b8152309163f054a9a39161035e918a919082019060c0830190610100840190600401612394565b602060405180830381865afa15801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190612372565b6103db5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610322565b6103e9610100870135610220565b6104355760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610322565b600061044887610100016001600461114f565b90506003604051610459919061242b565b60405180910390208160405160200161047291906124a1565b60405160208183030381529060405280519060200120146104d55760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610322565b6104f160066104eb89610100016004600661114f565b9061122a565b9550600061050688610100016006600b61114f565b905061051181611400565b9550610280880135945061026088013593506105316102a0890135611576565b509496939592945090926102c090920135919050565b60038054610554906123f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610580906123f7565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b6060600380546105e4906123f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610610906123f7565b801561065d5780601f106106325761010080835404028352916020019161065d565b820191906000526020600020905b81548152906001019060200180831161064057829003601f168201915b5050505050905090565b61066f6110a5565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f1b565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781106106c9576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816106ff576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91505080610730576000805260206000f35b5050505050565b7f1192cfe47346d47a3d54b56a571d87d19ca23fbdd99e971626ac1ce626dd885385527f1fefecfb1a66000f84cc50c428cadc39f0f411b87900b91d696aa8148c6d96db6020860152600060808601866107d487357f1052e572d3d9a24a7dbd5f82eaf774938e6e2b5469bbb39dad893c06f9af89707f0814a4c2cecf4e01b1c9c33bc5b896f4aecc69ec353bf843da39e5cfd9560453846106cc565b61082460208801357f1847071e7b28427ff89b02b112ed0c8e9b7001a09148f45819db6ec968c8c7c97f23491dfd59dbfdd40973e01cb7abe689229136cbf955f8ea245c1a7d8891a7cb846106cc565b61087460408801357f2031c96ba61c2380347848f5f5aeb8a9dc5cb48ee66709978e0a72b88c2621587f27eff1f9bda6c4f917b1b2f79bbae13913da4d4261e943599d2f5cfabd1e4d2e846106cc565b6108c460608801357f2bcfd64d15676238f2ca22edbb0a213b57d789d36546493c26d95adb7e9fa04f7f0c1d7f759fb7eb003ef2fca2d05be32496040b5af4f2a193506bbe8fd0ffa326846106cc565b61091460808801357f18a760eb5a9c3f79fa070392ea988ecf52f7c2231ec24f0431fa8a92044e69557f1596caa2aa368ba130136a0ba36d77345e4a5d862bec76d5297f3f5c7de8e047846106cc565b61096460a08801357f20ff2c6a6c3bcdf9a3d88d4665f7ac4a3fb351df12d53c2591f03ecfaabbe0d87f12ff10467d7d41a14e1ee97e95b7d2f1220db995c6b3a1557817fcd0a85782e5846106cc565b6109b460c08801357f2dc1534a581ac0b0ee1550a2b421d73509c22d76b045cac677327a52835330d37f281d50c8500d81a7b40e409e2e04baa9d61815cbfb08af90770644e24abdc459846106cc565b610a0460e08801357f2d745fe442ae36cb87de1502efe86320eedb4c6819d7131567037522e0ffe1877f0e60379b6844d926d3e748d7093c403e905d54b30443c37b66457012e7ea3ffb846106cc565b610a556101008801357f11654938835b1e85bbd7f1d19e7729e77cab08521887d373ec36196ebb3bf6957f2c778085279765f9ce6d2ec5490971196c38c253963c4ca0c265241fd523ff32846106cc565b610aa66101208801357f232697a26bd7085c4aca969e97e8e8963200d364c99e65eb479791871ce91fd77f300f97fe9ffe1c5a063c5a119c4623bea625d5751dc40e90caff122761dcf681846106cc565b610af76101408801357f2a5b11c33902d497e923442dd426692bba812e4d3f374b229bb13328ed31750f7f1373401d497609d91f87d814450592989f601b1c210f94fa4f13b250dca7654e846106cc565b610b486101608801357f0c023a1fc97b326612fd041fea93911daa8e0a0f6eaff5469a1dc151562b11e27f041a8c9628c7e898ae40d4fec14836c1948e8e4f07de3a7fc90c94d3c5c78b6a846106cc565b610b996101808801357f2bc54f3723018f2f925397ff82a005195621e7e7f5f568fa69487e6f70808c3d7f02ee97fa7a770940595f90fa5cd9b4d5c02d27a54326efa0065bb9532b251ec8846106cc565b610bea6101a08801357f1e8f4dbb73a4daeb3247550b43c66065214cc929e37eaafe57950bc3a75a6d547f2f199828d55ca11010e83070e17756f3aec7a9f5b8f742d27792a0c66fe9bd5b846106cc565b610c3b6101c08801357f2427ce9fb70c46fe9bbd844d0032485a256dc4befcddc1039cef7ecbb1800c9c7f10ce2f2d844571bc9154dabbec265f336073944708b5b63aeaf9499abc07aa0e846106cc565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f1e5277d2eaea9cb73f61c94ec91e46060faa074fbd70f8de621cdfddf56e1b616102808201527f0f4b15affad103f60fd48472858f36b7ce02e3a7f2af86031b466db57a75fea06102a08201527f162b629abc2d8f55809aded540891b87554237ad1aee232de83fda66b1cebc206102c08201527f2bd4bb03d8b7808288ade45755f6057345eadb23a6b6df21734769e4d9570a0c6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610f336000840135610698565b610f406020840135610698565b610f4d6040840135610698565b610f5a6060840135610698565b610f676080840135610698565b610f7460a0840135610698565b610f8160c0840135610698565b610f8e60e0840135610698565b610f9c610100840135610698565b610faa610120840135610698565b610fb8610140840135610698565b610fc6610160840135610698565b610fd4610180840135610698565b610fe26101a0840135610698565b610ff06101c0840135610698565b610ffe6101e0840135610698565b61100b818486888a610737565b90508060005260206000f35b61101f6110a5565b6001600160a01b0381166110845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610322565b6106c9816110ff565b6110956110a5565b60036110a1828261250c565b5050565b6000546001600160a01b031633146102a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061115d84846125e2565b60ff1667ffffffffffffffff811115611178576111786122ab565b6040519080825280602002602001820160405280156111a1578160200160208202803683370190505b50905060ff84165b8360ff16811015611206578581600f81106111c6576111c66123e1565b6020020135826111d960ff8816846125fb565b815181106111e9576111e96123e1565b6020908102919091010152806111fe8161260e565b9150506111a9565b50611221600782516112189190612627565b8290600761168a565b95945050505050565b600082818080805b845181101561137a57603060f81b858281518110611252576112526123e1565b01602001516001600160f81b031916108015906112935750603960f81b858281518110611281576112816123e1565b01602001516001600160f81b03191611155b156112d65760308582815181106112ac576112ac6123e1565b01602001516112be919060f81c6125fb565b6112c985600a612627565b6112d3919061263e565b93505b81156112ea57826112e68161260e565b9350505b8481815181106112fc576112fc6123e1565b01602001516001600160f81b031916601760f91b036113685781156113635760405162461bcd60e51b815260206004820152601c60248201527f537472696e6720686173206d756c7469706c6520646563696d616c73000000006044820152606401610322565b600191505b806113728161260e565b915050611232565b50858211156113d65760405162461bcd60e51b815260206004820152602260248201527f537472696e672068617320746f6f206d616e7920646563696d616c20706c6163604482015261657360f01b6064820152608401610322565b6113e082876125fb565b6113eb90600a612735565b6113f59084612627565b979650505050505050565b600061140a61214a565b60008060005b85518110156114c45785818151811061142b5761142b6123e1565b6020910101516001600160f81b031916600160fd1b14806114705750858181518110611459576114596123e1565b6020910101516001600160f81b031916601d60f91b145b156114b2576114808683836119bb565b848460088110611492576114926123e1565b60200201526114a281600161263e565b9150826114ae8161260e565b9350505b806114bc8161260e565b915050611410565b508160071461150b5760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206461746520737472696e6760681b6044820152606401610322565b614d5861156c61152560008660035b60200201519061122a565b604086015161153390611a88565b611540600088600161151a565b61154d600089600461151a565b61155a60008a600561151a565b61156760008b600661151a565b611ebe565b61122191906125fb565b60025460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa1580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e39190612372565b156116305760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e2075736564006044820152606401610322565b600254604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df3290602401600060405180830381600087803b15801561167657600080fd5b505af1158015610730573d6000803e3d6000fd5b606060008083865161169c9190612627565b67ffffffffffffffff8111156116b4576116b46122ab565b6040519080825280601f01601f1916602001820160405280156116de576020820181803683370190505b5090506000805b87518161ffff161015611895576000888261ffff168151811061170a5761170a6123e1565b6020026020010151905060008767ffffffffffffffff81111561172f5761172f6122ab565b604051908082528060200260200182016040528015611758578160200160208202803683370190505b50905060005b888110156117aa57611771816008612627565b83901c828281518110611786576117866123e1565b60ff90921660209283029190910190910152806117a28161260e565b91505061175e565b5060005b8881101561187f5760008282815181106117ca576117ca6123e1565b602002602001015160ff16905080600014611842578060f81b8787815181106117f5576117f56123e1565b60200101906001600160f81b031916908160001a905350856118168161260e565b96506118259050600289612757565b60ff1660000361183d5761183a600189612779565b97505b611865565b61184d600289612757565b60ff1660010361186557611862600189612779565b97505b5060089290921c91806118778161260e565b9150506117ae565b505050808061188d90612792565b9150506116e5565b5060018360ff1610156119365760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a401610322565b858111156119a45760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b6064820152608401610322565b60006119af83611f0f565b98975050505050505050565b60608360006119ca85856125fb565b67ffffffffffffffff8111156119e2576119e26122ab565b6040519080825280601f01601f191660200182016040528015611a0c576020820181803683370190505b509050845b84811015611a7e57828181518110611a2b57611a2b6123e1565b01602001516001600160f81b03191682611a4588846125fb565b81518110611a5557611a556123e1565b60200101906001600160f81b031916908160001a90535080611a768161260e565b915050611a11565b5095945050505050565b60007f4a18c9083b936e0757952a5d9d34b5575d427661506fbe9908c2a1da3f3e80d982604051602001611abc91906124a1565b6040516020818303038152906040528051906020012003611adf57506001919050565b7f78ec83563b948f0ac242d7eaefd592adf65964e11cc27f11ae41faa99a1e990a82604051602001611b1191906124a1565b6040516020818303038152906040528051906020012003611b3457506002919050565b7f2bab7d3f253ae0e3722abcc2571faced288946968116996ffc3de31fb7348ec382604051602001611b6691906124a1565b6040516020818303038152906040528051906020012003611b8957506003919050565b7fc6f33aba2381b69f05afc78835e501547a9daffa08d674623068c378423ac18882604051602001611bbb91906124a1565b6040516020818303038152906040528051906020012003611bde57506004919050565b7fdb5ee1006003349b29eda5be5fe34f728659f836a948d4ec595114aebbb159d382604051602001611c1091906124a1565b6040516020818303038152906040528051906020012003611c3357506005919050565b7f44a0046ab54c1458fc3c39dfcadc52509ad809730ec301470d2d747dbe77242d82604051602001611c6591906124a1565b6040516020818303038152906040528051906020012003611c8857506006919050565b7f74d9e46f10329e61dc333ff1800274be516163110de31961b4e0c61de3e90c5c82604051602001611cba91906124a1565b6040516020818303038152906040528051906020012003611cdd57506007919050565b7fed40c08ab6f3d9c5d71155e25b1271d5b9eca8c27bf89e1d2293fcb77c5abf6482604051602001611d0f91906124a1565b6040516020818303038152906040528051906020012003611d3257506008919050565b7f7d801199c77197eb9933a633741db90c2c6f3d7d14aca35f5f80a41b4a8863ac82604051602001611d6491906124a1565b6040516020818303038152906040528051906020012003611d8757506009919050565b7fb7841ed82fc96483f061ddc0b19846855df22558c4aea3b3b058ce0d9f1f516482604051602001611db991906124a1565b6040516020818303038152906040528051906020012003611ddc5750600a919050565b7f487851233e540dddea8f904d6802590aead5463b1c44965d68348bb7def25cf482604051602001611e0e91906124a1565b6040516020818303038152906040528051906020012003611e315750600b919050565b7f3bd971d8758c58fe0c4d635451404450c5edda87d624a89819e0be5a122933dc82604051602001611e6391906124a1565b6040516020818303038152906040528051906020012003611e865750600c919050565b60405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840dadedce8d609b1b6044820152606401610322565b600081611ecc603c85612627565b611ed8610e1087612627565b62015180611ee78b8b8b612019565b611ef19190612627565b611efb919061263e565b611f05919061263e565b6113f5919061263e565b8051606090829060005b8251811015611f6457828181518110611f3457611f346123e1565b01602001516001600160f81b031916600003611f5257809150611f64565b80611f5c8161260e565b915050611f19565b5060008167ffffffffffffffff811115611f8057611f806122ab565b6040519080825280601f01601f191660200182016040528015611faa576020820181803683370190505b50905060005b8281101561201057838181518110611fca57611fca6123e1565b602001015160f81c60f81b828281518110611fe757611fe76123e1565b60200101906001600160f81b031916908160001a905350806120088161260e565b915050611fb0565b50949350505050565b60006107b284101561202a57600080fd5b838383600062253d8c60046064600c612044600e886127b3565b61204e91906127da565b61205a88611324612808565b6120649190612808565b61206e91906127da565b612079906003612830565b61208391906127da565b600c80612091600e886127b3565b61209b91906127da565b6120a690600c612830565b6120b16002886127b3565b6120bb91906127b3565b6120c79061016f612830565b6120d191906127da565b6004600c6120e0600e896127b3565b6120ea91906127da565b6120f6896112c0612808565b6121009190612808565b61210c906105b5612830565b61211691906127da565b612122617d4b876127b3565b61212c9190612808565b6121369190612808565b61214091906127b3565b6119af91906127b3565b6040518061010001604052806008905b606081526020019060019003908161215a5790505090565b60006020828403121561218457600080fd5b5035919050565b60006102e0828403121561219e57600080fd5b50919050565b60005b838110156121bf5781810151838201526020016121a7565b50506000910152565b60208152600082518060208401526121e78160408501602087016121a4565b601f01601f19169190910160400192915050565b6001600160a01b03811681146106c957600080fd5b60006020828403121561222257600080fd5b813561222d816121fb565b9392505050565b806040810183101561028e57600080fd5b6000806000806102e080868803121561225d57600080fd5b6122678787612234565b945060c086018781111561227a57600080fd5b60408701945061228a8882612234565b93505086818701111561229c57600080fd5b50929591945092610100019150565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156122d357600080fd5b813567ffffffffffffffff808211156122eb57600080fd5b818401915084601f8301126122ff57600080fd5b813581811115612311576123116122ab565b604051601f8201601f19908116603f01168101908382118183101715612339576123396122ab565b8160405282815287602084870101111561235257600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561238457600080fd5b8151801515811461222d57600080fd5b6102e081016040808784378083018660005b60028110156123c3578382843791830191908301906001016123a6565b505050808560c0850137506101e08361010084013795945050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061240b57607f821691505b60208210810361219e57634e487b7160e01b600052602260045260246000fd5b6000808354612439816123f7565b60018281168015612451576001811461246657612495565b60ff1984168752821515830287019450612495565b8760005260208060002060005b8581101561248c5781548a820152908401908201612473565b50505082870194505b50929695505050505050565b600082516124b38184602087016121a4565b9190910192915050565b601f82111561250757600081815260208120601f850160051c810160208610156124e45750805b601f850160051c820191505b81811015612503578281556001016124f0565b5050505b505050565b815167ffffffffffffffff811115612526576125266122ab565b61253a8161253484546123f7565b846124bd565b602080601f83116001811461256f57600084156125575750858301515b600019600386901b1c1916600185901b178555612503565b600085815260208120601f198616915b8281101561259e5788860151825594840194600190910190840161257f565b50858210156125bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111561028e5761028e6125cc565b8181038181111561028e5761028e6125cc565b600060018201612620576126206125cc565b5060010190565b808202811582820484141761028e5761028e6125cc565b8082018082111561028e5761028e6125cc565b600181815b8085111561268c578160001904821115612672576126726125cc565b8085161561267f57918102915b93841c9390800290612656565b509250929050565b6000826126a35750600161028e565b816126b05750600061028e565b81600181146126c657600281146126d0576126ec565b600191505061028e565b60ff8411156126e1576126e16125cc565b50506001821b61028e565b5060208310610133831016604e8410600b841016171561270f575081810a61028e565b6127198383612651565b806000190482111561272d5761272d6125cc565b029392505050565b600061222d8383612694565b634e487b7160e01b600052601260045260246000fd5b600060ff83168061276a5761276a612741565b8060ff84160691505092915050565b60ff818116838216019081111561028e5761028e6125cc565b600061ffff8083168181036127a9576127a96125cc565b6001019392505050565b81810360008312801583831316838312821617156127d3576127d36125cc565b5092915050565b6000826127e9576127e9612741565b600160ff1b821460001984141615612803576128036125cc565b500590565b8082018281126000831280158216821582161715612828576128286125cc565b505092915050565b80820260008212600160ff1b8414161561284c5761284c6125cc565b818105831482151761028e5761028e6125cc56fea26469706673582212207f78bfaa2a94875c8f44492d21396269592ae01e7dd1529e26b8f7453cc4be7264736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063bf93fde11161008c578063d0b71f9911610066578063d0b71f99146101d4578063f054a9a3146101e7578063f2fde38b146101fa578063f6c7226b1461020d57600080fd5b8063bf93fde11461017c578063c0d05fed146101b7578063ced1e978146101cc57600080fd5b806315d276e1146100d457806319d0915214610118578063715018a61461013b5780638da5cb5b14610145578063a8ef333f14610156578063b870676c14610169575b600080fd5b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61012b610126366004612172565b610220565b604051901515815260200161010f565b610143610294565b005b6000546001600160a01b03166100fb565b6001546100fb906001600160a01b031681565b6002546100fb906001600160a01b031681565b61018f61018a36600461218b565b6102a8565b604080519586526020860194909452928401919091526060830152608082015260a00161010f565b6101bf610547565b60405161010f91906121c8565b6101bf6105d5565b6101436101e2366004612210565b610667565b61012b6101f5366004612245565b610691565b610143610208366004612210565b611017565b61014361021b3660046122c1565b61108d565b600154604051630ce848a960e11b8152600481018390526000916001600160a01b0316906319d0915290602401602060405180830381865afa15801561026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028e9190612372565b92915050565b61029c6110a5565b6102a660006110ff565b565b600080808080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461032b5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b6040805163f054a9a360e01b8152309163f054a9a39161035e918a919082019060c0830190610100840190600401612394565b602060405180830381865afa15801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190612372565b6103db5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610322565b6103e9610100870135610220565b6104355760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610322565b600061044887610100016001600461114f565b90506003604051610459919061242b565b60405180910390208160405160200161047291906124a1565b60405160208183030381529060405280519060200120146104d55760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610322565b6104f160066104eb89610100016004600661114f565b9061122a565b9550600061050688610100016006600b61114f565b905061051181611400565b9550610280880135945061026088013593506105316102a0890135611576565b509496939592945090926102c090920135919050565b60038054610554906123f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610580906123f7565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b6060600380546105e4906123f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610610906123f7565b801561065d5780601f106106325761010080835404028352916020019161065d565b820191906000526020600020905b81548152906001019060200180831161064057829003601f168201915b5050505050905090565b61066f6110a5565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f1b565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781106106c9576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816106ff576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91505080610730576000805260206000f35b5050505050565b7f1192cfe47346d47a3d54b56a571d87d19ca23fbdd99e971626ac1ce626dd885385527f1fefecfb1a66000f84cc50c428cadc39f0f411b87900b91d696aa8148c6d96db6020860152600060808601866107d487357f1052e572d3d9a24a7dbd5f82eaf774938e6e2b5469bbb39dad893c06f9af89707f0814a4c2cecf4e01b1c9c33bc5b896f4aecc69ec353bf843da39e5cfd9560453846106cc565b61082460208801357f1847071e7b28427ff89b02b112ed0c8e9b7001a09148f45819db6ec968c8c7c97f23491dfd59dbfdd40973e01cb7abe689229136cbf955f8ea245c1a7d8891a7cb846106cc565b61087460408801357f2031c96ba61c2380347848f5f5aeb8a9dc5cb48ee66709978e0a72b88c2621587f27eff1f9bda6c4f917b1b2f79bbae13913da4d4261e943599d2f5cfabd1e4d2e846106cc565b6108c460608801357f2bcfd64d15676238f2ca22edbb0a213b57d789d36546493c26d95adb7e9fa04f7f0c1d7f759fb7eb003ef2fca2d05be32496040b5af4f2a193506bbe8fd0ffa326846106cc565b61091460808801357f18a760eb5a9c3f79fa070392ea988ecf52f7c2231ec24f0431fa8a92044e69557f1596caa2aa368ba130136a0ba36d77345e4a5d862bec76d5297f3f5c7de8e047846106cc565b61096460a08801357f20ff2c6a6c3bcdf9a3d88d4665f7ac4a3fb351df12d53c2591f03ecfaabbe0d87f12ff10467d7d41a14e1ee97e95b7d2f1220db995c6b3a1557817fcd0a85782e5846106cc565b6109b460c08801357f2dc1534a581ac0b0ee1550a2b421d73509c22d76b045cac677327a52835330d37f281d50c8500d81a7b40e409e2e04baa9d61815cbfb08af90770644e24abdc459846106cc565b610a0460e08801357f2d745fe442ae36cb87de1502efe86320eedb4c6819d7131567037522e0ffe1877f0e60379b6844d926d3e748d7093c403e905d54b30443c37b66457012e7ea3ffb846106cc565b610a556101008801357f11654938835b1e85bbd7f1d19e7729e77cab08521887d373ec36196ebb3bf6957f2c778085279765f9ce6d2ec5490971196c38c253963c4ca0c265241fd523ff32846106cc565b610aa66101208801357f232697a26bd7085c4aca969e97e8e8963200d364c99e65eb479791871ce91fd77f300f97fe9ffe1c5a063c5a119c4623bea625d5751dc40e90caff122761dcf681846106cc565b610af76101408801357f2a5b11c33902d497e923442dd426692bba812e4d3f374b229bb13328ed31750f7f1373401d497609d91f87d814450592989f601b1c210f94fa4f13b250dca7654e846106cc565b610b486101608801357f0c023a1fc97b326612fd041fea93911daa8e0a0f6eaff5469a1dc151562b11e27f041a8c9628c7e898ae40d4fec14836c1948e8e4f07de3a7fc90c94d3c5c78b6a846106cc565b610b996101808801357f2bc54f3723018f2f925397ff82a005195621e7e7f5f568fa69487e6f70808c3d7f02ee97fa7a770940595f90fa5cd9b4d5c02d27a54326efa0065bb9532b251ec8846106cc565b610bea6101a08801357f1e8f4dbb73a4daeb3247550b43c66065214cc929e37eaafe57950bc3a75a6d547f2f199828d55ca11010e83070e17756f3aec7a9f5b8f742d27792a0c66fe9bd5b846106cc565b610c3b6101c08801357f2427ce9fb70c46fe9bbd844d0032485a256dc4befcddc1039cef7ecbb1800c9c7f10ce2f2d844571bc9154dabbec265f336073944708b5b63aeaf9499abc07aa0e846106cc565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f1e5277d2eaea9cb73f61c94ec91e46060faa074fbd70f8de621cdfddf56e1b616102808201527f0f4b15affad103f60fd48472858f36b7ce02e3a7f2af86031b466db57a75fea06102a08201527f162b629abc2d8f55809aded540891b87554237ad1aee232de83fda66b1cebc206102c08201527f2bd4bb03d8b7808288ade45755f6057345eadb23a6b6df21734769e4d9570a0c6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610f336000840135610698565b610f406020840135610698565b610f4d6040840135610698565b610f5a6060840135610698565b610f676080840135610698565b610f7460a0840135610698565b610f8160c0840135610698565b610f8e60e0840135610698565b610f9c610100840135610698565b610faa610120840135610698565b610fb8610140840135610698565b610fc6610160840135610698565b610fd4610180840135610698565b610fe26101a0840135610698565b610ff06101c0840135610698565b610ffe6101e0840135610698565b61100b818486888a610737565b90508060005260206000f35b61101f6110a5565b6001600160a01b0381166110845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610322565b6106c9816110ff565b6110956110a5565b60036110a1828261250c565b5050565b6000546001600160a01b031633146102a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061115d84846125e2565b60ff1667ffffffffffffffff811115611178576111786122ab565b6040519080825280602002602001820160405280156111a1578160200160208202803683370190505b50905060ff84165b8360ff16811015611206578581600f81106111c6576111c66123e1565b6020020135826111d960ff8816846125fb565b815181106111e9576111e96123e1565b6020908102919091010152806111fe8161260e565b9150506111a9565b50611221600782516112189190612627565b8290600761168a565b95945050505050565b600082818080805b845181101561137a57603060f81b858281518110611252576112526123e1565b01602001516001600160f81b031916108015906112935750603960f81b858281518110611281576112816123e1565b01602001516001600160f81b03191611155b156112d65760308582815181106112ac576112ac6123e1565b01602001516112be919060f81c6125fb565b6112c985600a612627565b6112d3919061263e565b93505b81156112ea57826112e68161260e565b9350505b8481815181106112fc576112fc6123e1565b01602001516001600160f81b031916601760f91b036113685781156113635760405162461bcd60e51b815260206004820152601c60248201527f537472696e6720686173206d756c7469706c6520646563696d616c73000000006044820152606401610322565b600191505b806113728161260e565b915050611232565b50858211156113d65760405162461bcd60e51b815260206004820152602260248201527f537472696e672068617320746f6f206d616e7920646563696d616c20706c6163604482015261657360f01b6064820152608401610322565b6113e082876125fb565b6113eb90600a612735565b6113f59084612627565b979650505050505050565b600061140a61214a565b60008060005b85518110156114c45785818151811061142b5761142b6123e1565b6020910101516001600160f81b031916600160fd1b14806114705750858181518110611459576114596123e1565b6020910101516001600160f81b031916601d60f91b145b156114b2576114808683836119bb565b848460088110611492576114926123e1565b60200201526114a281600161263e565b9150826114ae8161260e565b9350505b806114bc8161260e565b915050611410565b508160071461150b5760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206461746520737472696e6760681b6044820152606401610322565b614d5861156c61152560008660035b60200201519061122a565b604086015161153390611a88565b611540600088600161151a565b61154d600089600461151a565b61155a60008a600561151a565b61156760008b600661151a565b611ebe565b61122191906125fb565b60025460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa1580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e39190612372565b156116305760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e2075736564006044820152606401610322565b600254604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df3290602401600060405180830381600087803b15801561167657600080fd5b505af1158015610730573d6000803e3d6000fd5b606060008083865161169c9190612627565b67ffffffffffffffff8111156116b4576116b46122ab565b6040519080825280601f01601f1916602001820160405280156116de576020820181803683370190505b5090506000805b87518161ffff161015611895576000888261ffff168151811061170a5761170a6123e1565b6020026020010151905060008767ffffffffffffffff81111561172f5761172f6122ab565b604051908082528060200260200182016040528015611758578160200160208202803683370190505b50905060005b888110156117aa57611771816008612627565b83901c828281518110611786576117866123e1565b60ff90921660209283029190910190910152806117a28161260e565b91505061175e565b5060005b8881101561187f5760008282815181106117ca576117ca6123e1565b602002602001015160ff16905080600014611842578060f81b8787815181106117f5576117f56123e1565b60200101906001600160f81b031916908160001a905350856118168161260e565b96506118259050600289612757565b60ff1660000361183d5761183a600189612779565b97505b611865565b61184d600289612757565b60ff1660010361186557611862600189612779565b97505b5060089290921c91806118778161260e565b9150506117ae565b505050808061188d90612792565b9150506116e5565b5060018360ff1610156119365760405162461bcd60e51b815260206004820152605760248201527f4e6f207061636b656420627974657320666f756e642120496e76616c6964206660448201527f696e616c207374617465206f66207061636b656420627974657320696e20656d60648201527f61696c3b2076616c7565206973206c696b656c79203021000000000000000000608482015260a401610322565b858111156119a45760405162461bcd60e51b815260206004820152603560248201527f5061636b6564206279746573206d6f7265207468616e20616c6c6f776564206d6044820152746178206e756d626572206f66207369676e616c732160581b6064820152608401610322565b60006119af83611f0f565b98975050505050505050565b60608360006119ca85856125fb565b67ffffffffffffffff8111156119e2576119e26122ab565b6040519080825280601f01601f191660200182016040528015611a0c576020820181803683370190505b509050845b84811015611a7e57828181518110611a2b57611a2b6123e1565b01602001516001600160f81b03191682611a4588846125fb565b81518110611a5557611a556123e1565b60200101906001600160f81b031916908160001a90535080611a768161260e565b915050611a11565b5095945050505050565b60007f4a18c9083b936e0757952a5d9d34b5575d427661506fbe9908c2a1da3f3e80d982604051602001611abc91906124a1565b6040516020818303038152906040528051906020012003611adf57506001919050565b7f78ec83563b948f0ac242d7eaefd592adf65964e11cc27f11ae41faa99a1e990a82604051602001611b1191906124a1565b6040516020818303038152906040528051906020012003611b3457506002919050565b7f2bab7d3f253ae0e3722abcc2571faced288946968116996ffc3de31fb7348ec382604051602001611b6691906124a1565b6040516020818303038152906040528051906020012003611b8957506003919050565b7fc6f33aba2381b69f05afc78835e501547a9daffa08d674623068c378423ac18882604051602001611bbb91906124a1565b6040516020818303038152906040528051906020012003611bde57506004919050565b7fdb5ee1006003349b29eda5be5fe34f728659f836a948d4ec595114aebbb159d382604051602001611c1091906124a1565b6040516020818303038152906040528051906020012003611c3357506005919050565b7f44a0046ab54c1458fc3c39dfcadc52509ad809730ec301470d2d747dbe77242d82604051602001611c6591906124a1565b6040516020818303038152906040528051906020012003611c8857506006919050565b7f74d9e46f10329e61dc333ff1800274be516163110de31961b4e0c61de3e90c5c82604051602001611cba91906124a1565b6040516020818303038152906040528051906020012003611cdd57506007919050565b7fed40c08ab6f3d9c5d71155e25b1271d5b9eca8c27bf89e1d2293fcb77c5abf6482604051602001611d0f91906124a1565b6040516020818303038152906040528051906020012003611d3257506008919050565b7f7d801199c77197eb9933a633741db90c2c6f3d7d14aca35f5f80a41b4a8863ac82604051602001611d6491906124a1565b6040516020818303038152906040528051906020012003611d8757506009919050565b7fb7841ed82fc96483f061ddc0b19846855df22558c4aea3b3b058ce0d9f1f516482604051602001611db991906124a1565b6040516020818303038152906040528051906020012003611ddc5750600a919050565b7f487851233e540dddea8f904d6802590aead5463b1c44965d68348bb7def25cf482604051602001611e0e91906124a1565b6040516020818303038152906040528051906020012003611e315750600b919050565b7f3bd971d8758c58fe0c4d635451404450c5edda87d624a89819e0be5a122933dc82604051602001611e6391906124a1565b6040516020818303038152906040528051906020012003611e865750600c919050565b60405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840dadedce8d609b1b6044820152606401610322565b600081611ecc603c85612627565b611ed8610e1087612627565b62015180611ee78b8b8b612019565b611ef19190612627565b611efb919061263e565b611f05919061263e565b6113f5919061263e565b8051606090829060005b8251811015611f6457828181518110611f3457611f346123e1565b01602001516001600160f81b031916600003611f5257809150611f64565b80611f5c8161260e565b915050611f19565b5060008167ffffffffffffffff811115611f8057611f806122ab565b6040519080825280601f01601f191660200182016040528015611faa576020820181803683370190505b50905060005b8281101561201057838181518110611fca57611fca6123e1565b602001015160f81c60f81b828281518110611fe757611fe76123e1565b60200101906001600160f81b031916908160001a905350806120088161260e565b915050611fb0565b50949350505050565b60006107b284101561202a57600080fd5b838383600062253d8c60046064600c612044600e886127b3565b61204e91906127da565b61205a88611324612808565b6120649190612808565b61206e91906127da565b612079906003612830565b61208391906127da565b600c80612091600e886127b3565b61209b91906127da565b6120a690600c612830565b6120b16002886127b3565b6120bb91906127b3565b6120c79061016f612830565b6120d191906127da565b6004600c6120e0600e896127b3565b6120ea91906127da565b6120f6896112c0612808565b6121009190612808565b61210c906105b5612830565b61211691906127da565b612122617d4b876127b3565b61212c9190612808565b6121369190612808565b61214091906127b3565b6119af91906127b3565b6040518061010001604052806008905b606081526020019060019003908161215a5790505090565b60006020828403121561218457600080fd5b5035919050565b60006102e0828403121561219e57600080fd5b50919050565b60005b838110156121bf5781810151838201526020016121a7565b50506000910152565b60208152600082518060208401526121e78160408501602087016121a4565b601f01601f19169190910160400192915050565b6001600160a01b03811681146106c957600080fd5b60006020828403121561222257600080fd5b813561222d816121fb565b9392505050565b806040810183101561028e57600080fd5b6000806000806102e080868803121561225d57600080fd5b6122678787612234565b945060c086018781111561227a57600080fd5b60408701945061228a8882612234565b93505086818701111561229c57600080fd5b50929591945092610100019150565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156122d357600080fd5b813567ffffffffffffffff808211156122eb57600080fd5b818401915084601f8301126122ff57600080fd5b813581811115612311576123116122ab565b604051601f8201601f19908116603f01168101908382118183101715612339576123396122ab565b8160405282815287602084870101111561235257600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561238457600080fd5b8151801515811461222d57600080fd5b6102e081016040808784378083018660005b60028110156123c3578382843791830191908301906001016123a6565b505050808560c0850137506101e08361010084013795945050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061240b57607f821691505b60208210810361219e57634e487b7160e01b600052602260045260246000fd5b6000808354612439816123f7565b60018281168015612451576001811461246657612495565b60ff1984168752821515830287019450612495565b8760005260208060002060005b8581101561248c5781548a820152908401908201612473565b50505082870194505b50929695505050505050565b600082516124b38184602087016121a4565b9190910192915050565b601f82111561250757600081815260208120601f850160051c810160208610156124e45750805b601f850160051c820191505b81811015612503578281556001016124f0565b5050505b505050565b815167ffffffffffffffff811115612526576125266122ab565b61253a8161253484546123f7565b846124bd565b602080601f83116001811461256f57600084156125575750858301515b600019600386901b1c1916600185901b178555612503565b600085815260208120601f198616915b8281101561259e5788860151825594840194600190910190840161257f565b50858210156125bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111561028e5761028e6125cc565b8181038181111561028e5761028e6125cc565b600060018201612620576126206125cc565b5060010190565b808202811582820484141761028e5761028e6125cc565b8082018082111561028e5761028e6125cc565b600181815b8085111561268c578160001904821115612672576126726125cc565b8085161561267f57918102915b93841c9390800290612656565b509250929050565b6000826126a35750600161028e565b816126b05750600061028e565b81600181146126c657600281146126d0576126ec565b600191505061028e565b60ff8411156126e1576126e16125cc565b50506001821b61028e565b5060208310610133831016604e8410600b841016171561270f575081810a61028e565b6127198383612651565b806000190482111561272d5761272d6125cc565b029392505050565b600061222d8383612694565b634e487b7160e01b600052601260045260246000fd5b600060ff83168061276a5761276a612741565b8060ff84160691505092915050565b60ff818116838216019081111561028e5761028e6125cc565b600061ffff8083168181036127a9576127a96125cc565b6001019392505050565b81810360008312801583831316838312821617156127d3576127d36125cc565b5092915050565b6000826127e9576127e9612741565b600160ff1b821460001984141615612803576128036125cc565b500590565b8082018281126000831280158216821582161715612828576128286125cc565b505092915050565b80820260008212600160ff1b8414161561284c5761284c6125cc565b818105831482151761028e5761028e6125cc56fea26469706673582212207f78bfaa2a94875c8f44492d21396269592ae01e7dd1529e26b8f7453cc4be7264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setEmailFromAddress(string)": {
        "params": {
          "_emailFromAddress": "The from email address for validated emails, MUST BE PROPERLY PADDED"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setEmailFromAddress(string)": {
        "notice": "ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3356,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "mailServerKeyHashAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKeyHashAdapterV2)3509"
      },
      {
        "astId": 3359,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "nullifierRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INullifierRegistry)3714"
      },
      {
        "astId": 3361,
        "contract": "contracts/ramps/hdfc/HDFCSendProcessor.sol:HDFCSendProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IKeyHashAdapterV2)3509": {
        "encoding": "inplace",
        "label": "contract IKeyHashAdapterV2",
        "numberOfBytes": "20"
      },
      "t_contract(INullifierRegistry)3714": {
        "encoding": "inplace",
        "label": "contract INullifierRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}