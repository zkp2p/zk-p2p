{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@zk-email/contracts/utils/StringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\n// https://github.com/nalinbhardwaj/ethdosnumber/blob/main/ethdos-contracts/src/HexStrings.sol\nlibrary StringUtils {\n    bytes16 internal constant ALPHABET = \"0123456789abcdef\";\n    uint256 internal constant DEFAULT_PACK_SIZE = 31;\n\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length);\n        for (uint256 i = buffer.length; i > 0; i--) {\n            buffer[i - 1] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        return string(buffer);\n    }\n\n    function toString(uint256 value) internal pure returns (string memory) {\n        return toString(abi.encodePacked(value));\n    }\n\n    function toString(bytes32 value) internal pure returns (string memory) {\n        return toString(abi.encodePacked(value));\n    }\n\n    function toString(address account) internal pure returns (string memory) {\n        return toString(abi.encodePacked(account));\n    }\n\n    function stringEq(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\n    }\n\n    function toString(bytes memory data) internal pure returns (string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < data.length; i++) {\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    // 1 packed byte = packSize (usually 31) normal bytes, all in one 255/256-bit value\n    // Note that this is not 32 due to the field modulus of circom\n    function convertPackedByteToString(uint256 packedByte, uint256 packSize)\n        internal\n        pure\n        returns (string memory extractedString)\n    {\n        uint256[] memory packedBytes = new uint256[](1);\n        packedBytes[0] = packedByte;\n        return convertPackedBytesToString(packedBytes, packSize, packSize);\n    }\n\n    // Note: This convenience function removes the max string length check, which may cause misalignment with the circom\n    // If using this, then the circom needs to rangecheck packed length in the circuit itself\n    // This defaults to 31 bytes per packed byte\n    function convertPackedBytesToString(uint256[] memory packedBytes) \n        internal\n        pure\n        returns (string memory extractedString)\n    {\n        return convertPackedBytesToString(packedBytes, packedBytes.length * DEFAULT_PACK_SIZE, DEFAULT_PACK_SIZE);\n    }\n\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\n    // signals is the total number of signals (i.e. bytes) packed into the packedBytes. it defaults to packedBytes.length * packSize\n    function convertPackedBytesToString(uint256[] memory packedBytes, uint256 signals, uint256 packSize)\n        internal\n        pure\n        returns (string memory extractedString)\n    {\n        uint8 state = 0;\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * packSize);\n        uint256 nonzeroBytesArrayIndex = 0;\n        for (uint16 i = 0; i < packedBytes.length; i++) {\n            uint256 packedByte = packedBytes[i];\n            uint8[] memory unpackedBytes = new uint8[](packSize);\n            for (uint256 j = 0; j < packSize; j++) {\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\n            }\n            for (uint256 j = 0; j < packSize; j++) {\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\n                if (unpackedByte != 0) {\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\n                    nonzeroBytesArrayIndex++;\n                    if (state % 2 == 0) {\n                        state += 1;\n                    }\n                } else {\n                    if (state % 2 == 1) {\n                        state += 1;\n                    }\n                }\n                packedByte = packedByte >> 8;\n            }\n        }\n        // TODO: You might want to assert that the state is exactly 1 or 2\n        // If not, that means empty bytse have been removed from the middle and things have been concatenated.\n        // We removed due to some tests failing, but this is not ideal and the require should be uncommented as soon as tests pass with it.\n\n        // require(state == 1 || state == 2, \"Invalid final state of packed bytes in email; more than two non-zero regions found!\");\n        require(state >= 1, \"No packed bytes found! Invalid final state of packed bytes in email; value is likely 0!\");\n        require(nonzeroBytesArrayIndex <= signals, \"Packed bytes more than allowed max number of signals!\");\n        string memory returnValue = removeTrailingZeros(string(nonzeroBytesArray));\n        return returnValue;\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\n    }\n\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\n        uint256 i;\n        for (i = 0; i < 32 && input[i] != 0; i++) {}\n        bytes memory resultBytes = new bytes(i);\n        for (i = 0; i < 32 && input[i] != 0; i++) {\n            resultBytes[i] = input[i];\n        }\n        return string(resultBytes);\n    }\n\n    // sliceArray is used to slice an array of uint256s from start-end into a new array of uint256s\n    function sliceArray(uint256[] memory input, uint256 start, uint256 end) internal pure returns (uint256[] memory) {\n        require(start <= end && end <= input.length, \"Invalid slice indices\");\n        uint256[] memory result = new uint256[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            result[i - start] = input[i];\n        }\n        return result;\n    }\n\n    // stringToUint is used to convert a string like \"45\" to a uint256 4\n    function stringToUint(string memory s) internal pure returns (uint256) {\n        bytes memory b = bytes(s);\n        uint256 result = 0;\n        for (uint256 i = 0; i < b.length; i++) {\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\n            }\n\n            // TODO: Currently truncates decimals\n            if (b[i] == 0x2E) {\n                return result;\n            }\n        }\n        return result;\n    }\n\n    // getDomainFromEmail is used to extract the domain from an email i.e. the part after the @\n    function getDomainFromEmail(string memory fromEmail) internal pure returns (string memory) {\n        bytes memory emailBytes = bytes(fromEmail);\n        uint256 atIndex;\n        for (uint256 i = 0; i < emailBytes.length; i++) {\n            if (emailBytes[i] == \"@\") {\n                atIndex = i;\n                break;\n            }\n        }\n\n        bytes memory domainBytes = new bytes(emailBytes.length - atIndex - 1);\n        for (uint256 j = 0; j < domainBytes.length; j++) {\n            domainBytes[j] = emailBytes[atIndex + 1 + j];\n        }\n        return bytes32ToString(bytes32(bytes(domainBytes)));\n    }\n\n    function removeTrailingZeros(string memory input) public pure returns (string memory) {\n        bytes memory inputBytes = bytes(input);\n        uint256 endIndex = inputBytes.length;\n\n        for (uint256 i = 0; i < inputBytes.length; i++) {\n            if (inputBytes[i] == 0) {\n                endIndex = i;\n                break;\n            }\n        }\n\n        bytes memory resultBytes = new bytes(endIndex);\n        for (uint256 i = 0; i < endIndex; i++) {\n            resultBytes[i] = inputBytes[i];\n        }\n\n        return string(resultBytes);\n    }\n\n    // Upper/lower string utils from https://github.com/willitscale/solidity-util/blob/master/lib/Strings.sol\n    /**\n     * Upper\n     *\n     * Converts all the values of a string to their corresponding upper case\n     * value.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string base to convert to upper case\n     * @return string\n     */\n    function upper(string memory _base) public pure returns (string memory) {\n        bytes memory _baseBytes = bytes(_base);\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\n            _baseBytes[i] = _upper(_baseBytes[i]);\n        }\n        return string(_baseBytes);\n    }\n\n    /**\n     * Lower\n     *\n     * Converts all the values of a string to their corresponding lower case\n     * value.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string base to convert to lower case\n     * @return string\n     */\n    function lower(string memory _base) public pure returns (string memory) {\n        bytes memory _baseBytes = bytes(_base);\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\n            _baseBytes[i] = _lower(_baseBytes[i]);\n        }\n        return string(_baseBytes);\n    }\n\n    /**\n     * Upper\n     *\n     * Convert an alphabetic character to upper case and return the original\n     * value when not alphabetic\n     *\n     * @param _b1 The byte to be converted to upper case\n     * @return bytes1 The converted value if the passed value was alphabetic\n     *                and in a lower case otherwise returns the original value\n     */\n    function _upper(bytes1 _b1) private pure returns (bytes1) {\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\n            return bytes1(uint8(_b1) - 32);\n        }\n\n        return _b1;\n    }\n\n    /**\n     * Lower\n     *\n     * Convert an alphabetic character to lower case and return the original\n     * value when not alphabetic\n     *\n     * @param _b1 The byte to be converted to lower case\n     * @return bytes1 The converted value if the passed value was alphabetic\n     *                and in a upper case otherwise returns the original value\n     */\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\n            return bytes1(uint8(_b1) + 32);\n        }\n\n        return _b1;\n    }\n}\n"
    },
    "contracts/external/AddressArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: MIT\n*/\n\npragma solidity ^0.8.17;\n\n/**\n * @title AddressArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Address Arrays\n *\n * CHANGELOG:\n * - 4/21/21: Added validatePairsWithArray methods\n */\nlibrary AddressArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(address[] memory A, address a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            address current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(address[] memory A, address a)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            (address[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     */\n    function removeStorage(address[] storage A, address a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(address[] memory A, uint256 index)\n        internal\n        pure\n        returns (address[] memory, address)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        address[] memory newAddresses = new address[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newAddresses[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newAddresses[j - 1] = A[j];\n        }\n        return (newAddresses, A[index]);\n    }\n}\n"
    },
    "contracts/external/Bytes32ArrayUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n/**\n * @title Bytes32ArrayUtils\n * @author ZKP2P\n *\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\n */\nlibrary Bytes32ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            bytes32 current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(bytes32[] memory A, bytes32 a)\n        internal\n        pure\n        returns (bytes32[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            (bytes32[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(bytes32[] storage A, bytes32 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(bytes32[] memory A, uint256 index)\n        internal\n        pure\n        returns (bytes32[] memory, bytes32)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        bytes32[] memory newBytes = new bytes32[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newBytes[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newBytes[j - 1] = A[j];\n        }\n        return (newBytes, A[index]);\n    }\n}\n"
    },
    "contracts/external/DateTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// ----------------------------------------------------------------------------\n// DateTime Library v2.0\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n//\n// NOTE: This library has been pruned to keep only functions needed by zkp2p\n// ----------------------------------------------------------------------------\n\nlibrary DateTime {\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\n    uint256 constant SECONDS_PER_MINUTE = 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    uint256 constant DOW_MON = 1;\n    uint256 constant DOW_TUE = 2;\n    uint256 constant DOW_WED = 3;\n    uint256 constant DOW_THU = 4;\n    uint256 constant DOW_FRI = 5;\n    uint256 constant DOW_SAT = 6;\n    uint256 constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\n        require(year >= 1970);\n        int256 _year = int256(year);\n        int256 _month = int256(month);\n        int256 _day = int256(day);\n\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\n\n        _days = uint256(__days);\n    }\n\n    function timestampFromDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    )\n        internal\n        pure\n        returns (uint256 timestamp)\n    {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\n            + minute * SECONDS_PER_MINUTE + second;\n    }\n}\n"
    },
    "contracts/external/Uint256ArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title Uint256ArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Uint256 Arrays\n */\nlibrary Uint256ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n     * Returns the combination of the two arrays\n     * @param A The first array\n     * @param B The second array\n     * @return Returns A extended by B\n     */\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\n        uint256 aLength = A.length;\n        uint256 bLength = B.length;\n        uint256[] memory newUints = new uint256[](aLength + bLength);\n        for (uint256 i = 0; i < aLength; i++) {\n            newUints[i] = A[i];\n        }\n        for (uint256 j = 0; j < bLength; j++) {\n            newUints[aLength + j] = B[j];\n        }\n        return newUints;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(uint256[] storage A, uint256 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"uint256 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPoseidon.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IPoseidon {\n    function poseidon(uint256[3] memory _a) external pure returns(uint256);\n}\n"
    },
    "contracts/interfaces/IPoseidon3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IPoseidon3 {\n    function poseidon(uint256[3] memory _a) external pure returns(uint256);\n}\n"
    },
    "contracts/interfaces/IPoseidon6.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IPoseidon6 {\n    function poseidon(uint256[6] memory _a) external pure returns(uint256);\n}\n"
    },
    "contracts/lib/StringConversionUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\n// converting from string to Uint\nlibrary StringConversionUtils {\n    \n    /**\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\n     * the returned number has multiple floating points then the function will revert.\n     *\n     * Examples: _s = \"12.34\", _expectedDecimals = 6 => 12340000\n     *           _s = \"12.34\", _expectedDecimals = 2 => 1234\n     *           _s = \"12.34\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\n     *           _s = \"12.34.56\", _expectedDecimals = 6 => REVERT (Invalid number)\n     *\n     * @param _s                    String being processed\n     * @param _desiredDecimals      Desired amount of decimal places\n     */\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\n        bytes memory b = bytes(_s);\n\n        uint256 result = 0;\n        uint256 decimalPlaces = 0;\n\n        bool decimals = false;\n        for (uint256 i = 0; i < b.length; i++) {\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\n            }\n\n            if (decimals) {\n                decimalPlaces++;\n            }\n\n            if (b[i] == 0x2E) {\n                require(decimals == false, \"String has multiple decimals\");\n                decimals = true;\n            }\n        }\n\n        require(decimalPlaces <= _desiredDecimals, \"String has too many decimal places\");\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\n    }\n\n    /**\n     * @notice Function that returns a substring from _startIndex to _endIndex (non-inclusive).\n     *\n     * @param _str           String being processed\n     * @param _startIndex    Index to start parsing from\n     * @param _endIndex      Index to stop parsing at (index not included in result)\n     */\n    function substring(string memory _str, uint _startIndex, uint _endIndex) internal pure returns (string memory ) {\n        bytes memory strBytes = bytes(_str);\n        bytes memory result = new bytes(_endIndex-_startIndex);\n        for(uint i = _startIndex; i < _endIndex; i++) {\n            result[i-_startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n}\n"
    },
    "contracts/mocks/StringConversionUtilsMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract StringConversionUtilsMock {\n\n    using StringConversionUtils for string;\n\n    function stringToUint(string memory _s, uint256 _desiredDecimals) public pure returns (uint256) {\n        return _s.stringToUint(_desiredDecimals);\n    }\n}\n"
    },
    "contracts/mocks/USDCMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\npragma solidity ^0.8.18;\n\ncontract USDCMock is ERC20 {\n\n    constructor(\n        uint256 _mintAmount,\n        string memory name,\n        string memory symbol\n    )\n        ERC20(name, symbol)\n    {\n        _mint(msg.sender, _mintAmount);\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/processors/BaseProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapter } from \"./keyHashAdapters/IKeyHashAdapter.sol\";\nimport { INullifierRegistry } from \"./nullifierRegistries/INullifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract BaseProcessor is Ownable {\n\n    /* ============ Modifiers ============ */\n    modifier onlyRamp() {\n        require(msg.sender == ramp, \"Only Ramp can call this function\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    address public immutable ramp;\n    IKeyHashAdapter public mailserverKeyHashAdapter;\n    INullifierRegistry public nullifierRegistry;\n    bytes public emailFromAddress;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapter _mailserverKeyHashAdapter,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress\n    )\n        Ownable()\n    {\n        ramp = _ramp;\n        mailserverKeyHashAdapter = _mailserverKeyHashAdapter;\n        nullifierRegistry = _nullifierRegistry;\n        emailFromAddress = bytes(_emailFromAddress);\n    }\n\n    /* ============ External Functions ============ */\n\n    function setMailserverKeyHashAdapter(IKeyHashAdapter _mailserverKeyHashAdapter) external onlyOwner {\n        mailserverKeyHashAdapter = _mailserverKeyHashAdapter;\n    }\n\n    /**\n     * @notice ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly\n     * padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\n     *\n     * @param _emailFromAddress    The from email address for validated emails, MUST BE PROPERLY PADDED\n     */\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\n        emailFromAddress = bytes(_emailFromAddress);\n    }\n\n    /* ============ External Getters ============ */\n\n    function getEmailFromAddress() external view returns (bytes memory) {\n        return emailFromAddress;\n    }\n\n    function getMailserverKeyHash() public view returns (bytes32) {\n        return IKeyHashAdapter(mailserverKeyHashAdapter).mailserverKeyHash();\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n}\n"
    },
    "contracts/processors/BaseProcessorV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapterV2 } from \"./keyHashAdapters/IKeyHashAdapterV2.sol\";\nimport { INullifierRegistry } from \"./nullifierRegistries/INullifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract BaseProcessorV2 is Ownable {\n\n    /* ============ Modifiers ============ */\n    modifier onlyRamp() {\n        require(msg.sender == ramp, \"Only Ramp can call this function\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    address public immutable ramp;\n    IKeyHashAdapterV2 public mailServerKeyHashAdapter;\n    INullifierRegistry public nullifierRegistry;\n    bytes public emailFromAddress;\n    uint256 public timestampBuffer;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapterV2 _mailServerKeyHashAdapter,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress,\n        uint256 _timestampBuffer\n    )\n        Ownable()\n    {\n        ramp = _ramp;\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\n        nullifierRegistry = _nullifierRegistry;\n        emailFromAddress = bytes(_emailFromAddress);\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /* ============ External Functions ============ */\n\n    function setMailserverKeyHashAdapter(IKeyHashAdapterV2 _mailServerKeyHashAdapter) external onlyOwner {\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\n    }\n\n    /**\n     * @notice ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly\n     * padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\n     *\n     * @param _emailFromAddress    The from email address for validated emails, MUST BE PROPERLY PADDED\n     */\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\n        emailFromAddress = bytes(_emailFromAddress);\n    }\n\n    /**\n     * @notice ONLY OWNER: Sets the timestamp buffer for validated emails. This is the amount of time in seconds\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2\n     * timestamps.\n     *\n     * @param _timestampBuffer    The timestamp buffer for validated emails\n     */\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /* ============ External Getters ============ */\n\n    function getEmailFromAddress() external view returns (bytes memory) {\n        return emailFromAddress;\n    }\n\n    function isMailServerKeyHash(bytes32 _keyHash) public view returns (bool) {\n        return IKeyHashAdapterV2(mailServerKeyHashAdapter).isMailServerKeyHash(_keyHash);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n}\n"
    },
    "contracts/processors/keyHashAdapters/IKeyHashAdapter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IKeyHashAdapter {\n    function setMailserverKeyHash(bytes32 _mailserverKeyHash) external;\n    function mailserverKeyHash() external view returns (bytes32);\n}\n"
    },
    "contracts/processors/keyHashAdapters/IKeyHashAdapterV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IKeyHashAdapterV2 {\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\n}\n"
    },
    "contracts/processors/keyHashAdapters/ManagedKeyHashAdapter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapter } from \"./IKeyHashAdapter.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ManagedKeyHashAdapter is Ownable, IKeyHashAdapter {\n    \n    /* ============ State Variables ============ */\n\n    bytes32 public mailserverKeyHash;\n\n    /* ============ Constructor ============ */\n\n    constructor(\n        bytes32 _mailserverKeyHash\n    )\n        Ownable()\n    {\n        mailserverKeyHash = _mailserverKeyHash;\n    }\n\n    /* ============ External Functions ============ */\n\n    function setMailserverKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\n        mailserverKeyHash = _mailserverKeyHash;\n    }\n}\n"
    },
    "contracts/processors/keyHashAdapters/ManagedKeyHashAdapterV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapterV2 } from \"./IKeyHashAdapterV2.sol\";\nimport { Bytes32ArrayUtils } from \"../../external/Bytes32ArrayUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ManagedKeyHashAdapterV2 is Ownable, IKeyHashAdapterV2 {\n    \n    using Bytes32ArrayUtils for bytes32[];\n\n    /* ============ Events ============ */\n    event MailServerKeyHashAdded(bytes32 mailserverKeyHash);\n    event MailServerKeyHashRemoved(bytes32 mailserverKeyHash);\n\n    /* ============ State Variables ============ */\n\n    mapping(bytes32 => bool) public isMailServerKeyHash;\n    bytes32[] public mailServerKeyHashes;\n\n    /* ============ Constructor ============ */\n\n    constructor(\n        bytes32[] memory _mailServerKeyHashes\n    )\n        Ownable()\n    {\n        for (uint256 i = 0; i < _mailServerKeyHashes.length; i++) {\n            bytes32 mailserverKeyHash = _mailServerKeyHashes[i];\n            require(!isMailServerKeyHash[mailserverKeyHash], \"Key hash already added\");\n            \n            isMailServerKeyHash[mailserverKeyHash] = true;\n            mailServerKeyHashes.push(mailserverKeyHash);\n        }\n    }\n\n    /* ============ External Functions ============ */\n\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\n        require(!isMailServerKeyHash[_mailserverKeyHash], \"Key hash already added\");\n\n        isMailServerKeyHash[_mailserverKeyHash] = true;\n        mailServerKeyHashes.push(_mailserverKeyHash);\n\n        emit MailServerKeyHashAdded(_mailserverKeyHash);\n    }\n\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\n        require(isMailServerKeyHash[_mailserverKeyHash], \"Key hash not added\");\n\n        isMailServerKeyHash[_mailserverKeyHash] = false;\n        mailServerKeyHashes.removeStorage(_mailserverKeyHash);\n\n        emit MailServerKeyHashRemoved(_mailserverKeyHash);\n    }\n\n    /* ============ External Getter Functions ============ */\n\n    function getMailServerKeyHashes() external view override returns (bytes32[] memory) {\n        return mailServerKeyHashes;\n    }\n}\n"
    },
    "contracts/processors/nullifierRegistries/INullifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface INullifierRegistry {\n    function addNullifier(bytes32 _nullifier) external;\n    function isNullified(bytes32 _nullifier) external view returns(bool);\n}\n"
    },
    "contracts/processors/nullifierRegistries/NullifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AddressArrayUtils } from \"../../external/AddressArrayUtils.sol\";\nimport { INullifierRegistry } from \"./INullifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract NullifierRegistry is Ownable, INullifierRegistry {\n\n    using AddressArrayUtils for address[];\n    \n    /* ============ Events ============ */\n    event NullifierAdded(bytes32 nullifier, address indexed writer);\n    event WriterAdded(address writer);\n    event WriterRemoved(address writer);\n\n    /* ============ Modifiers ============ */\n    modifier onlyWriter() {\n        require(isWriter[msg.sender], \"Only addresses with write permissions can call\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    mapping(bytes32 => bool) public isNullified;\n    mapping(address => bool) public isWriter;\n    address[] public writers;\n\n    /* ============ Constructor ============ */\n    constructor() Ownable() {}\n    \n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY WRITER: Only addresses with permission to write to this contract can call. Stores a nullifier for an email.\n     *\n     * @param _nullifier    The nullifier to store\n     */\n    function addNullifier(bytes32 _nullifier) external onlyWriter {\n        require(!isNullified[_nullifier], \"Nullifier already exists\");\n\n        isNullified[_nullifier] = true;\n\n        emit NullifierAdded(_nullifier, msg.sender);\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * ONLY OWNER: Add address that has write permissions to the registry. Writer must not have been previously added.\n     *\n     * @param _newWriter    The nullifier to store\n     */\n    function addWritePermission(address _newWriter) external onlyOwner {\n        require(!isWriter[_newWriter], \"Address is already a writer\");\n\n        isWriter[_newWriter] = true;\n        writers.push(_newWriter);\n\n        emit WriterAdded(_newWriter);\n    }\n\n    /**\n     * ONLY OWNER: Remove address that has write permissions to the registry. Writer must have been previously added.\n     *\n     * @param _removedWriter    The nullifier to store\n     */\n    function removeWritePermission(address _removedWriter) external onlyOwner {\n        require(isWriter[_removedWriter], \"Address is not a writer\");\n\n        isWriter[_removedWriter] = false;\n        writers.removeStorage(_removedWriter);\n\n        emit WriterRemoved(_removedWriter);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getWriters() external view returns(address[] memory) {\n       return writers;\n    }\n}\n"
    },
    "contracts/ramps/hdfc/HDFCRamp.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { Bytes32ArrayUtils } from \"../../external/Bytes32ArrayUtils.sol\";\nimport { Uint256ArrayUtils } from \"../../external/Uint256ArrayUtils.sol\";\n\nimport { IPoseidon3 } from \"../../interfaces/IPoseidon3.sol\";\nimport { IPoseidon6 } from \"../../interfaces/IPoseidon6.sol\";\nimport { IRegistrationProcessor } from \"./interfaces/IRegistrationProcessor.sol\";\nimport { IHDFCSendProcessor } from \"./interfaces/IHDFCSendProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract HDFCRamp is Ownable {\n\n    using Bytes32ArrayUtils for bytes32[];\n    using Uint256ArrayUtils for uint256[];\n\n    /* ============ Events ============ */\n    event AccountRegistered(address indexed accountOwner, bytes32 indexed idHash);\n    event DepositReceived(\n        uint256 indexed depositId,\n        bytes32 indexed idHash,\n        uint256 amount,\n        uint256 conversionRate\n    );\n    event IntentSignaled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        bytes32 indexed idHash,\n        address to,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event IntentPruned(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId\n    );\n    // Do we want to emit the onRamper or the idHash\n    event IntentFulfilled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        address indexed onRamper,\n        address to,\n        uint256 amount,\n        uint256 feeAmount\n    );\n    event DepositWithdrawn(\n        uint256 indexed depositId,\n        address indexed depositor,\n        uint256 amount\n    );\n\n    event DepositClosed(uint256 depositId, address depositor);\n    event UserAddedToDenylist(bytes32 listOwner, bytes32 deniedUser);\n    event UserRemovedFromDenylist(bytes32 listOwner, bytes32 approvedUser);\n    event MinDepositAmountSet(uint256 minDepositAmount);\n    event MaxOnRampAmountSet(uint256 maxOnRampAmount);\n    event IntentExpirationPeriodSet(uint256 intentExpirationPeriod);\n    event OnRampCooldownPeriodSet(uint256 onRampCooldownPeriod);\n    event SustainabilityFeeUpdated(uint256 fee);\n    event SustainabilityFeeRecipientUpdated(address feeRecipient);\n    event NewSendProcessorSet(address sendProcessor);\n    event NewRegistrationProcessorSet(address registrationProcessor);\n    event NewReceiveProcessorSet(address receiveProcessor);\n\n    /* ============ Structs ============ */\n\n    // Each Account is tied to a GlobalAccount via its associated idHash. Each account is represented by an Ethereum address\n    // and is allowed to have at most 5 deposits associated with it.\n    struct AccountInfo {\n        bytes32 idHash;                     // Hash of payment processor id\n        uint256[] deposits;                 // Array of open account deposits\n    }\n\n    struct Deposit {\n        address depositor;\n        uint256[8] upiId;\n        uint256 depositAmount;              // Amount of USDC deposited\n        uint256 remainingDeposits;          // Amount of remaining deposited liquidity\n        uint256 outstandingIntentAmount;    // Amount of outstanding intents (may include expired intents)\n        uint256 conversionRate;             // Conversion required by off-ramper between USDC/USD\n        bytes32[] intentHashes;             // Array of hashes of all open intents (may include some expired if not pruned)\n    }\n\n    struct DepositWithAvailableLiquidity {\n        uint256 depositId;                  // ID of the deposit\n        bytes32 depositorIdHash;            // Depositor's idHash \n        Deposit deposit;                    // Deposit struct\n        uint256 availableLiquidity;         // Amount of liquidity available to signal intents (net of expired intents)\n    }\n\n    struct Intent {\n        address onRamper;                   // On-ramper's address\n        address to;                         // Address to forward funds to (can be same as onRamper)\n        uint256 deposit;                    // ID of the deposit the intent is signaling on\n        uint256 amount;                     // Amount of USDC the on-ramper signals intent for on-chain\n        uint256 intentTimestamp;            // Timestamp of when the intent was signaled\n    }\n\n    struct IntentWithOnRamperId {\n        bytes32 intentHash;                 // Intent hash\n        Intent intent;                      // Intent struct\n        bytes32 onRamperIdHash;             // Poseidon hash of the on-ramper's idHash\n    }\n\n    struct DenyList {\n        bytes32[] deniedUsers;              // Array of idHashes that are denied from taking depositors liquidity\n        mapping(bytes32 => bool) isDenied;  // Mapping of idHash to boolean indicating if the user is denied\n    }\n\n    // A Global Account is defined as an account represented by one idHash. This is used to enforce limitations on actions across\n    // all Ethereum addresses that are associated with that idHash. In this case we use it to enforce a cooldown period between on ramps,\n    // restrict each HDFC account to one outstanding intent at a time, and to enforce deny lists.\n    struct GlobalAccountInfo {\n        bytes32 currentIntentHash;          // Hash of the current open intent (if exists)\n        uint256 lastOnrampTimestamp;        // Timestamp of the last on-ramp transaction used to check if cooldown period elapsed\n        DenyList denyList;                  // Deny list of the account\n    }\n\n    /* ============ Modifiers ============ */\n    modifier onlyRegisteredUser() {\n        require(accounts[msg.sender].idHash != bytes32(0), \"Caller must be registered user\");\n        _;\n    }\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n    uint256 internal constant MAX_DEPOSITS = 5;       // An account can only have max 5 different deposit parameterizations to prevent locking funds\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant MAX_SUSTAINABILITY_FEE = 5e16;   // 5% max sustainability fee\n    \n    /* ============ State Variables ============ */\n    IERC20 public immutable usdc;                                   // USDC token contract\n    IPoseidon3 public immutable poseidon3;                           // Poseidon hashing contract\n    IPoseidon6 public immutable poseidon6;                          // Poseidon hashing contract\n    IRegistrationProcessor public registrationProcessor;            // Address of registration processor contract, verifies registration e-mails\n    IHDFCSendProcessor public sendProcessor;                        // Address of send processor contract, verifies onRamp emails\n\n    bool public isInitialized;                                      // Indicates if contract has been initialized\n\n    mapping(bytes32 => GlobalAccountInfo) internal globalAccount;   // Mapping of idHash to information used to enforce actions across Ethereum accounts\n    mapping(address => AccountInfo) internal accounts;              // Mapping of Ethereum accounts to their account information (idHash and deposits)\n    mapping(uint256 => Deposit) public deposits;                    // Mapping of depositIds to deposit structs\n    mapping(bytes32 => Intent) public intents;                      // Mapping of intentHashes to intent structs\n\n    uint256 public minDepositAmount;                                // Minimum amount of USDC that can be deposited\n    uint256 public maxOnRampAmount;                                 // Maximum amount of USDC that can be on-ramped in a single transaction\n    uint256 public onRampCooldownPeriod;                            // Time period that must elapse between completing an on-ramp and signaling a new intent\n    uint256 public intentExpirationPeriod;                          // Time period after which an intent can be pruned from the system\n    uint256 public sustainabilityFee;                               // Fee charged to on-rampers in preciseUnits (1e16 = 1%)\n    address public sustainabilityFeeRecipient;                      // Address that receives the sustainability fee\n\n    uint256 public depositCounter;                                  // Counter for depositIds\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        IERC20 _usdc,\n        IPoseidon3 _poseidon3,\n        IPoseidon6 _poseidon6,\n        uint256 _minDepositAmount,\n        uint256 _maxOnRampAmount,\n        uint256 _intentExpirationPeriod,\n        uint256 _onRampCooldownPeriod,\n        uint256 _sustainabilityFee,\n        address _sustainabilityFeeRecipient\n    )\n        Ownable()\n    {\n        usdc = _usdc;\n        poseidon3 = _poseidon3;\n        poseidon6 = _poseidon6;\n        minDepositAmount = _minDepositAmount;\n        maxOnRampAmount = _maxOnRampAmount;\n        intentExpirationPeriod = _intentExpirationPeriod;\n        onRampCooldownPeriod = _onRampCooldownPeriod;\n        sustainabilityFee = _sustainabilityFee;\n        sustainabilityFeeRecipient = _sustainabilityFeeRecipient;\n\n        transferOwnership(_owner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Initialize Ramp with the addresses of the Processors\n     *\n     * @param _registrationProcessor    Registration processor address\n     * @param _sendProcessor            Send processor address\n     */\n    function initialize(\n        IRegistrationProcessor _registrationProcessor,\n        IHDFCSendProcessor _sendProcessor\n    )\n        external\n        onlyOwner\n    {\n        require(!isInitialized, \"Already initialized\");\n\n        registrationProcessor = _registrationProcessor;\n        sendProcessor = _sendProcessor;\n\n        isInitialized = true;\n    }\n\n    /**\n     * @notice Registers a new account by pulling the hash of the account id from the proof and assigning the account owner to the\n     * sender of the transaction. One HDFC account can be registered to multiple Ethereum addresses.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, userIdHash\n     */\n    function register(\n        uint[2] memory _a,\n        uint[2][2] memory _b,\n        uint[2] memory _c,\n        uint[5] memory _signals\n    )\n        external\n    {\n        require(accounts[msg.sender].idHash == bytes32(0), \"Account already associated with idHash\");\n        bytes32 idHash = _verifyRegistrationProof(_a, _b, _c, _signals);\n\n        accounts[msg.sender].idHash = idHash;\n\n        emit AccountRegistered(msg.sender, idHash);\n    }\n\n    /**\n     * @notice Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to\n     * previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\n     * of USDC.\n     *\n     * @param _upiId            The packed upi ID of the depositor\n     * @param _depositAmount    The amount of USDC to off-ramp\n     * @param _receiveAmount    The amount of USD to receive\n     */\n    function offRamp(\n        uint256[8] memory _upiId,\n        uint256 _depositAmount,\n        uint256 _receiveAmount\n    )\n        external\n        onlyRegisteredUser\n    {\n        require(accounts[msg.sender].deposits.length < MAX_DEPOSITS, \"Maximum deposit amount reached\");\n        require(_depositAmount >= minDepositAmount, \"Deposit amount must be greater than min deposit amount\");\n        require(_receiveAmount > 0, \"Receive amount must be greater than 0\");\n\n        uint256 conversionRate = (_depositAmount * PRECISE_UNIT) / _receiveAmount;\n        uint256 depositId = depositCounter++;\n\n        AccountInfo storage account = accounts[msg.sender];\n        account.deposits.push(depositId);\n\n        deposits[depositId] = Deposit({\n            depositor: msg.sender,\n            upiId: _upiId,\n            depositAmount: _depositAmount,\n            remainingDeposits: _depositAmount,\n            outstandingIntentAmount: 0,\n            conversionRate: conversionRate,\n            intentHashes: new bytes32[](0)\n        });\n\n        usdc.transferFrom(msg.sender, address(this), _depositAmount);\n\n        emit DepositReceived(depositId, account.idHash, _depositAmount, conversionRate);\n    }\n\n    /**\n     * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\n     * in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of\n     * address (tracked using idHash). Caller must not be on the depositor's deny list. If there are prunable intents then\n     * they will be deleted from the deposit to be able to maintain state hygiene.\n     *\n     * @param _depositId    The ID of the deposit the on-ramper intends to use for \n     * @param _amount       The amount of USDC the user wants to on-ramp\n     * @param _to           Address to forward funds to (can be same as onRamper)\n     */\n    function signalIntent(uint256 _depositId, uint256 _amount, address _to) external onlyRegisteredUser {\n        bytes32 idHash = accounts[msg.sender].idHash;\n        Deposit storage deposit = deposits[_depositId];\n        bytes32 depositorIdHash = accounts[deposit.depositor].idHash;\n\n        // Caller validity checks\n        require(!globalAccount[depositorIdHash].denyList.isDenied[idHash], \"Onramper on depositor's denylist\");\n        require(\n            globalAccount[idHash].lastOnrampTimestamp + onRampCooldownPeriod <= block.timestamp,\n            \"On ramp cool down period not elapsed\"\n        );\n        require(globalAccount[idHash].currentIntentHash == bytes32(0), \"Intent still outstanding\");\n        require(depositorIdHash != idHash, \"Sender cannot be the depositor\");\n\n        // Intent information checks\n        require(deposit.depositor != address(0), \"Deposit does not exist\");\n        require(_amount > 0, \"Signaled amount must be greater than 0\");\n        require(_amount <= maxOnRampAmount, \"Signaled amount must be less than max on-ramp amount\");\n        require(_to != address(0), \"Cannot send to zero address\");\n\n        bytes32 intentHash = _calculateIntentHash(idHash, _depositId);\n\n        if (deposit.remainingDeposits < _amount) {\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(_depositId);\n\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \"Not enough liquidity\");\n\n            _pruneIntents(deposit, prunableIntents);\n            deposit.remainingDeposits += reclaimableAmount;\n            deposit.outstandingIntentAmount -= reclaimableAmount;\n        }\n\n        intents[intentHash] = Intent({\n            onRamper: msg.sender,\n            to: _to,\n            deposit: _depositId,\n            amount: _amount,\n            intentTimestamp: block.timestamp\n        });\n\n        globalAccount[idHash].currentIntentHash = intentHash;\n\n        deposit.remainingDeposits -= _amount;\n        deposit.outstandingIntentAmount += _amount;\n        deposit.intentHashes.push(intentHash);\n\n        emit IntentSignaled(intentHash, _depositId, idHash, _to, _amount, block.timestamp);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new\n     * intent. Deposit state is updated to reflect the cancelled intent.\n     *\n     * @param _intentHash    Hash of intent being cancelled\n     */\n    function cancelIntent(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        \n        require(intent.intentTimestamp != 0, \"Intent does not exist\");\n        require(\n            accounts[intent.onRamper].idHash == accounts[msg.sender].idHash,\n            \"Sender must be the on-ramper\"\n        );\n\n        Deposit storage deposit = deposits[intent.deposit];\n\n        _pruneIntent(deposit, _intentHash);\n\n        deposit.remainingDeposits += intent.amount;\n        deposit.outstandingIntentAmount -= intent.amount;\n    }\n\n    /**\n     * @notice Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated,\n     * intent is removed, and deposit state is updated. USDC is transferred to the on-ramper.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, timestamp, onRamperIdHash,\n     *                  nullifier, intentHash\n     */\n    function onRamp(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[15] memory _signals\n    )\n        external\n    {\n        (\n            Intent memory intent,\n            Deposit storage deposit,\n            bytes32 intentHash\n        ) = _verifyOnRampProof(_a, _b, _c, _signals);\n\n        _pruneIntent(deposit, intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        globalAccount[accounts[intent.onRamper].idHash].lastOnrampTimestamp = block.timestamp;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        _transferFunds(intentHash, intent);\n    }\n\n    /**\n     * @notice Allows off-ramper to release funds to the on-ramper in case of a failed on-ramp or because of some other arrangement\n     * between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and \n     * deposit state is updated. USDC is transferred to the on-ramper.\n     *\n     * @param _intentHash        Hash of intent to resolve by releasing the funds\n     */\n    function releaseFundsToOnramper(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(intent.onRamper != address(0), \"Intent does not exist\");\n        require(deposit.depositor == msg.sender, \"Caller must be the depositor\");\n\n        _pruneIntent(deposit, _intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        globalAccount[accounts[intent.onRamper].idHash].lastOnrampTimestamp = block.timestamp;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        _transferFunds(_intentHash, intent);\n    }\n\n    /**\n     * @notice Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all\n     * remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be\n     * returned. Deposit will be deleted as long as there are no more outstanding intents.\n     *\n     * @param _depositIds   Array of depositIds the depositor is attempting to withdraw\n     */\n    function withdrawDeposit(uint256[] memory _depositIds) external {\n        uint256 returnAmount;\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit storage deposit = deposits[depositId];\n\n            require(deposit.depositor == msg.sender, \"Sender must be the depositor\");\n\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(depositId);\n\n            _pruneIntents(deposit, prunableIntents);\n\n            returnAmount += deposit.remainingDeposits + reclaimableAmount;\n            \n            deposit.outstandingIntentAmount -= reclaimableAmount;\n\n            emit DepositWithdrawn(depositId, deposit.depositor, deposit.remainingDeposits + reclaimableAmount);\n            \n            delete deposit.remainingDeposits;\n            _closeDepositIfNecessary(depositId, deposit);\n        }\n\n        usdc.transfer(msg.sender, returnAmount);\n    }\n\n    /**\n     * @notice Adds an idHash to a depositor's deny list. If an address associated with the banned idHash attempts to\n     * signal an intent on the user's deposit they will be denied.\n     *\n     * @param _deniedUser   Poseidon hash of the idHash being banned\n     */\n    function addAccountToDenylist(bytes32 _deniedUser) external onlyRegisteredUser {\n        bytes32 denyingUser = accounts[msg.sender].idHash;\n\n        require(!globalAccount[denyingUser].denyList.isDenied[_deniedUser], \"User already on denylist\");\n\n        globalAccount[denyingUser].denyList.isDenied[_deniedUser] = true;\n        globalAccount[denyingUser].denyList.deniedUsers.push(_deniedUser);\n\n        emit UserAddedToDenylist(denyingUser, _deniedUser);\n    }\n\n    /**\n     * @notice Removes a idHash from a depositor's deny list.\n     *\n     * @param _approvedUser   Poseidon hash of the idHash being approved\n     */\n    function removeAccountFromDenylist(bytes32 _approvedUser) external onlyRegisteredUser {\n        bytes32 approvingUser = accounts[msg.sender].idHash;\n\n        require(globalAccount[approvingUser].denyList.isDenied[_approvedUser], \"User not on denylist\");\n\n        globalAccount[approvingUser].denyList.isDenied[_approvedUser] = false;\n        globalAccount[approvingUser].denyList.deniedUsers.removeStorage(_approvedUser);\n\n        emit UserRemovedFromDenylist(approvingUser, _approvedUser);\n    }\n\n    /* ============ Governance Functions ============ */\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the send processor address used for validating and interpreting zk proofs.\n     *\n     * @param _sendProcessor   New send proccesor address\n     */\n    function setSendProcessor(IHDFCSendProcessor _sendProcessor) external onlyOwner {\n        sendProcessor = _sendProcessor;\n        emit NewSendProcessorSet(address(_sendProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the registration processor address used for validating and interpreting zk proofs.\n     *\n     * @param _registrationProcessor   New registration proccesor address\n     */\n    function setRegistrationProcessor(IRegistrationProcessor _registrationProcessor) external onlyOwner {\n        registrationProcessor = _registrationProcessor;\n        emit NewRegistrationProcessorSet(address(_registrationProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\n     *\n     * @param _minDepositAmount   The new minimum deposit amount\n     */\n    function setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\n        require(_minDepositAmount != 0, \"Minimum deposit cannot be zero\");\n\n        minDepositAmount = _minDepositAmount;\n        emit MinDepositAmountSet(_minDepositAmount);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp.\n     *\n     * @param _fee   The new sustainability fee in precise units (10**18, ie 10% = 1e17)\n     */\n    function setSustainabilityFee(uint256 _fee) external onlyOwner {\n        require(_fee <= MAX_SUSTAINABILITY_FEE, \"Fee cannot be greater than max fee\");\n\n        sustainabilityFee = _fee;\n        emit SustainabilityFeeUpdated(_fee);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the recepient of sustainability fees.\n     *\n     * @param _feeRecipient   The new fee recipient address\n     */\n    function setSustainabilityFeeRecipient(address _feeRecipient) external onlyOwner {\n        require(_feeRecipient != address(0), \"Fee recipient cannot be zero address\");\n\n        sustainabilityFeeRecipient = _feeRecipient;\n        emit SustainabilityFeeRecipientUpdated(_feeRecipient);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than\n     * this amount a user must make multiple transactions.\n     *\n     * @param _maxOnRampAmount   The new max on ramp amount\n     */\n    function setMaxOnRampAmount(uint256 _maxOnRampAmount) external onlyOwner {\n        require(_maxOnRampAmount != 0, \"Max on ramp amount cannot be zero\");\n\n        maxOnRampAmount = _maxOnRampAmount;\n        emit MaxOnRampAmountSet(_maxOnRampAmount);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this\n     * amount of time before they can signalIntent to on-ramp again.\n     *\n     * @param _onRampCooldownPeriod   New on-ramp cooldown period\n     */\n    function setOnRampCooldownPeriod(uint256 _onRampCooldownPeriod) external onlyOwner {\n        onRampCooldownPeriod = _onRampCooldownPeriod;\n        emit OnRampCooldownPeriodSet(_onRampCooldownPeriod);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\n     * locking up a depositor's funds.\n     *\n     * @param _intentExpirationPeriod   New intent expiration period\n     */\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\n        require(_intentExpirationPeriod != 0, \"Max intent expiration period cannot be zero\");\n\n        intentExpirationPeriod = _intentExpirationPeriod;\n        emit IntentExpirationPeriodSet(_intentExpirationPeriod);\n    }\n\n\n    /* ============ External View Functions ============ */\n\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\n        return deposits[_depositId];\n    }\n\n    function getAccountInfo(address _account) external view returns (AccountInfo memory) {\n        return accounts[_account];\n    }\n\n    function getIdCurrentIntentHash(address _account) external view returns (bytes32) {\n        return globalAccount[accounts[_account].idHash].currentIntentHash;\n    }\n\n    function getLastOnRampTimestamp(address _account) external view returns (uint256) {\n        return globalAccount[accounts[_account].idHash].lastOnrampTimestamp;\n    }\n\n    function getDeniedUsers(address _account) external view returns (bytes32[] memory) {\n        return globalAccount[accounts[_account].idHash].denyList.deniedUsers;\n    }\n\n    function isDeniedUser(address _account, bytes32 _deniedUser) external view returns (bool) {\n        return globalAccount[accounts[_account].idHash].denyList.isDenied[_deniedUser];\n    }\n\n    function getIntentsWithOnRamperId(bytes32[] calldata _intentHashes) external view returns (IntentWithOnRamperId[] memory) {\n        IntentWithOnRamperId[] memory intentsWithOnRamperId = new IntentWithOnRamperId[](_intentHashes.length);\n\n        for (uint256 i = 0; i < _intentHashes.length; ++i) {\n            bytes32 intentHash = _intentHashes[i];\n            Intent memory intent = intents[intentHash];\n            intentsWithOnRamperId[i] = IntentWithOnRamperId({\n                intentHash: _intentHashes[i],\n                intent: intent,\n                onRamperIdHash: accounts[intent.onRamper].idHash\n            });\n        }\n\n        return intentsWithOnRamperId;\n    }\n\n    function getAccountDeposits(address _account) external view returns (DepositWithAvailableLiquidity[] memory accountDeposits) {\n        uint256[] memory accountDepositIds = accounts[_account].deposits;\n        accountDeposits = new DepositWithAvailableLiquidity[](accountDepositIds.length);\n        \n        for (uint256 i = 0; i < accountDepositIds.length; ++i) {\n            uint256 depositId = accountDepositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            accountDeposits[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                depositorIdHash: accounts[deposit.depositor].idHash,\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n    }\n\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositWithAvailableLiquidity[] memory depositArray) {\n        depositArray = new DepositWithAvailableLiquidity[](_depositIds.length);\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            depositArray[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                depositorIdHash: accounts[deposit.depositor].idHash,\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n\n        return depositArray;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates the intentHash of new intent\n     */\n    function _calculateIntentHash(\n        bytes32 _idHash,\n        uint256 _depositId\n    )\n        internal\n        view\n        virtual\n        returns (bytes32 intentHash)\n    {\n        // Mod with circom prime field to make sure it fits in a 254-bit field\n        uint256 intermediateHash = uint256(keccak256(abi.encodePacked(_idHash, _depositId, block.timestamp)));\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\n    }\n\n    /**\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\n     * the outstanding amounts are summed and returned alongside the intentHashes\n     */\n    function _getPrunableIntents(\n        uint256 _depositId\n    )\n        internal\n        view\n        returns(bytes32[] memory prunableIntents, uint256 reclaimedAmount)\n    {\n        bytes32[] memory intentHashes = deposits[_depositId].intentHashes;\n        prunableIntents = new bytes32[](intentHashes.length);\n\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\n            Intent memory intent = intents[intentHashes[i]];\n            if (intent.intentTimestamp + intentExpirationPeriod < block.timestamp) {\n                prunableIntents[i] = intentHashes[i];\n                reclaimedAmount += intent.amount;\n            }\n        }\n    }\n\n    function _pruneIntents(Deposit storage _deposit, bytes32[] memory _intents) internal {\n        for (uint256 i = 0; i < _intents.length; ++i) {\n            if (_intents[i] != bytes32(0)) {\n                _pruneIntent(_deposit, _intents[i]);\n            }\n        }\n    }\n\n    /**\n     * @notice Pruning an intent involves deleting its state from the intents mapping, zeroing out the intendee's currentIntentHash in\n     * their global account mapping, and deleting the intentHash from the deposit's intentHashes array.\n     */\n    function _pruneIntent(Deposit storage _deposit, bytes32 _intentHash) internal {\n        Intent memory intent = intents[_intentHash];\n\n        delete globalAccount[accounts[intent.onRamper].idHash].currentIntentHash;\n        delete intents[_intentHash];\n        _deposit.intentHashes.removeStorage(_intentHash);\n\n        emit IntentPruned(_intentHash, intent.deposit);\n    }\n\n    /**\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\n     * deposits mapping and removes tracking it in the user's accounts mapping.\n     */\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\n        if (openDepositAmount == 0) {\n            accounts[_deposit.depositor].deposits.removeStorage(_depositId);\n            emit DepositClosed(_depositId, _deposit.depositor);\n            delete deposits[_depositId];\n        }\n    }\n\n    /**\n     * @notice Checks if sustainability fee has been defined, if so sends fee to the fee recipient and intent amount minus fee\n     * to the on-ramper. If sustainability fee is undefined then full intent amount is transferred to on-ramper.\n     */\n    function _transferFunds(bytes32 _intentHash, Intent memory _intent) internal {\n        uint256 fee;\n        if (sustainabilityFee != 0) {\n            fee = (_intent.amount * sustainabilityFee) / PRECISE_UNIT;\n            usdc.transfer(sustainabilityFeeRecipient, fee);\n        }\n\n        uint256 onRampAmount = _intent.amount - fee;\n        usdc.transfer(_intent.to, onRampAmount);\n\n        emit IntentFulfilled(_intentHash, _intent.deposit, _intent.onRamper, _intent.to, onRampAmount, fee);\n    }\n\n    /**\n     * @notice Validate send payment email and check that it hasn't already been used (done on SendProcessor).\n     * Additionally, we validate that the offRamperIdHash matches the one from the specified intent and that enough\n     * was paid off-chain inclusive of the conversionRate.\n     */\n    function _verifyOnRampProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[15] memory _signals\n    )\n        internal\n        returns(Intent memory, Deposit storage, bytes32)\n    {\n        (\n            uint256 amount,\n            uint256 timestamp,\n            bytes32 offRamperIdHash,\n            bytes32 onRamperIdHash,\n            bytes32 intentHash\n        ) = sendProcessor.processProof(\n            IHDFCSendProcessor.SendProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        Intent memory intent = intents[intentHash];\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(intent.onRamper != address(0), \"Intent does not exist\");\n        require(intent.intentTimestamp <= timestamp, \"Intent was not created before send\");\n        require(bytes32(_getUpiIdHash(deposit.upiId)) == offRamperIdHash, \"Offramper id does not match\");\n        require(accounts[intent.onRamper].idHash == onRamperIdHash, \"Onramper id does not match\");\n        require(amount >= (intent.amount * PRECISE_UNIT) / deposit.conversionRate, \"Payment was not enough\");\n\n        return (intent, deposit, intentHash);\n    }\n\n    /**\n     * @notice Validate the user has an HDFC account, we do not nullify this email since it can be reused to register under\n     * different addresses.\n     */\n    function _verifyRegistrationProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[5] memory _signals\n    )\n        internal\n        returns(bytes32)\n    {\n        bytes32 idHash = registrationProcessor.processProof(\n            IRegistrationProcessor.RegistrationProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        return idHash;\n    }\n\n    /**\n     * @notice Returns the poseidon hash of the given raw UPI ID    \n     */\n    function _getUpiIdHash(uint256[8] memory _upiId) internal view returns (bytes32) {\n        uint256[6] memory temp1;\n        uint256[3] memory temp2;\n\n        for (uint256 i = 0; i < 6; ++i) {\n            temp1[i] = _upiId[i];\n        }\n        temp2[0] = poseidon6.poseidon(temp1);\n        temp2[1] = _upiId[6];\n        temp2[2] = _upiId[7];\n\n        return bytes32(poseidon3.poseidon(temp2));\n    }\n}\n"
    },
    "contracts/ramps/hdfc/HDFCRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { StringUtils } from \"@zk-email/contracts/utils/StringUtils.sol\";\n\nimport { BaseProcessorV2 } from \"../../processors/BaseProcessorV2.sol\";\nimport { Groth16Verifier } from \"../../verifiers/hdfc_registration_verifier.sol\";\nimport { IKeyHashAdapterV2 } from \"../../processors/keyHashAdapters/IKeyHashAdapterV2.sol\";\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { IRegistrationProcessor } from \"./interfaces/IRegistrationProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract HDFCRegistrationProcessor is Groth16Verifier, IRegistrationProcessor, BaseProcessorV2 {\n\n    using StringUtils for uint256[];\n\n    /* ============ Constants ============ */\n    uint256 constant public PACK_SIZE = 7;\n    \n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapterV2 _hdfcMailserverKeyHashAdapter,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress,\n        uint256 _timestampBuffer\n    )\n        Groth16Verifier()\n        BaseProcessorV2(\n            _ramp,\n            _hdfcMailserverKeyHashAdapter,\n            _nullifierRegistry,\n            _emailFromAddress,\n            _timestampBuffer\n        )\n    {}\n\n    /* ============ External Functions ============ */\n\n    function processProof(\n        IRegistrationProcessor.RegistrationProof calldata _proof\n    )\n        public\n        override\n        onlyRamp\n        returns(bytes32 userIdHash)\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(isMailServerKeyHash(bytes32(_proof.signals[0])), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        _validateAndAddNullifier(keccak256(abi.encode(_proof)));\n\n        // Signals [4] is the packed userIdHash\n        userIdHash = bytes32(_proof.signals[4]);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[5] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\n    }\n}\n"
    },
    "contracts/ramps/hdfc/HDFCSendProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { StringUtils } from \"@zk-email/contracts/utils/StringUtils.sol\";\n\nimport { BaseProcessorV2 } from \"../../processors/BaseProcessorV2.sol\";\nimport { Groth16Verifier } from \"../../verifiers/hdfc_send_verifier.sol\";\nimport { HDFCTimestampParsing } from \"./lib/HDFCTimestampParsing.sol\";\nimport { IKeyHashAdapterV2 } from \"../../processors/keyHashAdapters/IKeyHashAdapterV2.sol\";\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { IHDFCSendProcessor } from \"./interfaces/IHDFCSendProcessor.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract HDFCSendProcessor is Groth16Verifier, IHDFCSendProcessor, BaseProcessorV2 {\n    \n    using StringUtils for uint256[];\n    using StringConversionUtils for string;\n\n    /* ============ Constants ============ */\n    uint256 constant PACK_SIZE = 7;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapterV2 _hdfcMailserverKeyHashAdapter,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress,\n        uint256 _timestampBuffer\n    )\n        Groth16Verifier()\n        BaseProcessorV2(\n            _ramp,\n            _hdfcMailserverKeyHashAdapter,\n            _nullifierRegistry,\n            _emailFromAddress,\n            _timestampBuffer\n        )\n    {}\n    \n    /* ============ External Functions ============ */\n    function processProof(\n        IHDFCSendProcessor.SendProof calldata _proof\n    )\n        public\n        override\n        onlyRamp\n        returns(\n            uint256 amount,\n            uint256 timestamp,\n            bytes32 offRamperIdHash,\n            bytes32 onRamperIdHash,\n            bytes32 intentHash\n        )\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(isMailServerKeyHash(bytes32(_proof.signals[0])), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        // Signals [4:6] is the packed amount, since this is a USDC amount we want to make sure the returned number is\n        // properly padded to 6 decimals. If the parsed has more than 6 figures to the right of the decimal it will revert\n        amount = _parseSignalArray(_proof.signals, 4, 6).stringToUint(6);\n\n        // Signals [6:11] are the packed timestamp, the timestamp is returned as a string in the format, that we need to\n        // parse and convert to a unix timestamp\n        string memory rawTimestamp = _parseSignalArray(_proof.signals, 6, 11);\n        // Add the buffer to build in flexibility with L2 timestamps\n        timestamp = HDFCTimestampParsing._dateStringToTimestamp(rawTimestamp) + timestampBuffer;\n\n        // Signals [11] is the packed onRamperIdHash\n        onRamperIdHash = bytes32(_proof.signals[11]);\n\n        // Signals [12] is the packed offRamper UPI ID hash\n        offRamperIdHash = bytes32(_proof.signals[12]);\n\n        // Check if email has been used previously, if not nullify it so it can't be used again\n        _validateAndAddNullifier(bytes32(_proof.signals[13]));\n\n        // Signals [14] is intentHash\n        intentHash = bytes32(_proof.signals[14]);\n    }\n    \n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[15] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\n    }\n}\n"
    },
    "contracts/ramps/hdfc/interfaces/IHDFCSendProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IHDFCSendProcessor {\n\n    struct SendProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[15] signals;\n    }\n\n    function processProof(\n        SendProof calldata _proof\n    )\n        external\n    returns(uint256, uint256, bytes32, bytes32, bytes32);\n}\n"
    },
    "contracts/ramps/hdfc/interfaces/IRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IRegistrationProcessor {\n\n    struct RegistrationProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[5] signals;\n    }\n\n    function processProof(\n        RegistrationProof calldata _proof\n    )\n        external\n    returns (bytes32);\n}\n"
    },
    "contracts/ramps/hdfc/lib/HDFCTimestampParsing.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { DateTime } from \"../../../external/DateTime.sol\";\n\nimport { StringConversionUtils } from \"../../../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\nlibrary HDFCTimestampParsing {\n\n    using StringConversionUtils for string;\n\n    /**\n     * @notice Iterates through every character in the date string and splits the string at each space or colon. Function will revert\n     * if there are not 8 substrings formed from the split. The substrings are then converted to uints and passed to the DateTime lib\n     * to get the unix timestamp. This function is specific to the date format used by HDFC, not suitable for use with other date formats.\n     */\n    function _dateStringToTimestamp(string memory _dateString) internal pure returns (uint256) {\n        string[8] memory extractedStrings;\n        uint256 breakCounter;\n        uint256 lastBreak;\n        for (uint256 i = 0; i < bytes(_dateString).length; i++) {\n            if (bytes(_dateString)[i] == 0x20 || bytes(_dateString)[i] == 0x3a) {\n                extractedStrings[breakCounter] = _dateString.substring(lastBreak, i);\n                lastBreak = i + 1;\n                breakCounter++;\n            }\n        }\n        // Add last substring to array\n        extractedStrings[breakCounter] = _dateString.substring(lastBreak, bytes(_dateString).length);\n\n        // Check that exactly 8 substrings were found (string is split at 7 different places)\n        require(breakCounter == 7, \"Invalid date string\");\n\n        uint256 unOffsetTimestamp = DateTime.timestampFromDateTime(\n            extractedStrings[3].stringToUint(0), // year\n            _parseMonth(extractedStrings[2]), // month\n            extractedStrings[1].stringToUint(0), // day\n            extractedStrings[4].stringToUint(0), // hour\n            extractedStrings[5].stringToUint(0), // minute\n            extractedStrings[6].stringToUint(0) // second\n        );\n\n        return _calculateTimestampWithOffset(unOffsetTimestamp, extractedStrings[7]);\n    }\n\n    /**\n     * @notice Adds or subtracts an offset from the calculated unOffset timestamp based on the timezone offset string. The timezone offset\n     * string is of the format \"+0530\" or \"-0530\" where the first character is either a \"+\" or a \"-\" and the next 4 characters are hhmm. If\n     * the _timeOffsetString is \"+0530\" then we subtract 5 hours and 30 minutes (19800s) from the unOffset timestamp, to get a GMT timestamp.\n     * We constrain the _timeOffsetString to be 5 characters long to be of the format +/-hhmm.\n     *\n     * @param unOffsetTimestamp     The unix timestamp without any timezone offset applied\n     * @param _timeOffsetString     The timezone offset string indicating the magnitude and direction of the timezone offset\n     */\n    function _calculateTimestampWithOffset(uint256 unOffsetTimestamp, string memory _timeOffsetString) internal pure returns (uint256) {\n        require(bytes(_timeOffsetString).length == 5, \"Invalid timezone offset\");\n        uint256 tzHours = _timeOffsetString.substring(1, 3).stringToUint(0);\n        uint256 tzMinutes = _timeOffsetString.substring(3, 5).stringToUint(0);\n\n        uint256 rawOffset = tzHours * 3600 + tzMinutes * 60;\n\n        // Check if tz offset is positive or negative relative to GMT, 0x2b is the hex value for \"+\" meaning the tz is ahead of GMT and must\n        // be subtracted\n        bytes1 _offsetDirection = bytes(_timeOffsetString.substring(0, 1))[0];\n        return _offsetDirection == 0x2b ? unOffsetTimestamp - rawOffset : unOffsetTimestamp + rawOffset;\n    }\n\n    function _parseMonth(string memory _month) internal pure returns (uint256) {\n        if (keccak256(abi.encodePacked(_month)) == keccak256(\"Jan\")) {\n            return 1;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Feb\")) {\n            return 2;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Mar\")) {\n            return 3;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Apr\")) {\n            return 4;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"May\")) {\n            return 5;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Jun\")) {\n            return 6;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Jul\")) {\n            return 7;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Aug\")) {\n            return 8;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Sep\")) {\n            return 9;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Oct\")) {\n            return 10;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Nov\")) {\n            return 11;\n        } else if (keccak256(abi.encodePacked(_month)) == keccak256(\"Dec\")) {\n            return 12;\n        } else {\n            revert(\"Invalid month\");\n        }\n    }\n}\n"
    },
    "contracts/ramps/hdfc/mocks/HDFCRegistrationProcessorMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IRegistrationProcessor } from \"../interfaces/IRegistrationProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract HDFCRegistrationProcessorMock is IRegistrationProcessor {\n\n    /* ============ Constructor ============ */\n    constructor() {}\n\n    /* ============ External View Functions ============ */\n    function processProof(\n        RegistrationProof calldata _proof\n    )\n        public\n        pure\n        override\n        returns(bytes32 userIdHash)\n    {\n        return(bytes32(_proof.signals[1]));\n    }\n}\n"
    },
    "contracts/ramps/hdfc/mocks/HDFCSendProcessorMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IHDFCSendProcessor } from \"../interfaces/IHDFCSendProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract HDFCSendProcessorMock is IHDFCSendProcessor {\n\n    /* ============ Constructor ============ */\n    constructor() {}\n\n    /* ============ External View Functions ============ */\n    function processProof(\n        SendProof calldata _proof\n    )\n        public\n        pure\n        override\n        returns(uint256 amount, uint256 timestamp, bytes32 onRamperIdHash, bytes32 offRamperIdHash, bytes32 intentHash)\n    {\n        return(\n            _proof.signals[0],\n            _proof.signals[1],\n            bytes32(_proof.signals[2]),\n            bytes32(_proof.signals[3]),\n            bytes32(_proof.signals[4])\n        );\n    }\n}\n"
    },
    "contracts/ramps/hdfc/mocks/HDFCTimestampParsingMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { HDFCTimestampParsing } from \"../lib/HDFCTimestampParsing.sol\";\n\npragma solidity ^0.8.18;\n\ncontract HDFCTimestampParsingMock {\n\n    /**\n     * @notice Iterates through every character in the date string and splits the string at each space or colon. Function will revert\n     * if there are not 8 substrings formed from the split. The substrings are then converted to uints and passed to the DateTime lib\n     * to get the unix timestamp. This function is specific to the date format used by HDFC, not suitable for use with other date formats.\n     */\n    function dateStringToTimestamp(string memory _dateString) external pure returns (uint256) {\n        return HDFCTimestampParsing._dateStringToTimestamp(_dateString);\n    }\n\n    /**\n     * @notice Adds or subtracts an offset from the calculated unOffset timestamp based on the timezone offset string. The timezone offset\n     * string is of the format \"+0530\" or \"-0530\" where the first character is either a \"+\" or a \"-\" and the next 4 characters are hhmm. If\n     * the _timeOffsetString is \"+0530\" then we subtract 5 hours and 30 minutes (19800s) from the unOffset timestamp, to get a GMT timestamp.\n     * We constrain the _timeOffsetString to be 5 characters long to be of the format +/-hhmm.\n     *\n     * @param unOffsetTimestamp     The unix timestamp without any timezone offset applied\n     * @param _timeOffsetString     The timezone offset string indicating the magnitude and direction of the timezone offset\n     */\n    function _calculateTimestampWithOffset(uint256 unOffsetTimestamp, string memory _timeOffsetString) external pure returns (uint256) {\n        return HDFCTimestampParsing._calculateTimestampWithOffset(unOffsetTimestamp, _timeOffsetString);\n    }\n\n    function _parseMonth(string memory _month) external pure returns (uint256) {\n        return HDFCTimestampParsing._parseMonth(_month);\n    }\n}\n"
    },
    "contracts/ramps/venmo-v1/interfaces/IRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IRegistrationProcessor {\n\n    struct RegistrationProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[5] signals;\n    }\n\n    function processProof(\n        RegistrationProof calldata _proof\n    )\n        external\n        view\n    returns (bytes32);\n}\n"
    },
    "contracts/ramps/venmo-v1/interfaces/ISendProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface ISendProcessor {\n\n    struct SendProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[12] signals;\n    }\n\n    function processProof(\n        SendProof calldata _proof\n    )\n        external\n    returns(uint256, uint256, bytes32, bytes32, bytes32);\n}\n"
    },
    "contracts/ramps/venmo-v1/mocks/VenmoRegistrationProcessorMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IRegistrationProcessor } from \"../interfaces/IRegistrationProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoRegistrationProcessorMock is IRegistrationProcessor {\n\n    /* ============ Constructor ============ */\n    constructor() {}\n\n    /* ============ External View Functions ============ */\n    function processProof(\n        RegistrationProof calldata _proof\n    )\n        public\n        pure\n        override\n        returns(bytes32 onRamperIdHash)\n    {\n        return(bytes32(_proof.signals[1]));\n    }\n}\n"
    },
    "contracts/ramps/venmo-v1/mocks/VenmoSendProcessorMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ISendProcessor } from \"../interfaces/ISendProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoSendProcessorMock is ISendProcessor {\n\n    /* ============ Constructor ============ */\n    constructor() {}\n\n    /* ============ External View Functions ============ */\n    function processProof(\n        SendProof calldata _proof\n    )\n        public\n        pure\n        override\n        returns(uint256 amount, uint256 timestamp, bytes32 offRamperIdHash, bytes32 onRamperIdHash, bytes32 intentHash)\n    {\n        return(_proof.signals[0], _proof.signals[1], bytes32(_proof.signals[2]), bytes32(_proof.signals[3]), bytes32(_proof.signals[4]));\n    }\n}\n"
    },
    "contracts/ramps/venmo-v1/Ramp.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { Bytes32ArrayUtils } from \"../../external/Bytes32ArrayUtils.sol\";\nimport { Uint256ArrayUtils } from \"../../external/Uint256ArrayUtils.sol\";\n\nimport { IPoseidon } from \"../../interfaces/IPoseidon.sol\";\nimport { IRegistrationProcessor } from \"./interfaces/IRegistrationProcessor.sol\";\nimport { ISendProcessor } from \"./interfaces/ISendProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract Ramp is Ownable {\n\n    using Bytes32ArrayUtils for bytes32[];\n    using Uint256ArrayUtils for uint256[];\n\n    /* ============ Events ============ */\n    event AccountRegistered(address indexed accountOwner, bytes32 indexed venmoIdHash);\n    event DepositReceived(\n        uint256 indexed depositId,\n        bytes32 indexed venmoId,\n        uint256 amount,\n        uint256 conversionRate\n    );\n    event IntentSignaled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        bytes32 indexed venmoId,\n        address to,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event IntentPruned(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId\n    );\n    // Do we want to emit the onRamper or the venmoId\n    event IntentFulfilled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        address indexed onRamper,\n        address to,\n        uint256 amount,\n        uint256 feeAmount\n    );\n    // Do we want to emit the depositor or the venmoId\n    event DepositWithdrawn(\n        uint256 indexed depositId,\n        address indexed depositor,\n        uint256 amount\n    );\n\n    event DepositClosed(uint256 depositId, address depositor);\n    event UserAddedToDenylist(bytes32 listOwner, bytes32 deniedUser);\n    event UserRemovedFromDenylist(bytes32 listOwner, bytes32 approvedUser);\n    event MinDepositAmountSet(uint256 minDepositAmount);\n    event MaxOnRampAmountSet(uint256 maxOnRampAmount);\n    event IntentExpirationPeriodSet(uint256 intentExpirationPeriod);\n    event OnRampCooldownPeriodSet(uint256 onRampCooldownPeriod);\n    event SustainabilityFeeUpdated(uint256 fee);\n    event SustainabilityFeeRecipientUpdated(address feeRecipient);\n    event NewSendProcessorSet(address sendProcessor);\n    event NewRegistrationProcessorSet(address registrationProcessor);\n    event NewReceiveProcessorSet(address receiveProcessor);\n\n    /* ============ Structs ============ */\n\n    // Each Account is tied to a GlobalAccount via its associated venmoIdHash. Each account is represented by an Ethereum address\n    // and is allowed to have at most 5 deposits associated with it.\n    struct AccountInfo {\n        bytes32 venmoIdHash;                // Poseidon hash of account's venmoId\n        uint256[] deposits;                 // Array of open account deposits\n    }\n\n    struct Deposit {\n        address depositor;\n        uint256[3] packedVenmoId;\n        uint256 depositAmount;              // Amount of USDC deposited\n        uint256 remainingDeposits;          // Amount of remaining deposited liquidity\n        uint256 outstandingIntentAmount;    // Amount of outstanding intents (may include expired intents)\n        uint256 conversionRate;             // Conversion required by off-ramper between USDC/USD\n        bytes32[] intentHashes;             // Array of hashes of all open intents (may include some expired if not pruned)\n    }\n\n    struct DepositWithAvailableLiquidity {\n        uint256 depositId;                  // ID of the deposit\n        Deposit deposit;                    // Deposit struct\n        uint256 availableLiquidity;         // Amount of liquidity available to signal intents (net of expired intents)\n    }\n\n    struct Intent {\n        address onRamper;                   // On-ramper's address\n        address to;                         // Address to forward funds to (can be same as onRamper)\n        uint256 deposit;                    // ID of the deposit the intent is signaling on\n        uint256 amount;                     // Amount of USDC the on-ramper signals intent for on-chain\n        uint256 intentTimestamp;            // Timestamp of when the intent was signaled\n    }\n\n    struct IntentWithOnRamperId {\n        Intent intent;                      // Intent struct\n        bytes32 onRamperIdHash;             // Poseidon hash of the on-ramper's venmoId\n    }\n\n    struct DenyList {\n        bytes32[] deniedUsers;              // Array of venmoIdHashes that are denied from taking depositors liquidity\n        mapping(bytes32 => bool) isDenied;  // Mapping of venmoIdHash to boolean indicating if the user is denied\n    }\n\n    // A Global Account is defined as an account represented by one venmoIdHash. This is used to enforce limitations on actions across\n    // all Ethereum addresses that are associated with that venmoId. In this case we use it to enforce a cooldown period between on ramps,\n    // restrict each venmo account to one outstanding intent at a time, and to enforce deny lists.\n    struct GlobalAccountInfo {\n        bytes32 currentIntentHash;          // Hash of the current open intent (if exists)\n        uint256 lastOnrampTimestamp;        // Timestamp of the last on-ramp transaction used to check if cooldown period elapsed\n        DenyList denyList;                  // Deny list of the account\n    }\n\n    /* ============ Modifiers ============ */\n    modifier onlyRegisteredUser() {\n        require(accounts[msg.sender].venmoIdHash != bytes32(0), \"Caller must be registered user\");\n        _;\n    }\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n    uint256 internal constant MAX_DEPOSITS = 5;       // An account can only have max 5 different deposit parameterizations to prevent locking funds\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant MAX_SUSTAINABILITY_FEE = 5e16;   // 5% max sustainability fee\n    \n    /* ============ State Variables ============ */\n    IERC20 public immutable usdc;                                   // USDC token contract\n    IPoseidon public immutable poseidon;                            // Poseidon hashing contract\n    IRegistrationProcessor public registrationProcessor;            // Address of registration processor contract, verifies registration e-mails\n    ISendProcessor public sendProcessor;                            // Address of send processor contract, verifies onRamp emails\n\n    bool internal isInitialized;                                    // Indicates if contract has been initialized\n\n    mapping(bytes32 => GlobalAccountInfo) internal globalAccount;   // Mapping of venmoIdHash to information used to enforce actions across Ethereum accounts\n    mapping(address => AccountInfo) internal accounts;              // Mapping of Ethereum accounts to their account information (venmoIdHash and deposits)\n    mapping(uint256 => Deposit) public deposits;                    // Mapping of depositIds to deposit structs\n    mapping(bytes32 => Intent) public intents;                      // Mapping of intentHashes to intent structs\n\n    uint256 public minDepositAmount;                                // Minimum amount of USDC that can be deposited\n    uint256 public maxOnRampAmount;                                 // Maximum amount of USDC that can be on-ramped in a single transaction\n    uint256 public onRampCooldownPeriod;                            // Time period that must elapse between completing an on-ramp and signaling a new intent\n    uint256 public intentExpirationPeriod;                          // Time period after which an intent can be pruned from the system\n    uint256 public sustainabilityFee;                               // Fee charged to on-rampers in preciseUnits (1e16 = 1%)\n    address public sustainabilityFeeRecipient;                      // Address that receives the sustainability fee\n\n    uint256 public depositCounter;                                  // Counter for depositIds\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        IERC20 _usdc,\n        IPoseidon _poseidon,\n        uint256 _minDepositAmount,\n        uint256 _maxOnRampAmount,\n        uint256 _intentExpirationPeriod,\n        uint256 _onRampCooldownPeriod,\n        uint256 _sustainabilityFee,\n        address _sustainabilityFeeRecipient\n    )\n        Ownable()\n    {\n        usdc = _usdc;\n        poseidon = _poseidon;\n        minDepositAmount = _minDepositAmount;\n        maxOnRampAmount = _maxOnRampAmount;\n        intentExpirationPeriod = _intentExpirationPeriod;\n        onRampCooldownPeriod = _onRampCooldownPeriod;\n        sustainabilityFee = _sustainabilityFee;\n        sustainabilityFeeRecipient = _sustainabilityFeeRecipient;\n\n        transferOwnership(_owner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Initialize Ramp with the addresses of the Processors\n     *\n     * @param _registrationProcessor    Registration processor address\n     * @param _sendProcessor            Send processor address\n     */\n    function initialize(\n        IRegistrationProcessor _registrationProcessor,\n        ISendProcessor _sendProcessor\n    )\n        external\n        onlyOwner\n    {\n        require(!isInitialized, \"Already initialized\");\n\n        registrationProcessor = _registrationProcessor;\n        sendProcessor = _sendProcessor;\n\n        isInitialized = true;\n    }\n\n    /**\n     * @notice Registers a new account by pulling the hash of the account id from the proof and assigning the account owner to the\n     * sender of the transaction. One venmo account can be registered to multiple Ethereum addresses.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, userIdHash\n     */\n    function register(\n        uint[2] memory _a,\n        uint[2][2] memory _b,\n        uint[2] memory _c,\n        uint[5] memory _signals\n    )\n        external\n    {\n        require(accounts[msg.sender].venmoIdHash == bytes32(0), \"Account already associated with venmoId\");\n        bytes32 venmoIdHash = _verifyRegistrationProof(_a, _b, _c, _signals);\n\n        accounts[msg.sender].venmoIdHash = venmoIdHash;\n\n        emit AccountRegistered(msg.sender, venmoIdHash);\n    }\n\n    /**\n     * @notice Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to\n     * previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\n     * of USDC.\n     *\n     * @param _packedVenmoId    The packed venmo id of the account owner (we pack for easy use with poseidon)\n     * @param _depositAmount    The amount of USDC to off-ramp\n     * @param _receiveAmount    The amount of USD to receive\n     */\n    function offRamp(\n        uint256[3] memory _packedVenmoId,\n        uint256 _depositAmount,\n        uint256 _receiveAmount\n    )\n        external\n        onlyRegisteredUser\n    {\n        bytes32 venmoIdHash = bytes32(poseidon.poseidon(_packedVenmoId));\n\n        require(accounts[msg.sender].venmoIdHash == venmoIdHash, \"Sender must be the account owner\");\n        require(accounts[msg.sender].deposits.length < MAX_DEPOSITS, \"Maximum deposit amount reached\");\n        require(_depositAmount >= minDepositAmount, \"Deposit amount must be greater than min deposit amount\");\n        require(_receiveAmount > 0, \"Receive amount must be greater than 0\");\n\n        uint256 conversionRate = (_depositAmount * PRECISE_UNIT) / _receiveAmount;\n        uint256 depositId = depositCounter++;\n\n        accounts[msg.sender].deposits.push(depositId);\n\n        deposits[depositId] = Deposit({\n            depositor: msg.sender,\n            packedVenmoId: _packedVenmoId,\n            depositAmount: _depositAmount,\n            remainingDeposits: _depositAmount,\n            outstandingIntentAmount: 0,\n            conversionRate: conversionRate,\n            intentHashes: new bytes32[](0)\n        });\n\n        usdc.transferFrom(msg.sender, address(this), _depositAmount);\n\n        emit DepositReceived(depositId, venmoIdHash, _depositAmount, conversionRate);\n    }\n\n    /**\n     * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\n     * in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of\n     * address (tracked using venmoId). Caller must not be on the depositor's deny list. If there are prunable intents then\n     * they will be deleted from the deposit to be able to maintain state hygiene.\n     *\n     * @param _depositId    The ID of the deposit the on-ramper intends to use for \n     * @param _amount       The amount of USDC the user wants to on-ramp\n     * @param _to           Address to forward funds to (can be same as onRamper)\n     */\n    function signalIntent(uint256 _depositId, uint256 _amount, address _to) external onlyRegisteredUser {\n        bytes32 venmoIdHash = accounts[msg.sender].venmoIdHash;\n        Deposit storage deposit = deposits[_depositId];\n        bytes32 depositorVenmoIdHash = accounts[deposit.depositor].venmoIdHash;\n\n        // Caller validity checks\n        require(!globalAccount[depositorVenmoIdHash].denyList.isDenied[venmoIdHash], \"Onramper on depositor's denylist\");\n        require(\n            globalAccount[venmoIdHash].lastOnrampTimestamp + onRampCooldownPeriod <= block.timestamp,\n            \"On ramp cool down period not elapsed\"\n        );\n        require(globalAccount[venmoIdHash].currentIntentHash == bytes32(0), \"Intent still outstanding\");\n        require(depositorVenmoIdHash != venmoIdHash, \"Sender cannot be the depositor\");\n\n        // Intent information checks\n        require(deposit.depositor != address(0), \"Deposit does not exist\");\n        require(_amount > 0, \"Signaled amount must be greater than 0\");\n        require(_amount <= maxOnRampAmount, \"Signaled amount must be less than max on-ramp amount\");\n        require(_to != address(0), \"Cannot send to zero address\");\n\n        bytes32 intentHash = _calculateIntentHash(venmoIdHash, _depositId);\n\n        if (deposit.remainingDeposits < _amount) {\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(_depositId);\n\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \"Not enough liquidity\");\n\n            _pruneIntents(deposit, prunableIntents);\n            deposit.remainingDeposits += reclaimableAmount;\n            deposit.outstandingIntentAmount -= reclaimableAmount;\n        }\n\n        intents[intentHash] = Intent({\n            onRamper: msg.sender,\n            to: _to,\n            deposit: _depositId,\n            amount: _amount,\n            intentTimestamp: block.timestamp\n        });\n\n        globalAccount[venmoIdHash].currentIntentHash = intentHash;\n\n        deposit.remainingDeposits -= _amount;\n        deposit.outstandingIntentAmount += _amount;\n        deposit.intentHashes.push(intentHash);\n\n        emit IntentSignaled(intentHash, _depositId, venmoIdHash, _to, _amount, block.timestamp);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new\n     * intent. Deposit state is updated to reflect the cancelled intent.\n     *\n     * @param _intentHash    Hash of intent being cancelled\n     */\n    function cancelIntent(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        \n        require(intent.intentTimestamp != 0, \"Intent does not exist\");\n        require(intent.onRamper == msg.sender, \"Sender must be the on-ramper\");\n\n        Deposit storage deposit = deposits[intent.deposit];\n\n        _pruneIntent(deposit, _intentHash);\n\n        deposit.remainingDeposits += intent.amount;\n        deposit.outstandingIntentAmount -= intent.amount;\n    }\n\n    /**\n     * @notice Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated,\n     * intent is removed, and deposit state is updated. USDC is transferred to the on-ramper.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, timestamp, onRamperIdHash,\n     *                  nullifier, intentHash\n     */\n    function onRamp(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[12] memory _signals\n    )\n        external\n    {\n        (\n            Intent memory intent,\n            Deposit storage deposit,\n            bytes32 intentHash\n        ) = _verifyOnRampProof(_a, _b, _c, _signals);\n\n        _pruneIntent(deposit, intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        globalAccount[accounts[intent.onRamper].venmoIdHash].lastOnrampTimestamp = block.timestamp;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        _transferFunds(intentHash, intent);\n    }\n\n    /**\n     * @notice Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all\n     * remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be\n     * returned. Deposit will be deleted as long as there are no more outstanding intents.\n     *\n     * @param _depositIds   Array of depositIds the depositor is attempting to withdraw\n     */\n    function withdrawDeposit(uint256[] memory _depositIds) external {\n        uint256 returnAmount;\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit storage deposit = deposits[depositId];\n\n            require(deposit.depositor == msg.sender, \"Sender must be the depositor\");\n\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(depositId);\n\n            _pruneIntents(deposit, prunableIntents);\n\n            returnAmount += deposit.remainingDeposits + reclaimableAmount;\n            \n            deposit.outstandingIntentAmount -= reclaimableAmount;\n\n            emit DepositWithdrawn(depositId, deposit.depositor, deposit.remainingDeposits + reclaimableAmount);\n            \n            delete deposit.remainingDeposits;\n            _closeDepositIfNecessary(depositId, deposit);\n        }\n\n        usdc.transfer(msg.sender, returnAmount);\n    }\n\n    /**\n     * @notice Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to\n     * signal an intent on the user's deposit they will be denied.\n     *\n     * @param _deniedUser   Poseidon hash of the venmoId being banned\n     */\n    function addAccountToDenylist(bytes32 _deniedUser) external onlyRegisteredUser {\n        bytes32 denyingUser = accounts[msg.sender].venmoIdHash;\n\n        require(!globalAccount[denyingUser].denyList.isDenied[_deniedUser], \"User already on denylist\");\n\n        globalAccount[denyingUser].denyList.isDenied[_deniedUser] = true;\n        globalAccount[denyingUser].denyList.deniedUsers.push(_deniedUser);\n\n        emit UserAddedToDenylist(denyingUser, _deniedUser);\n    }\n\n    /**\n     * @notice Removes a venmoId from a depositor's deny list.\n     *\n     * @param _approvedUser   Poseidon hash of the venmoId being approved\n     */\n    function removeAccountFromDenylist(bytes32 _approvedUser) external onlyRegisteredUser {\n        bytes32 approvingUser = accounts[msg.sender].venmoIdHash;\n\n        require(globalAccount[approvingUser].denyList.isDenied[_approvedUser], \"User not on denylist\");\n\n        globalAccount[approvingUser].denyList.isDenied[_approvedUser] = false;\n        globalAccount[approvingUser].denyList.deniedUsers.removeStorage(_approvedUser);\n\n        emit UserRemovedFromDenylist(approvingUser, _approvedUser);\n    }\n\n    /* ============ Governance Functions ============ */\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the send processor address used for validating and interpreting zk proofs.\n     *\n     * @param _sendProcessor   New send proccesor address\n     */\n    function setSendProcessor(ISendProcessor _sendProcessor) external onlyOwner {\n        sendProcessor = _sendProcessor;\n        emit NewSendProcessorSet(address(_sendProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the registration processor address used for validating and interpreting zk proofs.\n     *\n     * @param _registrationProcessor   New registration proccesor address\n     */\n    function setRegistrationProcessor(IRegistrationProcessor _registrationProcessor) external onlyOwner {\n        registrationProcessor = _registrationProcessor;\n        emit NewRegistrationProcessorSet(address(_registrationProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\n     *\n     * @param _minDepositAmount   The new minimum deposit amount\n     */\n    function setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\n        require(_minDepositAmount != 0, \"Minimum deposit cannot be zero\");\n\n        minDepositAmount = _minDepositAmount;\n        emit MinDepositAmountSet(_minDepositAmount);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp.\n     *\n     * @param _fee   The new sustainability fee in precise units (10**18, ie 10% = 1e17)\n     */\n    function setSustainabilityFee(uint256 _fee) external onlyOwner {\n        require(_fee <= MAX_SUSTAINABILITY_FEE, \"Fee cannot be greater than max fee\");\n\n        sustainabilityFee = _fee;\n        emit SustainabilityFeeUpdated(_fee);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the recepient of sustainability fees.\n     *\n     * @param _feeRecipient   The new fee recipient address\n     */\n    function setSustainabilityFeeRecipient(address _feeRecipient) external onlyOwner {\n        require(_feeRecipient != address(0), \"Fee recipient cannot be zero address\");\n\n        sustainabilityFeeRecipient = _feeRecipient;\n        emit SustainabilityFeeRecipientUpdated(_feeRecipient);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than\n     * this amount a user must make multiple transactions.\n     *\n     * @param _maxOnRampAmount   The new max on ramp amount\n     */\n    function setMaxOnRampAmount(uint256 _maxOnRampAmount) external onlyOwner {\n        require(_maxOnRampAmount != 0, \"Max on ramp amount cannot be zero\");\n\n        maxOnRampAmount = _maxOnRampAmount;\n        emit MaxOnRampAmountSet(_maxOnRampAmount);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this\n     * amount of time before they can signalIntent to on-ramp again.\n     *\n     * @param _onRampCooldownPeriod   New on-ramp cooldown period\n     */\n    function setOnRampCooldownPeriod(uint256 _onRampCooldownPeriod) external onlyOwner {\n        onRampCooldownPeriod = _onRampCooldownPeriod;\n        emit OnRampCooldownPeriodSet(_onRampCooldownPeriod);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\n     * locking up a depositor's funds.\n     *\n     * @param _intentExpirationPeriod   New intent expiration period\n     */\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\n        require(_intentExpirationPeriod != 0, \"Max intent expiration period cannot be zero\");\n\n        intentExpirationPeriod = _intentExpirationPeriod;\n        emit IntentExpirationPeriodSet(_intentExpirationPeriod);\n    }\n\n\n    /* ============ External View Functions ============ */\n\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\n        return deposits[_depositId];\n    }\n\n    function getAccountInfo(address _account) external view returns (AccountInfo memory) {\n        return accounts[_account];\n    }\n\n    function getVenmoIdCurrentIntentHash(address _account) external view returns (bytes32) {\n        return globalAccount[accounts[_account].venmoIdHash].currentIntentHash;\n    }\n\n    function getLastOnRampTimestamp(address _account) external view returns (uint256) {\n        return globalAccount[accounts[_account].venmoIdHash].lastOnrampTimestamp;\n    }\n\n    function getDeniedUsers(address _account) external view returns (bytes32[] memory) {\n        return globalAccount[accounts[_account].venmoIdHash].denyList.deniedUsers;\n    }\n\n    function isDeniedUser(address _account, bytes32 _deniedUser) external view returns (bool) {\n        return globalAccount[accounts[_account].venmoIdHash].denyList.isDenied[_deniedUser];\n    }\n\n    function getIntentsWithOnRamperId(bytes32[] calldata _intentHashes) external view returns (IntentWithOnRamperId[] memory) {\n        IntentWithOnRamperId[] memory intentsWithOnRamperId = new IntentWithOnRamperId[](_intentHashes.length);\n\n        for (uint256 i = 0; i < _intentHashes.length; ++i) {\n            Intent memory intent = intents[_intentHashes[i]];\n            intentsWithOnRamperId[i] = IntentWithOnRamperId({\n                intent: intent,\n                onRamperIdHash: accounts[intent.onRamper].venmoIdHash\n            });\n        }\n\n        return intentsWithOnRamperId;\n    }\n\n    function getAccountDeposits(address _account) external view returns (DepositWithAvailableLiquidity[] memory accountDeposits) {\n        uint256[] memory accountDepositIds = accounts[_account].deposits;\n        accountDeposits = new DepositWithAvailableLiquidity[](accountDepositIds.length);\n        \n        for (uint256 i = 0; i < accountDepositIds.length; ++i) {\n            uint256 depositId = accountDepositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            accountDeposits[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n    }\n\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositWithAvailableLiquidity[] memory depositArray) {\n        depositArray = new DepositWithAvailableLiquidity[](_depositIds.length);\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            depositArray[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n\n        return depositArray;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates the intentHash of new intent\n     */\n    function _calculateIntentHash(\n        bytes32 _venmoId,\n        uint256 _depositId\n    )\n        internal\n        view\n        virtual\n        returns (bytes32 intentHash)\n    {\n        // Mod with circom prime field to make sure it fits in a 254-bit field\n        uint256 intermediateHash = uint256(keccak256(abi.encodePacked(_venmoId, _depositId, block.timestamp)));\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\n    }\n\n    /**\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\n     * the outstanding amounts are summed and returned alongside the intentHashes\n     */\n    function _getPrunableIntents(\n        uint256 _depositId\n    )\n        internal\n        view\n        returns(bytes32[] memory prunableIntents, uint256 reclaimedAmount)\n    {\n        bytes32[] memory intentHashes = deposits[_depositId].intentHashes;\n        prunableIntents = new bytes32[](intentHashes.length);\n\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\n            Intent memory intent = intents[intentHashes[i]];\n            if (intent.intentTimestamp + intentExpirationPeriod < block.timestamp) {\n                prunableIntents[i] = intentHashes[i];\n                reclaimedAmount += intent.amount;\n            }\n        }\n    }\n\n    function _pruneIntents(Deposit storage _deposit, bytes32[] memory _intents) internal {\n        for (uint256 i = 0; i < _intents.length; ++i) {\n            if (_intents[i] != bytes32(0)) {\n                _pruneIntent(_deposit, _intents[i]);\n            }\n        }\n    }\n\n    /**\n     * @notice Pruning an intent involves deleting its state from the intents mapping, zeroing out the intendee's currentIntentHash in\n     * their global account mapping, and deleting the intentHash from the deposit's intentHashes array.\n     */\n    function _pruneIntent(Deposit storage _deposit, bytes32 _intentHash) internal {\n        Intent memory intent = intents[_intentHash];\n\n        delete globalAccount[accounts[intent.onRamper].venmoIdHash].currentIntentHash;\n        delete intents[_intentHash];\n        _deposit.intentHashes.removeStorage(_intentHash);\n\n        emit IntentPruned(_intentHash, intent.deposit);\n    }\n\n    /**\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\n     * deposits mapping and removes tracking it in the user's accounts mapping.\n     */\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\n        if (openDepositAmount == 0) {\n            accounts[_deposit.depositor].deposits.removeStorage(_depositId);\n            emit DepositClosed(_depositId, _deposit.depositor);\n            delete deposits[_depositId];\n        }\n    }\n\n    /**\n     * @notice Checks if sustainability fee has been defined, if so sends fee to the fee recipient and intent amount minus fee\n     * to the on-ramper. If sustainability fee is undefined then full intent amount is transferred to on-ramper.\n     */\n    function _transferFunds(bytes32 _intentHash, Intent memory _intent) internal {\n        uint256 fee;\n        if (sustainabilityFee != 0) {\n            fee = (_intent.amount * sustainabilityFee) / PRECISE_UNIT;\n            usdc.transfer(sustainabilityFeeRecipient, fee);\n        }\n\n        uint256 onRampAmount = _intent.amount - fee;\n        usdc.transfer(_intent.to, onRampAmount);\n\n        emit IntentFulfilled(_intentHash, _intent.deposit, _intent.onRamper, _intent.to, onRampAmount, fee);\n    }\n\n    /**\n     * @notice Validate venmo send payment email and check that it hasn't already been used (done on SendProcessor).\n     * Additionally, we validate that the offRamperIdHash matches the one from the specified intent and that enough\n     * was paid off-chain inclusive of the conversionRate.\n     */\n    function _verifyOnRampProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[12] memory _signals\n    )\n        internal\n        returns(Intent memory, Deposit storage, bytes32)\n    {\n        (\n            uint256 amount,\n            uint256 timestamp,\n            bytes32 offRamperIdHash,\n            bytes32 onRamperIdHash,\n            bytes32 intentHash\n        ) = sendProcessor.processProof(\n            ISendProcessor.SendProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        Intent memory intent = intents[intentHash];\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(intent.onRamper != address(0), \"Intent does not exist\");\n        require(intent.intentTimestamp <= timestamp, \"Intent was not created before send\");\n        require(accounts[deposit.depositor].venmoIdHash == offRamperIdHash, \"Offramper id does not match\");\n        require(accounts[intent.onRamper].venmoIdHash == onRamperIdHash, \"Onramper id does not match\");\n        require(amount >= (intent.amount * PRECISE_UNIT) / deposit.conversionRate, \"Payment was not enough\");\n\n        return (intent, deposit, intentHash);\n    }\n\n    /**\n     * @notice Validate the user has a venmo account, we do not nullify this email since it can be reused to register under\n     * different addresses.\n     */\n    function _verifyRegistrationProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[5] memory _signals\n    )\n        internal\n        view\n        returns(bytes32)\n    {\n        bytes32 venmoIdHash = registrationProcessor.processProof(\n            IRegistrationProcessor.RegistrationProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        return venmoIdHash;\n    }\n}\n"
    },
    "contracts/ramps/venmo-v1/VenmoRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { StringUtils } from \"@zk-email/contracts/utils/StringUtils.sol\";\n\nimport { BaseProcessor } from \"../../processors/BaseProcessor.sol\";\nimport { Groth16Verifier } from \"../../verifiers/venmo_registration_verifier.sol\";\nimport { IKeyHashAdapter } from \"../../processors/keyHashAdapters/IKeyHashAdapter.sol\";\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { IRegistrationProcessor } from \"./interfaces/IRegistrationProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoRegistrationProcessor is Groth16Verifier, IRegistrationProcessor, BaseProcessor {\n\n    using StringUtils for uint256[];\n\n    /* ============ Constants ============ */\n    uint256 constant public PACK_SIZE = 7;\n    \n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress\n    )\n        Groth16Verifier()\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _nullifierRegistry, _emailFromAddress)\n    {}\n\n    /* ============ External Functions ============ */\n\n    function processProof(\n        IRegistrationProcessor.RegistrationProof calldata _proof\n    )\n        public\n        view\n        override\n        onlyRamp\n        returns(bytes32 userIdHash)\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(bytes32(_proof.signals[0]) == getMailserverKeyHash(), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        // Signals [4] is the packed onRamperIdHash\n        userIdHash = bytes32(_proof.signals[4]);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[5] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\n    }\n}\n"
    },
    "contracts/ramps/venmo-v1/VenmoSendProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { StringUtils } from \"@zk-email/contracts/utils/StringUtils.sol\";\n\nimport { BaseProcessor } from \"../../processors/BaseProcessor.sol\";\nimport { Groth16Verifier } from \"../../verifiers/venmo_send_verifier_v1.sol\";\nimport { IKeyHashAdapter } from \"../../processors/keyHashAdapters/IKeyHashAdapter.sol\";\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { ISendProcessor } from \"./interfaces/ISendProcessor.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoSendProcessor is Groth16Verifier, ISendProcessor, BaseProcessor {\n    \n    using StringUtils for uint256[];\n    using StringConversionUtils for string;\n\n    /* ============ Constants ============ */\n    uint256 constant public PACK_SIZE = 7;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress\n    )\n        Groth16Verifier()\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _nullifierRegistry, _emailFromAddress)\n    {}\n    \n    /* ============ External Functions ============ */\n    function processProof(\n        ISendProcessor.SendProof calldata _proof\n    )\n        public\n        override\n        onlyRamp\n        returns(uint256 amount, uint256 timestamp, bytes32 offRamperIdHash, bytes32 onRamperIdHash, bytes32 intentHash)\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(bytes32(_proof.signals[0]) == getMailserverKeyHash(), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        // Signals [4:5] is the packed amount, since this is a USDC amount we want to make sure the returned number is\n        // properly padded to 6 decimals. If the parsed has more than 6 figures to the right of the decimal it will revert\n        amount = _parseSignalArray(_proof.signals, 4, 6).stringToUint(6);\n\n        // Signals [5:7] are the packed timestamp, we do not expect there to be any decimal places in this number so we\n        // specify 0 decimals, if any decimal appears this function will revert\n        timestamp = _parseSignalArray(_proof.signals, 6, 8).stringToUint(0);\n\n        // Signals [8] is the packed offRamperIdHash\n        offRamperIdHash = bytes32(_proof.signals[8]);\n\n        // Signals [9] is the packed onRamperIdHash\n        onRamperIdHash = bytes32(_proof.signals[9]);\n\n        // Check if email has been used previously, if not nullify it so it can't be used again\n        _validateAndAddNullifier(bytes32(_proof.signals[10]));\n\n        // Signals [11] is intentHash\n        intentHash = bytes32(_proof.signals[11]);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[12] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\n    }\n}\n"
    },
    "contracts/ramps/venmo-v2/interfaces/IRamp.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ramp } from \"../../venmo-v1/Ramp.sol\";\n\npragma solidity ^0.8.18;\n\ninterface IRamp {\n    function getAccountInfo(address _account) external view returns (Ramp.AccountInfo memory);\n}\n"
    },
    "contracts/ramps/venmo-v2/interfaces/IRegistrationProcessorV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IRegistrationProcessorV2 {\n\n    struct RegistrationProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[5] signals;\n    }\n\n    function processProof(\n        RegistrationProof calldata _proof\n    )\n        external\n    returns (bytes32);\n}\n"
    },
    "contracts/ramps/venmo-v2/VenmoRampV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { Bytes32ArrayUtils } from \"../../external/Bytes32ArrayUtils.sol\";\nimport { Uint256ArrayUtils } from \"../../external/Uint256ArrayUtils.sol\";\n\nimport { IPoseidon } from \"../../interfaces/IPoseidon.sol\";\nimport { IRamp } from \"./interfaces/IRamp.sol\";\nimport { IRegistrationProcessorV2 } from \"./interfaces/IRegistrationProcessorV2.sol\";\nimport { ISendProcessor } from \"../venmo-v1/interfaces/ISendProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoRampV2 is Ownable {\n\n    using Bytes32ArrayUtils for bytes32[];\n    using Uint256ArrayUtils for uint256[];\n\n    /* ============ Events ============ */\n    event AccountRegistered(address indexed accountOwner, bytes32 indexed venmoIdHash);\n    event DepositReceived(\n        uint256 indexed depositId,\n        bytes32 indexed venmoId,\n        uint256 amount,\n        uint256 conversionRate\n    );\n    event IntentSignaled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        bytes32 indexed venmoId,\n        address to,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event IntentPruned(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId\n    );\n    // Do we want to emit the onRamper or the venmoId\n    event IntentFulfilled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        address indexed onRamper,\n        address to,\n        uint256 amount,\n        uint256 feeAmount\n    );\n    // Do we want to emit the depositor or the venmoId\n    event DepositWithdrawn(\n        uint256 indexed depositId,\n        address indexed depositor,\n        uint256 amount\n    );\n\n    event DepositClosed(uint256 depositId, address depositor);\n    event UserAddedToDenylist(bytes32 listOwner, bytes32 deniedUser);\n    event UserRemovedFromDenylist(bytes32 listOwner, bytes32 approvedUser);\n    event MinDepositAmountSet(uint256 minDepositAmount);\n    event MaxOnRampAmountSet(uint256 maxOnRampAmount);\n    event IntentExpirationPeriodSet(uint256 intentExpirationPeriod);\n    event OnRampCooldownPeriodSet(uint256 onRampCooldownPeriod);\n    event SustainabilityFeeUpdated(uint256 fee);\n    event SustainabilityFeeRecipientUpdated(address feeRecipient);\n    event NewSendProcessorSet(address sendProcessor);\n    event NewRegistrationProcessorSet(address registrationProcessor);\n    event NewReceiveProcessorSet(address receiveProcessor);\n\n    /* ============ Structs ============ */\n\n    // Each Account is tied to a GlobalAccount via its associated venmoIdHash. Each account is represented by an Ethereum address\n    // and is allowed to have at most 5 deposits associated with it.\n    struct AccountInfo {\n        bytes32 venmoIdHash;                // Poseidon hash of account's venmoId\n        uint256[] deposits;                 // Array of open account deposits\n    }\n\n    struct Deposit {\n        address depositor;\n        uint256[3] packedVenmoId;\n        uint256 depositAmount;              // Amount of USDC deposited\n        uint256 remainingDeposits;          // Amount of remaining deposited liquidity\n        uint256 outstandingIntentAmount;    // Amount of outstanding intents (may include expired intents)\n        uint256 conversionRate;             // Conversion required by off-ramper between USDC/USD\n        bytes32[] intentHashes;             // Array of hashes of all open intents (may include some expired if not pruned)\n    }\n\n    struct DepositWithAvailableLiquidity {\n        uint256 depositId;                  // ID of the deposit\n        bytes32 depositorIdHash;            // Depositor's venmoIdHash \n        Deposit deposit;                    // Deposit struct\n        uint256 availableLiquidity;         // Amount of liquidity available to signal intents (net of expired intents)\n    }\n\n    struct Intent {\n        address onRamper;                   // On-ramper's address\n        address to;                         // Address to forward funds to (can be same as onRamper)\n        uint256 deposit;                    // ID of the deposit the intent is signaling on\n        uint256 amount;                     // Amount of USDC the on-ramper signals intent for on-chain\n        uint256 intentTimestamp;            // Timestamp of when the intent was signaled\n    }\n\n    struct IntentWithOnRamperId {\n        bytes32 intentHash;                 // Intent hash\n        Intent intent;                      // Intent struct\n        bytes32 onRamperIdHash;             // Poseidon hash of the on-ramper's venmoId\n    }\n\n    struct DenyList {\n        bytes32[] deniedUsers;              // Array of venmoIdHashes that are denied from taking depositors liquidity\n        mapping(bytes32 => bool) isDenied;  // Mapping of venmoIdHash to boolean indicating if the user is denied\n    }\n\n    // A Global Account is defined as an account represented by one venmoIdHash. This is used to enforce limitations on actions across\n    // all Ethereum addresses that are associated with that venmoId. In this case we use it to enforce a cooldown period between on ramps,\n    // restrict each venmo account to one outstanding intent at a time, and to enforce deny lists.\n    struct GlobalAccountInfo {\n        bytes32 currentIntentHash;          // Hash of the current open intent (if exists)\n        uint256 lastOnrampTimestamp;        // Timestamp of the last on-ramp transaction used to check if cooldown period elapsed\n        DenyList denyList;                  // Deny list of the account\n    }\n\n    /* ============ Modifiers ============ */\n    modifier onlyRegisteredUser() {\n        require(getAccountVenmoIdHash(msg.sender) != bytes32(0), \"Caller must be registered user\");\n        _;\n    }\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n    uint256 internal constant MAX_DEPOSITS = 5;       // An account can only have max 5 different deposit parameterizations to prevent locking funds\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant MAX_SUSTAINABILITY_FEE = 5e16;   // 5% max sustainability fee\n    \n    /* ============ State Variables ============ */\n    IERC20 public immutable usdc;                                   // USDC token contract\n    IPoseidon public immutable poseidon;                            // Poseidon hashing contract\n    IRamp public immutable ramp;                                    // V1 Ramp contract, used to share registration state\n    IRegistrationProcessorV2 public registrationProcessor;          // Address of registration processor contract, verifies registration e-mails\n    ISendProcessor public sendProcessor;                            // Address of send processor contract, verifies onRamp emails\n\n    bool public isInitialized;                                      // Indicates if contract has been initialized\n\n    mapping(bytes32 => GlobalAccountInfo) internal globalAccount;   // Mapping of venmoIdHash to information used to enforce actions across Ethereum accounts\n    mapping(address => AccountInfo) internal accounts;              // Mapping of Ethereum accounts to their account information (venmoIdHash and deposits)\n    mapping(uint256 => Deposit) public deposits;                    // Mapping of depositIds to deposit structs\n    mapping(bytes32 => Intent) public intents;                      // Mapping of intentHashes to intent structs\n\n    uint256 public minDepositAmount;                                // Minimum amount of USDC that can be deposited\n    uint256 public maxOnRampAmount;                                 // Maximum amount of USDC that can be on-ramped in a single transaction\n    uint256 public onRampCooldownPeriod;                            // Time period that must elapse between completing an on-ramp and signaling a new intent\n    uint256 public intentExpirationPeriod;                          // Time period after which an intent can be pruned from the system\n    uint256 public sustainabilityFee;                               // Fee charged to on-rampers in preciseUnits (1e16 = 1%)\n    address public sustainabilityFeeRecipient;                      // Address that receives the sustainability fee\n\n    uint256 public depositCounter;                                  // Counter for depositIds\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        IRamp _ramp,\n        IERC20 _usdc,\n        IPoseidon _poseidon,\n        uint256 _minDepositAmount,\n        uint256 _maxOnRampAmount,\n        uint256 _intentExpirationPeriod,\n        uint256 _onRampCooldownPeriod,\n        uint256 _sustainabilityFee,\n        address _sustainabilityFeeRecipient\n    )\n        Ownable()\n    {\n        usdc = _usdc;\n        ramp = _ramp;\n        poseidon = _poseidon;\n        minDepositAmount = _minDepositAmount;\n        maxOnRampAmount = _maxOnRampAmount;\n        intentExpirationPeriod = _intentExpirationPeriod;\n        onRampCooldownPeriod = _onRampCooldownPeriod;\n        sustainabilityFee = _sustainabilityFee;\n        sustainabilityFeeRecipient = _sustainabilityFeeRecipient;\n\n        transferOwnership(_owner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Initialize Ramp with the addresses of the Processors\n     *\n     * @param _registrationProcessor    Registration processor address\n     * @param _sendProcessor            Send processor address\n     */\n    function initialize(\n        IRegistrationProcessorV2 _registrationProcessor,\n        ISendProcessor _sendProcessor\n    )\n        external\n        onlyOwner\n    {\n        require(!isInitialized, \"Already initialized\");\n\n        registrationProcessor = _registrationProcessor;\n        sendProcessor = _sendProcessor;\n\n        isInitialized = true;\n    }\n\n    /**\n     * @notice Registers a new account by pulling the hash of the account id from the proof and assigning the account owner to the\n     * sender of the transaction. One venmo account can be registered to multiple Ethereum addresses.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, userIdHash\n     */\n    function register(\n        uint[2] memory _a,\n        uint[2][2] memory _b,\n        uint[2] memory _c,\n        uint[5] memory _signals\n    )\n        external\n    {\n        require(getAccountVenmoIdHash(msg.sender) == bytes32(0), \"Account already associated with venmoId\");\n        bytes32 venmoIdHash = _verifyRegistrationProof(_a, _b, _c, _signals);\n\n        accounts[msg.sender].venmoIdHash = venmoIdHash;\n\n        emit AccountRegistered(msg.sender, venmoIdHash);\n    }\n\n    /**\n     * @notice Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to\n     * previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\n     * of USDC.\n     *\n     * @param _packedVenmoId    The packed venmo id of the account owner (we pack for easy use with poseidon)\n     * @param _depositAmount    The amount of USDC to off-ramp\n     * @param _receiveAmount    The amount of USD to receive\n     */\n    function offRamp(\n        uint256[3] memory _packedVenmoId,\n        uint256 _depositAmount,\n        uint256 _receiveAmount\n    )\n        external\n        onlyRegisteredUser\n    {\n        bytes32 venmoIdHash = bytes32(poseidon.poseidon(_packedVenmoId));\n\n        require(getAccountVenmoIdHash(msg.sender) == venmoIdHash, \"Sender must be the account owner\");\n        require(accounts[msg.sender].deposits.length < MAX_DEPOSITS, \"Maximum deposit amount reached\");\n        require(_depositAmount >= minDepositAmount, \"Deposit amount must be greater than min deposit amount\");\n        require(_receiveAmount > 0, \"Receive amount must be greater than 0\");\n\n        uint256 conversionRate = (_depositAmount * PRECISE_UNIT) / _receiveAmount;\n        uint256 depositId = depositCounter++;\n\n        accounts[msg.sender].deposits.push(depositId);\n\n        deposits[depositId] = Deposit({\n            depositor: msg.sender,\n            packedVenmoId: _packedVenmoId,\n            depositAmount: _depositAmount,\n            remainingDeposits: _depositAmount,\n            outstandingIntentAmount: 0,\n            conversionRate: conversionRate,\n            intentHashes: new bytes32[](0)\n        });\n\n        usdc.transferFrom(msg.sender, address(this), _depositAmount);\n\n        emit DepositReceived(depositId, venmoIdHash, _depositAmount, conversionRate);\n    }\n\n    /**\n     * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\n     * in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of\n     * address (tracked using venmoId). Caller must not be on the depositor's deny list. If there are prunable intents then\n     * they will be deleted from the deposit to be able to maintain state hygiene.\n     *\n     * @param _depositId    The ID of the deposit the on-ramper intends to use for \n     * @param _amount       The amount of USDC the user wants to on-ramp\n     * @param _to           Address to forward funds to (can be same as onRamper)\n     */\n    function signalIntent(uint256 _depositId, uint256 _amount, address _to) external onlyRegisteredUser {\n        bytes32 venmoIdHash = getAccountVenmoIdHash(msg.sender);\n        Deposit storage deposit = deposits[_depositId];\n        bytes32 depositorVenmoIdHash = getAccountVenmoIdHash(deposit.depositor);\n\n        // Caller validity checks\n        require(!globalAccount[depositorVenmoIdHash].denyList.isDenied[venmoIdHash], \"Onramper on depositor's denylist\");\n        require(\n            globalAccount[venmoIdHash].lastOnrampTimestamp + onRampCooldownPeriod <= block.timestamp,\n            \"On ramp cool down period not elapsed\"\n        );\n        require(globalAccount[venmoIdHash].currentIntentHash == bytes32(0), \"Intent still outstanding\");\n        require(depositorVenmoIdHash != venmoIdHash, \"Sender cannot be the depositor\");\n\n        // Intent information checks\n        require(deposit.depositor != address(0), \"Deposit does not exist\");\n        require(_amount > 0, \"Signaled amount must be greater than 0\");\n        require(_amount <= maxOnRampAmount, \"Signaled amount must be less than max on-ramp amount\");\n        require(_to != address(0), \"Cannot send to zero address\");\n\n        bytes32 intentHash = _calculateIntentHash(venmoIdHash, _depositId);\n\n        if (deposit.remainingDeposits < _amount) {\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(_depositId);\n\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \"Not enough liquidity\");\n\n            _pruneIntents(deposit, prunableIntents);\n            deposit.remainingDeposits += reclaimableAmount;\n            deposit.outstandingIntentAmount -= reclaimableAmount;\n        }\n\n        intents[intentHash] = Intent({\n            onRamper: msg.sender,\n            to: _to,\n            deposit: _depositId,\n            amount: _amount,\n            intentTimestamp: block.timestamp\n        });\n\n        globalAccount[venmoIdHash].currentIntentHash = intentHash;\n\n        deposit.remainingDeposits -= _amount;\n        deposit.outstandingIntentAmount += _amount;\n        deposit.intentHashes.push(intentHash);\n\n        emit IntentSignaled(intentHash, _depositId, venmoIdHash, _to, _amount, block.timestamp);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new\n     * intent. Deposit state is updated to reflect the cancelled intent.\n     *\n     * @param _intentHash    Hash of intent being cancelled\n     */\n    function cancelIntent(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        \n        require(intent.intentTimestamp != 0, \"Intent does not exist\");\n        require(\n            getAccountVenmoIdHash(intent.onRamper) == getAccountVenmoIdHash(msg.sender),\n            \"Sender must be the on-ramper\"\n        );\n\n        Deposit storage deposit = deposits[intent.deposit];\n\n        _pruneIntent(deposit, _intentHash);\n\n        deposit.remainingDeposits += intent.amount;\n        deposit.outstandingIntentAmount -= intent.amount;\n    }\n\n    /**\n     * @notice Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated,\n     * intent is removed, and deposit state is updated. USDC is transferred to the on-ramper.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, timestamp, onRamperIdHash,\n     *                  nullifier, intentHash\n     */\n    function onRamp(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[12] memory _signals\n    )\n        external\n    {\n        (\n            Intent memory intent,\n            Deposit storage deposit,\n            bytes32 intentHash\n        ) = _verifyOnRampProof(_a, _b, _c, _signals);\n\n        _pruneIntent(deposit, intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        globalAccount[getAccountVenmoIdHash(intent.onRamper)].lastOnrampTimestamp = block.timestamp;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        _transferFunds(intentHash, intent);\n    }\n\n    /**\n     * @notice Allows off-ramper to release funds to the on-ramper in case of a failed on-ramp or because of some other arrangement\n     * between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and \n     * deposit state is updated. USDC is transferred to the on-ramper.\n     *\n     * @param _intentHash        Hash of intent to resolve by releasing the funds\n     */\n    function releaseFundsToOnramper(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(intent.onRamper != address(0), \"Intent does not exist\");\n        require(deposit.depositor == msg.sender, \"Caller must be the depositor\");\n\n        _pruneIntent(deposit, _intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        globalAccount[getAccountVenmoIdHash(intent.onRamper)].lastOnrampTimestamp = block.timestamp;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        _transferFunds(_intentHash, intent);\n    }\n\n    /**\n     * @notice Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all\n     * remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be\n     * returned. Deposit will be deleted as long as there are no more outstanding intents.\n     *\n     * @param _depositIds   Array of depositIds the depositor is attempting to withdraw\n     */\n    function withdrawDeposit(uint256[] memory _depositIds) external {\n        uint256 returnAmount;\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit storage deposit = deposits[depositId];\n\n            require(deposit.depositor == msg.sender, \"Sender must be the depositor\");\n\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(depositId);\n\n            _pruneIntents(deposit, prunableIntents);\n\n            returnAmount += deposit.remainingDeposits + reclaimableAmount;\n            \n            deposit.outstandingIntentAmount -= reclaimableAmount;\n\n            emit DepositWithdrawn(depositId, deposit.depositor, deposit.remainingDeposits + reclaimableAmount);\n            \n            delete deposit.remainingDeposits;\n            _closeDepositIfNecessary(depositId, deposit);\n        }\n\n        usdc.transfer(msg.sender, returnAmount);\n    }\n\n    /**\n     * @notice Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to\n     * signal an intent on the user's deposit they will be denied.\n     *\n     * @param _deniedUser   Poseidon hash of the venmoId being banned\n     */\n    function addAccountToDenylist(bytes32 _deniedUser) external onlyRegisteredUser {\n        bytes32 denyingUser = getAccountVenmoIdHash(msg.sender);\n\n        require(!globalAccount[denyingUser].denyList.isDenied[_deniedUser], \"User already on denylist\");\n\n        globalAccount[denyingUser].denyList.isDenied[_deniedUser] = true;\n        globalAccount[denyingUser].denyList.deniedUsers.push(_deniedUser);\n\n        emit UserAddedToDenylist(denyingUser, _deniedUser);\n    }\n\n    /**\n     * @notice Removes a venmoId from a depositor's deny list.\n     *\n     * @param _approvedUser   Poseidon hash of the venmoId being approved\n     */\n    function removeAccountFromDenylist(bytes32 _approvedUser) external onlyRegisteredUser {\n        bytes32 approvingUser = getAccountVenmoIdHash(msg.sender);\n\n        require(globalAccount[approvingUser].denyList.isDenied[_approvedUser], \"User not on denylist\");\n\n        globalAccount[approvingUser].denyList.isDenied[_approvedUser] = false;\n        globalAccount[approvingUser].denyList.deniedUsers.removeStorage(_approvedUser);\n\n        emit UserRemovedFromDenylist(approvingUser, _approvedUser);\n    }\n\n    /* ============ Governance Functions ============ */\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the send processor address used for validating and interpreting zk proofs.\n     *\n     * @param _sendProcessor   New send proccesor address\n     */\n    function setSendProcessor(ISendProcessor _sendProcessor) external onlyOwner {\n        sendProcessor = _sendProcessor;\n        emit NewSendProcessorSet(address(_sendProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the registration processor address used for validating and interpreting zk proofs.\n     *\n     * @param _registrationProcessor   New registration proccesor address\n     */\n    function setRegistrationProcessor(IRegistrationProcessorV2 _registrationProcessor) external onlyOwner {\n        registrationProcessor = _registrationProcessor;\n        emit NewRegistrationProcessorSet(address(_registrationProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\n     *\n     * @param _minDepositAmount   The new minimum deposit amount\n     */\n    function setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\n        require(_minDepositAmount != 0, \"Minimum deposit cannot be zero\");\n\n        minDepositAmount = _minDepositAmount;\n        emit MinDepositAmountSet(_minDepositAmount);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp.\n     *\n     * @param _fee   The new sustainability fee in precise units (10**18, ie 10% = 1e17)\n     */\n    function setSustainabilityFee(uint256 _fee) external onlyOwner {\n        require(_fee <= MAX_SUSTAINABILITY_FEE, \"Fee cannot be greater than max fee\");\n\n        sustainabilityFee = _fee;\n        emit SustainabilityFeeUpdated(_fee);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the recepient of sustainability fees.\n     *\n     * @param _feeRecipient   The new fee recipient address\n     */\n    function setSustainabilityFeeRecipient(address _feeRecipient) external onlyOwner {\n        require(_feeRecipient != address(0), \"Fee recipient cannot be zero address\");\n\n        sustainabilityFeeRecipient = _feeRecipient;\n        emit SustainabilityFeeRecipientUpdated(_feeRecipient);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than\n     * this amount a user must make multiple transactions.\n     *\n     * @param _maxOnRampAmount   The new max on ramp amount\n     */\n    function setMaxOnRampAmount(uint256 _maxOnRampAmount) external onlyOwner {\n        require(_maxOnRampAmount != 0, \"Max on ramp amount cannot be zero\");\n\n        maxOnRampAmount = _maxOnRampAmount;\n        emit MaxOnRampAmountSet(_maxOnRampAmount);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this\n     * amount of time before they can signalIntent to on-ramp again.\n     *\n     * @param _onRampCooldownPeriod   New on-ramp cooldown period\n     */\n    function setOnRampCooldownPeriod(uint256 _onRampCooldownPeriod) external onlyOwner {\n        onRampCooldownPeriod = _onRampCooldownPeriod;\n        emit OnRampCooldownPeriodSet(_onRampCooldownPeriod);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\n     * locking up a depositor's funds.\n     *\n     * @param _intentExpirationPeriod   New intent expiration period\n     */\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\n        require(_intentExpirationPeriod != 0, \"Max intent expiration period cannot be zero\");\n\n        intentExpirationPeriod = _intentExpirationPeriod;\n        emit IntentExpirationPeriodSet(_intentExpirationPeriod);\n    }\n\n\n    /* ============ External View Functions ============ */\n\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\n        return deposits[_depositId];\n    }\n\n    function getAccountInfo(address _account) external view returns (AccountInfo memory) {\n        return AccountInfo({\n            venmoIdHash: getAccountVenmoIdHash(_account),\n            deposits: accounts[_account].deposits\n        });\n    }\n\n    function getAccountVenmoIdHash(address _account) public view returns (bytes32) {\n        return accounts[_account].venmoIdHash == bytes32(0) ?\n            ramp.getAccountInfo(_account).venmoIdHash :\n            accounts[_account].venmoIdHash;\n    }\n\n    function getVenmoIdCurrentIntentHash(address _account) external view returns (bytes32) {\n        return globalAccount[getAccountVenmoIdHash(_account)].currentIntentHash;\n    }\n\n    function getLastOnRampTimestamp(address _account) external view returns (uint256) {\n        return globalAccount[getAccountVenmoIdHash(_account)].lastOnrampTimestamp;\n    }\n\n    function getDeniedUsers(address _account) external view returns (bytes32[] memory) {\n        return globalAccount[getAccountVenmoIdHash(_account)].denyList.deniedUsers;\n    }\n\n    function isDeniedUser(address _account, bytes32 _deniedUser) external view returns (bool) {\n        return globalAccount[getAccountVenmoIdHash(_account)].denyList.isDenied[_deniedUser];\n    }\n\n    function getIntentsWithOnRamperId(bytes32[] calldata _intentHashes) external view returns (IntentWithOnRamperId[] memory) {\n        IntentWithOnRamperId[] memory intentsWithOnRamperId = new IntentWithOnRamperId[](_intentHashes.length);\n\n        for (uint256 i = 0; i < _intentHashes.length; ++i) {\n            bytes32 intentHash = _intentHashes[i];\n            Intent memory intent = intents[intentHash];\n            intentsWithOnRamperId[i] = IntentWithOnRamperId({\n                intentHash: _intentHashes[i],\n                intent: intent,\n                onRamperIdHash: getAccountVenmoIdHash(intent.onRamper)\n            });\n        }\n\n        return intentsWithOnRamperId;\n    }\n\n    function getAccountDeposits(address _account) external view returns (DepositWithAvailableLiquidity[] memory accountDeposits) {\n        uint256[] memory accountDepositIds = accounts[_account].deposits;\n        accountDeposits = new DepositWithAvailableLiquidity[](accountDepositIds.length);\n        \n        for (uint256 i = 0; i < accountDepositIds.length; ++i) {\n            uint256 depositId = accountDepositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            accountDeposits[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                depositorIdHash: getAccountVenmoIdHash(deposit.depositor),\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n    }\n\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositWithAvailableLiquidity[] memory depositArray) {\n        depositArray = new DepositWithAvailableLiquidity[](_depositIds.length);\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            depositArray[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                depositorIdHash: getAccountVenmoIdHash(deposit.depositor),\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n\n        return depositArray;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates the intentHash of new intent\n     */\n    function _calculateIntentHash(\n        bytes32 _venmoId,\n        uint256 _depositId\n    )\n        internal\n        view\n        virtual\n        returns (bytes32 intentHash)\n    {\n        // Mod with circom prime field to make sure it fits in a 254-bit field\n        uint256 intermediateHash = uint256(keccak256(abi.encodePacked(_venmoId, _depositId, block.timestamp)));\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\n    }\n\n    /**\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\n     * the outstanding amounts are summed and returned alongside the intentHashes\n     */\n    function _getPrunableIntents(\n        uint256 _depositId\n    )\n        internal\n        view\n        returns(bytes32[] memory prunableIntents, uint256 reclaimedAmount)\n    {\n        bytes32[] memory intentHashes = deposits[_depositId].intentHashes;\n        prunableIntents = new bytes32[](intentHashes.length);\n\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\n            Intent memory intent = intents[intentHashes[i]];\n            if (intent.intentTimestamp + intentExpirationPeriod < block.timestamp) {\n                prunableIntents[i] = intentHashes[i];\n                reclaimedAmount += intent.amount;\n            }\n        }\n    }\n\n    function _pruneIntents(Deposit storage _deposit, bytes32[] memory _intents) internal {\n        for (uint256 i = 0; i < _intents.length; ++i) {\n            if (_intents[i] != bytes32(0)) {\n                _pruneIntent(_deposit, _intents[i]);\n            }\n        }\n    }\n\n    /**\n     * @notice Pruning an intent involves deleting its state from the intents mapping, zeroing out the intendee's currentIntentHash in\n     * their global account mapping, and deleting the intentHash from the deposit's intentHashes array.\n     */\n    function _pruneIntent(Deposit storage _deposit, bytes32 _intentHash) internal {\n        Intent memory intent = intents[_intentHash];\n\n        delete globalAccount[getAccountVenmoIdHash(intent.onRamper)].currentIntentHash;\n        delete intents[_intentHash];\n        _deposit.intentHashes.removeStorage(_intentHash);\n\n        emit IntentPruned(_intentHash, intent.deposit);\n    }\n\n    /**\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\n     * deposits mapping and removes tracking it in the user's accounts mapping.\n     */\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\n        if (openDepositAmount == 0) {\n            accounts[_deposit.depositor].deposits.removeStorage(_depositId);\n            emit DepositClosed(_depositId, _deposit.depositor);\n            delete deposits[_depositId];\n        }\n    }\n\n    /**\n     * @notice Checks if sustainability fee has been defined, if so sends fee to the fee recipient and intent amount minus fee\n     * to the on-ramper. If sustainability fee is undefined then full intent amount is transferred to on-ramper.\n     */\n    function _transferFunds(bytes32 _intentHash, Intent memory _intent) internal {\n        uint256 fee;\n        if (sustainabilityFee != 0) {\n            fee = (_intent.amount * sustainabilityFee) / PRECISE_UNIT;\n            usdc.transfer(sustainabilityFeeRecipient, fee);\n        }\n\n        uint256 onRampAmount = _intent.amount - fee;\n        usdc.transfer(_intent.to, onRampAmount);\n\n        emit IntentFulfilled(_intentHash, _intent.deposit, _intent.onRamper, _intent.to, onRampAmount, fee);\n    }\n\n    /**\n     * @notice Validate venmo send payment email and check that it hasn't already been used (done on SendProcessor).\n     * Additionally, we validate that the offRamperIdHash matches the one from the specified intent and that enough\n     * was paid off-chain inclusive of the conversionRate.\n     */\n    function _verifyOnRampProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[12] memory _signals\n    )\n        internal\n        returns(Intent memory, Deposit storage, bytes32)\n    {\n        (\n            uint256 amount,\n            uint256 timestamp,\n            bytes32 offRamperIdHash,\n            bytes32 onRamperIdHash,\n            bytes32 intentHash\n        ) = sendProcessor.processProof(\n            ISendProcessor.SendProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        Intent memory intent = intents[intentHash];\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(intent.onRamper != address(0), \"Intent does not exist\");\n        require(intent.intentTimestamp <= timestamp, \"Intent was not created before send\");\n        require(getAccountVenmoIdHash(deposit.depositor) == offRamperIdHash, \"Offramper id does not match\");\n        require(getAccountVenmoIdHash(intent.onRamper) == onRamperIdHash, \"Onramper id does not match\");\n        require(amount >= (intent.amount * PRECISE_UNIT) / deposit.conversionRate, \"Payment was not enough\");\n\n        return (intent, deposit, intentHash);\n    }\n\n    /**\n     * @notice Validate the user has a venmo account, we do not nullify this email since it can be reused to register under\n     * different addresses.\n     */\n    function _verifyRegistrationProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[5] memory _signals\n    )\n        internal\n        returns(bytes32)\n    {\n        bytes32 venmoIdHash = registrationProcessor.processProof(\n            IRegistrationProcessorV2.RegistrationProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        return venmoIdHash;\n    }\n}\n"
    },
    "contracts/ramps/venmo-v2/VenmoRegistrationProcessorV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { StringUtils } from \"@zk-email/contracts/utils/StringUtils.sol\";\n\nimport { BaseProcessorV2 } from \"../../processors/BaseProcessorV2.sol\";\nimport { Groth16Verifier } from \"../../verifiers/venmo_registration_verifier.sol\";\nimport { IKeyHashAdapterV2 } from \"../../processors/keyHashAdapters/IKeyHashAdapterV2.sol\";\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { IRegistrationProcessorV2 } from \"./interfaces/IRegistrationProcessorV2.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoRegistrationProcessorV2 is Groth16Verifier, IRegistrationProcessorV2, BaseProcessorV2 {\n\n    using StringUtils for uint256[];\n\n    /* ============ Constants ============ */\n    uint256 constant public PACK_SIZE = 7;\n    \n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapterV2 _venmoMailserverKeyHashAdapter,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress,\n        uint256 _timestampBuffer\n    )\n        Groth16Verifier()\n        BaseProcessorV2(\n            _ramp,\n            _venmoMailserverKeyHashAdapter,\n            _nullifierRegistry,\n            _emailFromAddress,\n            _timestampBuffer\n        )\n    {}\n\n    /* ============ External Functions ============ */\n\n    function processProof(\n        IRegistrationProcessorV2.RegistrationProof calldata _proof\n    )\n        public\n        override\n        onlyRamp\n        returns(bytes32 userIdHash)\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(isMailServerKeyHash(bytes32(_proof.signals[0])), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        _validateAndAddNullifier(keccak256(abi.encode(_proof)));\n\n        // Signals [4] is the packed onRamperIdHash\n        userIdHash = bytes32(_proof.signals[4]);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[5] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\n    }\n}\n"
    },
    "contracts/ramps/venmo-v2/VenmoSendProcessorV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { StringUtils } from \"@zk-email/contracts/utils/StringUtils.sol\";\n\nimport { BaseProcessorV2 } from \"../../processors/BaseProcessorV2.sol\";\nimport { Groth16Verifier } from \"../../verifiers/venmo_send_verifier_v2.sol\";\nimport { IKeyHashAdapterV2 } from \"../../processors/keyHashAdapters/IKeyHashAdapterV2.sol\";\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { ISendProcessor } from \"../venmo-v1/interfaces/ISendProcessor.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoSendProcessorV2 is Groth16Verifier, ISendProcessor, BaseProcessorV2 {\n    \n    using StringUtils for uint256[];\n    using StringConversionUtils for string;\n\n    /* ============ Constants ============ */\n    uint256 constant public PACK_SIZE = 7;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapterV2 _venmoMailserverKeyHashAdapter,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress,\n        uint256 _timestampBuffer\n    )\n        Groth16Verifier()\n        BaseProcessorV2(\n            _ramp,\n            _venmoMailserverKeyHashAdapter,\n            _nullifierRegistry,\n            _emailFromAddress,\n            _timestampBuffer\n        )\n    {}\n    \n    /* ============ External Functions ============ */\n    function processProof(\n        ISendProcessor.SendProof calldata _proof\n    )\n        public\n        override\n        onlyRamp\n        returns(uint256 amount, uint256 timestamp, bytes32 offRamperIdHash, bytes32 onRamperIdHash, bytes32 intentHash)\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(isMailServerKeyHash(bytes32(_proof.signals[0])), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        // Signals [4:5] is the packed amount, since this is a USDC amount we want to make sure the returned number is\n        // properly padded to 6 decimals. If the parsed has more than 6 figures to the right of the decimal it will revert\n        amount = _parseSignalArray(_proof.signals, 4, 6).stringToUint(6);\n\n        // Signals [5:7] are the packed timestamp, we do not expect there to be any decimal places in this number so we\n        // specify 0 decimals, if any decimal appears this function will revert\n        // Add the buffer to build in flexibility with L2 timestamps\n        timestamp = _parseSignalArray(_proof.signals, 6, 8).stringToUint(0) + timestampBuffer;\n\n        // Signals [8] is the packed offRamperIdHash\n        offRamperIdHash = bytes32(_proof.signals[8]);\n\n        // Signals [9] is the packed onRamperIdHash\n        onRamperIdHash = bytes32(_proof.signals[9]);\n\n        // Check if email has been used previously, if not nullify it so it can't be used again\n        _validateAndAddNullifier(bytes32(_proof.signals[10]));\n\n        // Signals [11] is intentHash\n        intentHash = bytes32(_proof.signals[11]);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[12] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\n    }\n}\n"
    },
    "contracts/verifiers/hdfc_registration_verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 18941993809644597263122344954710203970320565994383305999328476744235410761420;\n    uint256 constant deltax2 = 16269071872410952148518498647090098652233286976541031880547316776610079594158;\n    uint256 constant deltay1 = 1550998249936592441357989923809006764271578090146442710328018508594456802732;\n    uint256 constant deltay2 = 19185606473196777841488599791312660844041715603856581158138067158870364920677;\n\n\n    uint256 constant IC0x = 18372946622689748518823039356212228839772233944452095064036571257568061521778;\n    uint256 constant IC0y = 4090510570013847365600433655993260067276592374276000919765717308908464822251;\n\n    uint256 constant IC1x = 14530896712312421799791723884957588697322730616061235674192507548768166179620;\n    uint256 constant IC1y = 13241452075905838374684838766757247775031921510259565862881370673172146127140;\n\n    uint256 constant IC2x = 14067991457947420245134633075363919619678925016010769439544345434672907387120;\n    uint256 constant IC2y = 15075242420546569507483308905973479840611557062002193416356995522848676830458;\n\n    uint256 constant IC3x = 2268679644940985681075191131123258317084928252651134980820814399102444034331;\n    uint256 constant IC3y = 610946500236913130324137013956528865009524976591765517218479867010763423535;\n\n    uint256 constant IC4x = 13966057128193603356523191212776509611934676597484902071144796821963056393663;\n    uint256 constant IC4y = 10287649621411400155282198379447556062773569989590617756213092986925054733118;\n\n    uint256 constant IC5x = 16014135780036425835288045946537103382733734245255165282336104564746920453689;\n    uint256 constant IC5y = 5690379499787398426952245667412062460369879600268772354791710800039878218708;\n\n\n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[5] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, q)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n\n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n\n            checkField(calldataload(add(_pubSignals, 0)))\n\n            checkField(calldataload(add(_pubSignals, 32)))\n\n            checkField(calldataload(add(_pubSignals, 64)))\n\n            checkField(calldataload(add(_pubSignals, 96)))\n\n            checkField(calldataload(add(_pubSignals, 128)))\n\n            checkField(calldataload(add(_pubSignals, 160)))\n\n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }"
    },
    "contracts/verifiers/hdfc_send_verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 4702324236483749359376242949045822465319116726958430523945202749659299908356;\n    uint256 constant deltax2 = 3208360273321841799729262863226982899406813453791710733556183670543714948331;\n    uint256 constant deltay1 = 20522417867108599823821076712059869373887669366867675744686285826246555872195;\n    uint256 constant deltay2 = 12670660525148580266180384698238910692596142688879851786303352145688714106072;\n\n\n    uint256 constant IC0x = 8030280747517387687084877954234429976549976554414160216395914656104281510226;\n    uint256 constant IC0y = 17104142844454039490663032536549076577086340484025562888729760759694808607073;\n\n    uint256 constant IC1x = 8772237536144360869027888991210947226074582978952325102593968904821952496262;\n    uint256 constant IC1y = 3122625119048240212134605236752638202088112691321561361183603728052095638860;\n\n    uint256 constant IC2x = 9866912783934848269401547176895297308112639832209806585476829119584997553683;\n    uint256 constant IC2y = 18902285702690262680512478183614519704432813846276579831365492715033962922088;\n\n    uint256 constant IC3x = 16438843084767575186842465721500270558254188834133860009416059973276198912687;\n    uint256 constant IC3y = 19637681743089590686621664763467973754245190088097969027495488201226096932201;\n\n    uint256 constant IC4x = 16244957609429507716576008270804128279750543290646474514068167892102606186532;\n    uint256 constant IC4y = 16583611018934211828874350883177026517224756607611408661470436361325164178493;\n\n    uint256 constant IC5x = 1880231857260586659536997649990861400508081010769531584628586338531085366147;\n    uint256 constant IC5y = 3722839973812376181715232865179709729667208171660553266886579036419738778905;\n\n    uint256 constant IC6x = 1270409441163088899313281517456149544998439975345678595006767836844214411555;\n    uint256 constant IC6y = 10860874768269047281776646019661374802388524425936615586287903660208564296932;\n\n    uint256 constant IC7x = 8434045441105599576935866859120453521448783233787069448109618000861402242607;\n    uint256 constant IC7y = 21026011281811734411736486883798620858743532933669000129465844405873540372296;\n\n    uint256 constant IC8x = 16444826603046727982676650569240181121009190318002859965831975618430480163200;\n    uint256 constant IC8y = 13330479436133799576954496017456751243468101156567577943444875506883800747485;\n\n    uint256 constant IC9x = 10555698792423422968534735611731058731769401972428000627056129295681285141769;\n    uint256 constant IC9y = 16920701552148154082888907960678652530790355790484478529127070630322055182590;\n\n    uint256 constant IC10x = 560745557010411154560455562795570257381559403111495489793631749127360454692;\n    uint256 constant IC10y = 1810559313890482073038275535517759684260573040004038901411592861530654003553;\n\n    uint256 constant IC11x = 16290647924331362744847363177877456121951933254859466501497770055360811608170;\n    uint256 constant IC11y = 7357664199131242056460365154843603175601302622408068632904637798809388576439;\n\n    uint256 constant IC12x = 18752167508011332686902609807404507911733917202367475123738963433802316522501;\n    uint256 constant IC12y = 18915834728830385178845869536888475042275783085177607701559012212414153432990;\n\n    uint256 constant IC13x = 510508922566750460861825255921948971141871467672055616177326398295988211346;\n    uint256 constant IC13y = 897537967901588078181449387398733392563087304136250554173225523551061601615;\n\n    uint256 constant IC14x = 12705726630718483467144829385938528127462379446304491139120491926133440095304;\n    uint256 constant IC14y = 17721913697683987271820073115272158306375363130125429582329456762454201602835;\n\n    uint256 constant IC15x = 5311519503957019671658191600270827412585500467097722438446167059198229906675;\n    uint256 constant IC15y = 18882610836190640499297283067779602696308349987082087123526913107849320426311;\n\n\n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[15] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, q)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\n\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\n\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\n\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\n\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\n\n                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\n\n                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))\n\n                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))\n\n                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))\n\n                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))\n\n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n\n            checkField(calldataload(add(_pubSignals, 0)))\n\n            checkField(calldataload(add(_pubSignals, 32)))\n\n            checkField(calldataload(add(_pubSignals, 64)))\n\n            checkField(calldataload(add(_pubSignals, 96)))\n\n            checkField(calldataload(add(_pubSignals, 128)))\n\n            checkField(calldataload(add(_pubSignals, 160)))\n\n            checkField(calldataload(add(_pubSignals, 192)))\n\n            checkField(calldataload(add(_pubSignals, 224)))\n\n            checkField(calldataload(add(_pubSignals, 256)))\n\n            checkField(calldataload(add(_pubSignals, 288)))\n\n            checkField(calldataload(add(_pubSignals, 320)))\n\n            checkField(calldataload(add(_pubSignals, 352)))\n\n            checkField(calldataload(add(_pubSignals, 384)))\n\n            checkField(calldataload(add(_pubSignals, 416)))\n\n            checkField(calldataload(add(_pubSignals, 448)))\n\n            checkField(calldataload(add(_pubSignals, 480)))\n\n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }"
    },
    "contracts/verifiers/venmo_registration_verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 5769081632737242226708060316478642108025678562723404961104055110881549315015;\n    uint256 constant deltax2 = 1222122859000121749932892287501863917661609724968348375635593315864943258998;\n    uint256 constant deltay1 = 13150596480609262921150848552073010906292382340377222466620015945346818440872;\n    uint256 constant deltay2 = 6686929785585801886747369085147750642655167663948404274080476289998846601768;\n\n\n    uint256 constant IC0x = 14818478812900458102992225913018308409668384475703088663067499662922777788315;\n    uint256 constant IC0y = 10901647033164725007515459068147925796342036058280305799619846965857861709099;\n\n    uint256 constant IC1x = 16828032782869657229636903862185764285796508252015292353427738045110029470882;\n    uint256 constant IC1y = 16876070770305028267445598641339355244015598862704534388481727400951641331717;\n\n    uint256 constant IC2x = 15304480755373002414138391084023699720264920906012309695863952601627981988176;\n    uint256 constant IC2y = 4009163051339556290748848145551058149023156213541749494531529061959606838227;\n\n    uint256 constant IC3x = 16963849690984866094119713808490898308222321239194931827986712562092984530745;\n    uint256 constant IC3y = 3458477168593918947356779319414991587347052701838858364785725248244145715055;\n\n    uint256 constant IC4x = 9769239048868229064190785274196104348612006448596802490152528127147281314950;\n    uint256 constant IC4y = 10502158653775723570028518583968089926108236542140470880906875222249832279959;\n\n    uint256 constant IC5x = 16169823372981726146181950539304161855883038115899371886787139190252590776590;\n    uint256 constant IC5y = 8655382526097450639633584630116903847881078177250795121066456606139371134460;\n\n\n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[5] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, q)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n\n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n\n            checkField(calldataload(add(_pubSignals, 0)))\n\n            checkField(calldataload(add(_pubSignals, 32)))\n\n            checkField(calldataload(add(_pubSignals, 64)))\n\n            checkField(calldataload(add(_pubSignals, 96)))\n\n            checkField(calldataload(add(_pubSignals, 128)))\n\n            checkField(calldataload(add(_pubSignals, 160)))\n\n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }"
    },
    "contracts/verifiers/venmo_send_verifier_v1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 7537613082883539239998105689980695625949864158911233083307240523481447029201;\n    uint256 constant deltax2 = 18425422419094349166845299166446400283955610392693002196033474730898100891393;\n    uint256 constant deltay1 = 9734737963690957740179121580228276788359472364486142941618892845265550985341;\n    uint256 constant deltay2 = 19424219928877642960622596960718531292261548324721236723020030007333427710256;\n\n    \n    uint256 constant IC0x = 6902718247877772411363845861177050309258223353503700050311359326150519336692;\n    uint256 constant IC0y = 15825279453398516401265572637576445394013091560186110937875220954546679110159;\n    \n    uint256 constant IC1x = 2335804858433576387747825582160359354916267733138827948973385608187184828569;\n    uint256 constant IC1y = 5736008506642285963655345198014496364551739958976504633673791816202163044118;\n    \n    uint256 constant IC2x = 6269455652562704144793722062373279568471767955901279627797463015040136088132;\n    uint256 constant IC2y = 2097530588191744967177200393826023428699458382295316095274264671302200006698;\n    \n    uint256 constant IC3x = 9822862276973085434476438868692851322487547916783049654593145248962644277643;\n    uint256 constant IC3y = 13358026137961492797393341724052128319258593462853360012627607362475815103442;\n    \n    uint256 constant IC4x = 14719148997270446956997289375593821114034084437550001883662517657000734282586;\n    uint256 constant IC4y = 1998224198671702911531451107100115167770885039941574729645701907241412776308;\n    \n    uint256 constant IC5x = 359894349223066781310974365307972581164914770698407647854073977658157147230;\n    uint256 constant IC5y = 4226113369443688791926415338604034925838584747992607214489363181365627308608;\n    \n    uint256 constant IC6x = 8131352830647874407773009521188360590887607801163495436549679220199551501178;\n    uint256 constant IC6y = 2496366191763335194055513493653718797330181861495912467368843578731618007027;\n    \n    uint256 constant IC7x = 5324791436169324680862288927376094103624123876195563861346513574577173643567;\n    uint256 constant IC7y = 10539632294755752334066059856447171990510491871168341570429569842426314117653;\n    \n    uint256 constant IC8x = 21398838651908546916551334433437076903885176753396417385115556979686206468251;\n    uint256 constant IC8y = 2283165388441295638775771203114643615346617529992451266709724264297809953544;\n    \n    uint256 constant IC9x = 16450282086321400334368283708403499847573182040077819178856321188442820130414;\n    uint256 constant IC9y = 20227982940527385555692156484806747209260038014579804010296344969319860246613;\n    \n    uint256 constant IC10x = 1416849092724586759478061558363222409117668509275228664731118821895695167480;\n    uint256 constant IC10y = 14279591006307641048883156401797861581231631415414897920853119376578010808716;\n    \n    uint256 constant IC11x = 10972046352748637769234591589921324542843146653569482848432798172628944437256;\n    uint256 constant IC11y = 13951850916181885013998871924877530212665252857591601803360542322172843954667;\n    \n    uint256 constant IC12x = 10475342243781351585273160940612655577727791739250775206756870040352542452664;\n    uint256 constant IC12y = 5139068014462344879213636708300130277178459139177464895691208627008733872682;\n    \n \n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[12] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, q)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n            \n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n                \n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n                \n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n                \n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n                \n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n                \n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n                \n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\n                \n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\n                \n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\n                \n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\n                \n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\n                \n                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\n                \n                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))\n                \n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n            \n            checkField(calldataload(add(_pubSignals, 0)))\n            \n            checkField(calldataload(add(_pubSignals, 32)))\n            \n            checkField(calldataload(add(_pubSignals, 64)))\n            \n            checkField(calldataload(add(_pubSignals, 96)))\n            \n            checkField(calldataload(add(_pubSignals, 128)))\n            \n            checkField(calldataload(add(_pubSignals, 160)))\n            \n            checkField(calldataload(add(_pubSignals, 192)))\n            \n            checkField(calldataload(add(_pubSignals, 224)))\n            \n            checkField(calldataload(add(_pubSignals, 256)))\n            \n            checkField(calldataload(add(_pubSignals, 288)))\n            \n            checkField(calldataload(add(_pubSignals, 320)))\n            \n            checkField(calldataload(add(_pubSignals, 352)))\n            \n            checkField(calldataload(add(_pubSignals, 384)))\n            \n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }"
    },
    "contracts/verifiers/venmo_send_verifier_v2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 18328387051598807528249493314514145024937042250885627547959044883136494366641;\n    uint256 constant deltax2 = 3386774781507691045496398544280778263778440812515279208798807180083491280173;\n    uint256 constant deltay1 = 16821727561116842532884384419138673375540064786328931249817719916404888022536;\n    uint256 constant deltay2 = 1123664166477505744129630415618405338920235895404387079679232588612219519562;\n\n\n    uint256 constant IC0x = 683472932776948400750928183065263098669615563556360338372833924600438813516;\n    uint256 constant IC0y = 18666217517107659198468932537223289488211162204021049201152947701274582172524;\n\n    uint256 constant IC1x = 5957489728060043789412617245535794043845955108950274902279429275472126033981;\n    uint256 constant IC1y = 17213842189027108453793126183491372346749115594951602121554021001250817448283;\n\n    uint256 constant IC2x = 5280592858930732491081692246698697527250251794316036984307511741279974296201;\n    uint256 constant IC2y = 8111734476836347257234571099465898187033625933584344316720010645066801977050;\n\n    uint256 constant IC3x = 176983152191433697844590348335722945315715793420756570889736101696034089744;\n    uint256 constant IC3y = 4147783463854782141079943196300178088429603752756004708323436962592942199215;\n\n    uint256 constant IC4x = 7016641010839351826808883117249407312720210763319474150330325663058498172140;\n    uint256 constant IC4y = 15257618442351784318448796698076117344608912509409931913911370631502942212130;\n\n    uint256 constant IC5x = 15817725721802798668222148653046845952443466764768454194052249826220321621816;\n    uint256 constant IC5y = 2940267881915130534698359759164565925974426096153642581826065077020524285232;\n\n    uint256 constant IC6x = 8833333661367035240569025508763324883570403851344432159561900646778286378282;\n    uint256 constant IC6y = 3556536150047088396537732554265301999296282372311505822332350804480691191981;\n\n    uint256 constant IC7x = 9959056323665039276989174002345573767882071324121097256708298686272275486451;\n    uint256 constant IC7y = 7023002103308412666408975880294927323004827513171170207971973197470018772559;\n\n    uint256 constant IC8x = 8207282690550689468584562794282986294440142872347002351019411985498318040139;\n    uint256 constant IC8y = 8643622322844942938685778286305956077045792123184210921354210423962087823720;\n\n    uint256 constant IC9x = 12401119311682184985808768788213841283516443570850536486255767033548969139477;\n    uint256 constant IC9y = 16241900536813668741972736250522049008644456869472181028111305624265055525406;\n\n    uint256 constant IC10x = 10782959726843763353999019108675107447363568230835523629682248381458082459751;\n    uint256 constant IC10y = 14325272441282241380202625730402651125881798640016732547740500645998775923797;\n\n    uint256 constant IC11x = 38003989415781860274750588784706013486298216837357322126260012146590910783;\n    uint256 constant IC11y = 16359614766165062542993995673953446181450261979749599674250920047691643311095;\n\n    uint256 constant IC12x = 4163626116766781564865195283570334511561738797859190315348089812662616563873;\n    uint256 constant IC12y = 5621503726237114129092618034079311909999731069956955773990556602251925493627;\n\n\n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[12] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, q)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\n\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\n\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\n\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\n\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\n\n                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\n\n                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))\n\n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n\n            checkField(calldataload(add(_pubSignals, 0)))\n\n            checkField(calldataload(add(_pubSignals, 32)))\n\n            checkField(calldataload(add(_pubSignals, 64)))\n\n            checkField(calldataload(add(_pubSignals, 96)))\n\n            checkField(calldataload(add(_pubSignals, 128)))\n\n            checkField(calldataload(add(_pubSignals, 160)))\n\n            checkField(calldataload(add(_pubSignals, 192)))\n\n            checkField(calldataload(add(_pubSignals, 224)))\n\n            checkField(calldataload(add(_pubSignals, 256)))\n\n            checkField(calldataload(add(_pubSignals, 288)))\n\n            checkField(calldataload(add(_pubSignals, 320)))\n\n            checkField(calldataload(add(_pubSignals, 352)))\n\n            checkField(calldataload(add(_pubSignals, 384)))\n\n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}