{
  "address": "0x0a7537A73079C45f64623D213Cd284E9b55Fe0b7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_venmoMailserverKeyHashAdapter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVenmoMailserverKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isEmailNullified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[10]",
              "name": "signals",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct ISendProcessor.SendProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "offRamperIdHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "name": "setEmailFromAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_venmoMailserverKeyHashAdapter",
          "type": "address"
        }
      ],
      "name": "setVenmoMailserverKeyHashAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "venmoMailserverKeyHashAdapter",
      "outputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[10]",
          "name": "_pubSignals",
          "type": "uint256[10]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdd45521bec5d47a265ef894ae66d2e125db5b9e1bd7210fcfd0632bd98f4acd",
  "receipt": {
    "to": null,
    "from": "0x4e39cF8578698131c57404e8bc3eEC820EDa51d8",
    "contractAddress": "0x0a7537A73079C45f64623D213Cd284E9b55Fe0b7",
    "transactionIndex": 53,
    "gasUsed": "1598409",
    "logsBloom": "0x
    "blockHash": "0x57929fbfd0b1a352528fbeee942f228159388852aa4ecc5348f64cd0985ac816",
    "transactionHash": "0xbdd45521bec5d47a265ef894ae66d2e125db5b9e1bd7210fcfd0632bd98f4acd",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 9919482,
        "transactionHash": "0xbdd45521bec5d47a265ef894ae66d2e125db5b9e1bd7210fcfd0632bd98f4acd",
        "address": "0x0a7537A73079C45f64623D213Cd284E9b55Fe0b7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e39cf8578698131c57404e8bc3eec820eda51d8"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x57929fbfd0b1a352528fbeee942f228159388852aa4ecc5348f64cd0985ac816"
      }
    ],
    "blockNumber": 9919482,
    "cumulativeGasUsed": "12846958",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1A2dcc7AfC7Bf09bE718E54466aA18166C00E4FD",
    "0x6c90ae078d8a6009666ad061521C091f57C808db",
    "venmo@venmo.com\u0000\u0000\u0000\u0000\u0000\u0000"
  ],
  "numDeployments": 1,
  "solcInputHash": "569e9df89bd5b92f388b7102efaa2236",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_venmoMailserverKeyHashAdapter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVenmoMailserverKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isEmailNullified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[10]\",\"name\":\"signals\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct ISendProcessor.SendProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offRamperIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"name\":\"setEmailFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_venmoMailserverKeyHashAdapter\",\"type\":\"address\"}],\"name\":\"setVenmoMailserverKeyHashAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venmoMailserverKeyHashAdapter\",\"outputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_pubSignals\",\"type\":\"uint256[10]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/processors/VenmoSendProcessor.sol\":\"VenmoSendProcessor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface ISendProcessor {\\n\\n    struct SendProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[10] signals;\\n    }\\n\\n    function processProof(\\n        SendProof calldata _proof\\n    )\\n        external\\n    returns(uint256, uint256, bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0x1fd30b41054da572def59ce06918d5e5053ed1ecc84848ad3fcd88ad7c1cedf7\",\"license\":\"MIT\"},\"contracts/lib/ProofParsingUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nlibrary ProofParsingUtils {\\n\\n    /* ============ Constants ============ */\\n    uint16 private constant BYTES_IN_PACKED_BYTES = 7;  // 7 bytes in a packed item returned from circom\\n\\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\\n    // TODO: Remove console.logs and define this as a pure function instead of a view\\n    function convertPackedBytesToBytes(uint256[] memory packedBytes, uint256 signals) internal pure returns (string memory extractedString) {\\n        // Calculate max bytes as the amount of signals * 7 bytes per signal\\n        uint256 maxBytes = signals * BYTES_IN_PACKED_BYTES;\\n        uint8 state = 0;\\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * 7);\\n        uint256 nonzeroBytesArrayIndex = 0;\\n        for (uint16 i = 0; i < packedBytes.length; i++) {\\n            uint256 packedByte = packedBytes[i];\\n            uint8[] memory unpackedBytes = new uint8[](BYTES_IN_PACKED_BYTES);\\n            for (uint j = 0; j < BYTES_IN_PACKED_BYTES; j++) {\\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\\n            }\\n\\n            for (uint256 j = 0; j < BYTES_IN_PACKED_BYTES; j++) {\\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\\n                if (unpackedByte != 0) {\\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\\n                    nonzeroBytesArrayIndex++;\\n                    if (state % 2 == 0) {\\n                        state += 1;\\n                    }\\n                } else {\\n                    if (state % 2 == 1) {\\n                        state += 1;\\n                    }\\n                }\\n                packedByte = packedByte >> 8;\\n            }\\n        }\\n\\n        extractedString = string(nonzeroBytesArray);\\n        require(state == 2, \\\"Invalid final state of packed bytes in email\\\");\\n        // console.log(\\\"Characters in username: \\\", nonzeroBytesArrayIndex);\\n        require(nonzeroBytesArrayIndex <= maxBytes, \\\"Venmo id too long\\\");\\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\\n    }\\n\\n    // // Code example:\\n    function stringToUint256(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        uint256 oldResult = 0;\\n\\n        for (uint i = 0; i < b.length; i++) { // c = b[i] was not needed\\n            // UNSAFE: Check that the character is a number - we include padding 0s in Venmo ids\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                // store old value so we can check for overflows\\n                oldResult = result;\\n                result = result * 10 + (uint8(b[i]) - 48);\\n                // prevent overflows\\n                require(result >= oldResult, \\\"Overflow detected\\\");\\n            }\\n        }\\n        return result; \\n    }\\n}\\n\",\"keccak256\":\"0x04a2f3d02304e219b06a35409b7b3a146443a1de7e0d52c6eaa12750fbe43cda\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessor is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n    \\n    /* ============ Constants ============ */\\n    uint8 private constant EMAIL_ADDRESS_LENGTH = 21;   // 21 bytes in an email address\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    IKeyHashAdapter public venmoMailserverKeyHashAdapter;\\n    bytes public emailFromAddress;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\\n        string memory _emailFromAddress\\n    )\\n        Ownable()\\n    {\\n        require(bytes(_emailFromAddress).length == EMAIL_ADDRESS_LENGTH, \\\"Email from address not properly padded\\\");\\n\\n        ramp = _ramp;\\n        venmoMailserverKeyHashAdapter = _venmoMailserverKeyHashAdapter;\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setVenmoMailserverKeyHashAdapter(IKeyHashAdapter _venmoMailserverKeyHashAdapter) external onlyOwner {\\n        venmoMailserverKeyHashAdapter = _venmoMailserverKeyHashAdapter;\\n    }\\n\\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\\n        require(bytes(_emailFromAddress).length == EMAIL_ADDRESS_LENGTH, \\\"Email from address not properly padded\\\");\\n\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function getEmailFromAddress() external view returns (bytes memory) {\\n        return emailFromAddress;\\n    }\\n\\n    function getVenmoMailserverKeyHash() public view returns (bytes32) {\\n        return IKeyHashAdapter(venmoMailserverKeyHashAdapter).venmoMailserverKeyHash();\\n    }\\n}\\n\",\"keccak256\":\"0x7ec8a8a394d3c807ac28fcf5de0c2077b4d4b852fd2734bb6b435d880d330ed5\",\"license\":\"MIT\"},\"contracts/processors/VenmoSendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { BaseProcessor } from \\\"./BaseProcessor.sol\\\";\\nimport { Groth16Verifier } from \\\"../verifiers/venmo_send_verifier.sol\\\";\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\nimport { ISendProcessor } from \\\"../interfaces/ISendProcessor.sol\\\";\\nimport { ProofParsingUtils } from \\\"../lib/ProofParsingUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract VenmoSendProcessor is Groth16Verifier, ISendProcessor, BaseProcessor {\\n    \\n    using ProofParsingUtils for string;\\n    using ProofParsingUtils for uint256[];\\n\\n    /* ============ State Variables ============ */\\n\\n    mapping(bytes32 => bool) public isEmailNullified;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\\n        string memory _emailFromAddress\\n    )\\n        Groth16Verifier()\\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _emailFromAddress)\\n    {}\\n    \\n    /* ============ External Functions ============ */\\n    function processProof(\\n        ISendProcessor.SendProof calldata _proof\\n    )\\n        public\\n        override\\n        onlyRamp\\n        returns(uint256 amount, uint256 timestamp, bytes32 offRamperIdHash, bytes32 intentHash)\\n    {\\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        require(bytes32(_proof.signals[0]) == getVenmoMailserverKeyHash(), \\\"Invalid mailserver key hash\\\");\\n\\n        // Signals [1:4] are the packed from email address\\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \\\"Invalid email from address\\\");\\n\\n        // Signals [4:5] is the packed amount, multiply by 1e4 since venmo only gives us two decimals instead of 6\\n        amount = _parseSignalArray(_proof.signals, 4, 5).stringToUint256() * 1e4;\\n\\n        // Signals [5:7] are the packed timestamp\\n        timestamp = _parseSignalArray(_proof.signals, 5, 7).stringToUint256();\\n\\n        // Signals [8] is the packed offRamperIdHsdh\\n        offRamperIdHash = bytes32(_proof.signals[7]);\\n\\n        // Check if email has been used previously, if not nullify it so it can't be used again\\n        bytes32 nullifier = bytes32(_proof.signals[8]);\\n        require(!isEmailNullified[nullifier], \\\"Email has already been used\\\");\\n        isEmailNullified[nullifier] = true;\\n\\n        // Signals [9] is intentHash\\n        intentHash = bytes32(_proof.signals[9]);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _parseSignalArray(uint256[10] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\\n        uint256[] memory signalArray = new uint256[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) {\\n            signalArray[i - _from] = _signals[i];\\n        }\\n\\n        return signalArray.convertPackedBytesToBytes(_to - _from);\\n    }\\n}\\n\",\"keccak256\":\"0xcfc9f008a200bf1c2c14cf14dbd04e2d53370dab7704fb806e058a99c2e20f89\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapter {\\n    function setVenmoMailserverKeyHash(bytes32 _venmoMailserverKeyHash) external;\\n    function venmoMailserverKeyHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x67b994daa9cbc22d33c26057d40354a41eaa8579c5d2d81d258f6db4408f5144\",\"license\":\"MIT\"},\"contracts/verifiers/venmo_send_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 5253565342273198592883897010320130582847516807731630949558916452692574831217;\\n    uint256 constant IC0y = 9662322202070248628213725915817479757570062267514896029379486038336369929233;\\n    \\n    uint256 constant IC1x = 21698866184277031621793740117837253040456393749773762188162546274869786069864;\\n    uint256 constant IC1y = 5187138742468722685128672611961368023418558888401698543487693126541304393676;\\n    \\n    uint256 constant IC2x = 12753288914010911036918268717867698157960192904293862522762135152271065437412;\\n    uint256 constant IC2y = 16721436319168409689932533872234980619515097317190763083505777888444171936073;\\n    \\n    uint256 constant IC3x = 20844780833153347465501410407587748645067767399246884156186156356505404547420;\\n    uint256 constant IC3y = 4179888423477334488134092046921383865686183896272435474253976436725039347861;\\n    \\n    uint256 constant IC4x = 8740820822901849117277579595955759924566093227561988642503491844674763453328;\\n    uint256 constant IC4y = 1419347962894269139497613263726715789708033059967614143311781818735095971368;\\n    \\n    uint256 constant IC5x = 14850818706781981842294122727739017505456137841658056100020237006026576080277;\\n    uint256 constant IC5y = 7440111411683722231975351364348053501250216974156752728042829353731317122357;\\n    \\n    uint256 constant IC6x = 10392959522715085960429506171746219298280155010169025671574975948047369517938;\\n    uint256 constant IC6y = 9427913884521098205021380028834311206518142250038733528217666552228391884656;\\n    \\n    uint256 constant IC7x = 18176351483636079227216569428150507502179399901366010587347513740646448474102;\\n    uint256 constant IC7y = 5035595222405910894229259092909024127683934701873402387973042552718635096934;\\n    \\n    uint256 constant IC8x = 5901643112378580547255961564763945918950839587811019165578030635674449830434;\\n    uint256 constant IC8y = 7371818062150288322598341713424125891159053618617631138472591678845714118470;\\n    \\n    uint256 constant IC9x = 20286789177253888335044432842039693807640974783023344368779084850963089342103;\\n    uint256 constant IC9y = 13711976627769946952216324205179456239846467270080081050292212510571569474774;\\n    \\n    uint256 constant IC10x = 7329442995273785010671533581965386367698796421098341665913955720449703260549;\\n    uint256 constant IC10y = 18900760962884614285066622591546223052323667430440329182440003040714923375353;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[10] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                \\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                \\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                \\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                \\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n                \\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n            checkField(calldataload(add(_pubSignals, 160)))\\n            \\n            checkField(calldataload(add(_pubSignals, 192)))\\n            \\n            checkField(calldataload(add(_pubSignals, 224)))\\n            \\n            checkField(calldataload(add(_pubSignals, 256)))\\n            \\n            checkField(calldataload(add(_pubSignals, 288)))\\n            \\n            checkField(calldataload(add(_pubSignals, 320)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0xd19d9e4cbbe809c37dc955204c5df819f2ae3582f16faeb4cb5d6b130b61b616\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001e4d38038062001e4d833981016040819052620000349162000166565b8282826200004233620000e7565b8051601514620000a75760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b606482015260840160405180910390fd5b6001600160a01b03838116608052600180546001600160a01b0319169184169190911790556002620000da8282620002f5565b50505050505050620003c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200014d57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200017c57600080fd5b8351620001898162000137565b809350506020808501516200019e8162000137565b60408601519093506001600160401b0380821115620001bc57600080fd5b818701915087601f830112620001d157600080fd5b815181811115620001e657620001e662000150565b604051601f8201601f19908116603f0116810190838211818310171562000211576200021162000150565b816040528281528a868487010111156200022a57600080fd5b600093505b828410156200024e57848401860151818501870152928501926200022f565b60008684830101528096505050505050509250925092565b600181811c908216806200027b57607f821691505b6020821081036200029c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002f057600081815260208120601f850160051c81016020861015620002cb5750805b601f850160051c820191505b81811015620002ec57828155600101620002d7565b5050505b505050565b81516001600160401b0381111562000311576200031162000150565b620003298162000322845462000266565b84620002a2565b602080601f831160018114620003615760008415620003485750858301515b600019600386901b1c1916600185901b178555620002ec565b600085815260208120601f198616915b82811015620003925788860151825594840194600190910190840162000371565b5085821015620003b15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051611a6a620003e36000396000818160d901526102ae0152611a6a6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063ced1e97811610066578063ced1e978146101ea578063f2fde38b146101f2578063f3bb70f614610205578063f6c7226b1461021857600080fd5b80638da5cb5b146101b15780639563a257146101c2578063c0d05fed146101d557600080fd5b806315d276e1146100d457806327644b3f1461011857806355f65ba81461014b57806365cd296c14610161578063715018a61461019457806389dd2db01461019e575b600080fd5b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b6101263660046114cc565b60036020526000908152604090205460ff1681565b604051901515815260200161010f565b61015361022b565b60405190815260200161010f565b61017461016f3660046114e5565b61029e565b60408051948552602085019390935291830152606082015260800161010f565b61019c6105a0565b005b61019c6101ac366004611513565b6105b4565b6000546001600160a01b03166100fb565b6001546100fb906001600160a01b031681565b6101dd6105de565b60405161010f919061155b565b6101dd61066c565b61019c610200366004611513565b6106fe565b61013b6102133660046115a5565b610777565b61019c610226366004611621565b610f1f565b6001546040805163fe1a279160e01b815290516000926001600160a01b03169163fe1a27919160048083019260209291908290030181865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029991906116d2565b905090565b6000808080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103205760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b604080516379ddb87b60e11b8152309163f3bb70f6916103539189919082019060c08301906101008401906004016116eb565b602060405180830381865afa158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190611738565b6103d05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610317565b6103d861022b565b6101008601351461042b5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610317565b600061043e866101000160016004610f97565b9050600260405161044f91906117a4565b604051809103902081604051602001610468919061181a565b60405160208183030381529060405280519060200120146104cb5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610317565b6104e46104df876101000160046005610f97565b61106f565b6104f09061271061184c565b94506105066104df876101000160056007610f97565b6102008701356000818152600360205260409020549195506101e088013594509060ff16156105775760405162461bcd60e51b815260206004820152601b60248201527f456d61696c2068617320616c7265616479206265656e207573656400000000006044820152606401610317565b6000908152600360205260409020805460ff191660011790555092949193909250610220013590565b6105a861116b565b6105b260006111c5565b565b6105bc61116b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600280546105eb90611770565b80601f016020809104026020016040519081016040528092919081815260200182805461061790611770565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b505050505081565b60606002805461067b90611770565b80601f01602080910402602001604051908101604052809291908181526020018280546106a790611770565b80156106f45780601f106106c9576101008083540402835291602001916106f4565b820191906000526020600020905b8154815290600101906020018083116106d757829003601f168201915b5050505050905090565b61070661116b565b6001600160a01b03811661076b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610317565b610774816111c5565b50565b6000610e69565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610774576000805260206000f35b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816107e2576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91505080610813576000805260206000f35b5050505050565b7f0b9d69a0ce54b74c409d5f38ed1a8531415d5cb19f62a77f5d7d0033db77827185527f155cae396b1df6b00aad22b3aae5ebeab857840d914f8d2b1b530487cbb92c116020860152600060808601866108b787357f0b77d10547c45d25c9ddb7a483bf29b7ae542ea4f8303198ee4cd2abc573efcc7f2ff91f7f22fa9e5d7b79e17434d93278172f1475c92f4cf8fd9f5589f81a4b68846107af565b61090760208801357f24f7ff606f126ec3f17ae41d5f94c36dad0a9c229d5c6ccf1cfda0f5d2e3e1497f1c321b10d03ceec57e07a058969d440079a0525bc33216be5c64998a1b5954e4846107af565b61095760408801357f093dbba67ed89d6c6e2e8c247c08f08aefbb66d504cb54b64c9dcfd6e2b1b8957f2e15ba54c2b915f389c5fb22d8195e6daca4f493c77a769819ab345bb71da15c846107af565b6109a760608801357f0323528df077fc9265b0632e90a0c76462d4940cf363a93911bb1fce43fffe287f1353211795699463ad5e51abb335e09ab44c245b6e6c030fd243daa0eaad7390846107af565b6109f760808801357f1072f42e19a4b2ff987ee86889cf5ca0aa2e4edc757f977f88120bf371b545357f20d543f8e63ec796b24757a8da254d80c71c1b8615fc2e875c0fe57b8a01ad95846107af565b610a4760a08801357f14d80299afa8d5c816dda7189d1fa18f291d2f29c34a38679202ad3b584f17707f16fa34e5dae169ef821cbf6090bd5ba311631c855302997af3b17026434a3b72846107af565b610a9760c08801357f0b220bbfb69467b9c23901bea1390017c10e01ee1e4493c8d0aecf62db6cdb667f282f734b339ba716abffc54573e7034afba8afabe59000dc07f80033f9a9a7f6846107af565b610ae760e08801357f104c4d18fa9053f81f530e7bed240eee7079ef33aa69370f4fc728309d8737467f0d0c362d50e3348ecb4f3b4f99967526b8b03eb46e4746ab04daae00e4f16222846107af565b610b386101008801357f1e50b4287543b7ba89fae82c502a9e731260fb4d0a93bb67fdcea5b383b9ecd67f2cd9ea6ff08f9cd3ffb5bccdd619b503a6b7a557732085db67b6126dad163e97846107af565b610b896101208801357f29c9739c297ba9d319c99c123d1404c15965dcd4d365dfea45dd14bfbf7efaf97f10345156644e8d327e3d7ff0ac06ab950a7e944c3f230fc2af3064b24367b185846107af565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610e81600084013561077e565b610e8e602084013561077e565b610e9b604084013561077e565b610ea8606084013561077e565b610eb5608084013561077e565b610ec260a084013561077e565b610ecf60c084013561077e565b610edc60e084013561077e565b610eea61010084013561077e565b610ef861012084013561077e565b610f0661014084013561077e565b610f13818486888a61081a565b90508060005260206000f35b610f2761116b565b8051601514610f875760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b6064820152608401610317565b6002610f9382826118b2565b5050565b60606000610fa58484611972565b60ff1667ffffffffffffffff811115610fc057610fc061160b565b604051908082528060200260200182016040528015610fe9578160200160208202803683370190505b50905060ff84165b8360ff1681101561104e578581600a811061100e5761100e61175a565b60200201358261102160ff88168461198b565b815181106110315761103161175a565b6020908102919091010152806110468161199e565b915050610ff1565b5061106661105c8585611972565b829060ff16611215565b95945050505050565b6000818180805b83518110156111615760308482815181106110935761109361175a565b016020015160f81c108015906110c3575060398482815181106110b8576110b861175a565b016020015160f81c11155b1561114f5782915060308482815181106110df576110df61175a565b01602001516110f1919060f81c611972565b60ff166110ff84600a61184c565b61110991906119b7565b92508183101561114f5760405162461bcd60e51b815260206004820152601160248201527013dd995c999b1bddc819195d1958dd1959607a1b6044820152606401610317565b806111598161199e565b915050611076565b5090949350505050565b6000546001600160a01b031633146105b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610317565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061122460078461184c565b905060008085516007611237919061184c565b67ffffffffffffffff81111561124f5761124f61160b565b6040519080825280601f01601f191660200182016040528015611279576020820181803683370190505b5090506000805b87518161ffff161015611412576000888261ffff16815181106112a5576112a561175a565b6020908102919091018101516040805160078082526101008201909252919350600092820160e08036833701905050905060005b6007811015611326576112ed81600861184c565b83901c8282815181106113025761130261175a565b60ff909216602092830291909101909101528061131e8161199e565b9150506112d9565b5060005b60078110156113fc5760008282815181106113475761134761175a565b602002602001015160ff169050806000146113bf578060f81b8787815181106113725761137261175a565b60200101906001600160f81b031916908160001a905350856113938161199e565b96506113a290506002896119ca565b60ff166000036113ba576113b76001896119fa565b97505b6113e2565b6113ca6002896119ca565b60ff166001036113e2576113df6001896119fa565b97505b5060089290921c91806113f48161199e565b91505061132a565b505050808061140a90611a13565b915050611280565b508194508260ff1660021461147e5760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642066696e616c207374617465206f66207061636b656420627960448201526b1d195cc81a5b88195b585a5b60a21b6064820152608401610317565b838111156114c25760405162461bcd60e51b815260206004820152601160248201527056656e6d6f20696420746f6f206c6f6e6760781b6044820152606401610317565b5050505092915050565b6000602082840312156114de57600080fd5b5035919050565b600061024082840312156114f857600080fd5b50919050565b6001600160a01b038116811461077457600080fd5b60006020828403121561152557600080fd5b8135611530816114fe565b9392505050565b60005b8381101561155257818101518382015260200161153a565b50506000910152565b602081526000825180602084015261157a816040850160208701611537565b601f01601f19169190910160400192915050565b806040810183101561159f57600080fd5b92915050565b6000806000806102408086880312156115bd57600080fd5b6115c7878761158e565b945060c08601878111156115da57600080fd5b6040870194506115ea888261158e565b9350508681870111156115fc57600080fd5b50929591945092610100019150565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561163357600080fd5b813567ffffffffffffffff8082111561164b57600080fd5b818401915084601f83011261165f57600080fd5b8135818111156116715761167161160b565b604051601f8201601f19908116603f011681019083821181831017156116995761169961160b565b816040528281528760208487010111156116b257600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156116e457600080fd5b5051919050565b61024081016040808784378083018660005b600281101561171a578382843791830191908301906001016116fd565b505050808560c0850137506101408361010084013795945050505050565b60006020828403121561174a57600080fd5b8151801515811461153057600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061178457607f821691505b6020821081036114f857634e487b7160e01b600052602260045260246000fd5b60008083546117b281611770565b600182811680156117ca57600181146117df5761180e565b60ff198416875282151583028701945061180e565b8760005260208060002060005b858110156118055781548a8201529084019082016117ec565b50505082870194505b50929695505050505050565b6000825161182c818460208701611537565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761159f5761159f611836565b601f8211156118ad57600081815260208120601f850160051c8101602086101561188a5750805b601f850160051c820191505b818110156118a957828155600101611896565b5050505b505050565b815167ffffffffffffffff8111156118cc576118cc61160b565b6118e0816118da8454611770565b84611863565b602080601f83116001811461191557600084156118fd5750858301515b600019600386901b1c1916600185901b1785556118a9565b600085815260208120601f198616915b8281101561194457888601518255948401946001909101908401611925565b50858210156119625787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff828116828216039081111561159f5761159f611836565b8181038181111561159f5761159f611836565b6000600182016119b0576119b0611836565b5060010190565b8082018082111561159f5761159f611836565b600060ff8316806119eb57634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff818116838216019081111561159f5761159f611836565b600061ffff808316818103611a2a57611a2a611836565b600101939250505056fea26469706673582212200dc7b7c9968a0828cdb5223e368a3e1d9407e9a6f000454b958e5c7f525af9cb64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063ced1e97811610066578063ced1e978146101ea578063f2fde38b146101f2578063f3bb70f614610205578063f6c7226b1461021857600080fd5b80638da5cb5b146101b15780639563a257146101c2578063c0d05fed146101d557600080fd5b806315d276e1146100d457806327644b3f1461011857806355f65ba81461014b57806365cd296c14610161578063715018a61461019457806389dd2db01461019e575b600080fd5b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b6101263660046114cc565b60036020526000908152604090205460ff1681565b604051901515815260200161010f565b61015361022b565b60405190815260200161010f565b61017461016f3660046114e5565b61029e565b60408051948552602085019390935291830152606082015260800161010f565b61019c6105a0565b005b61019c6101ac366004611513565b6105b4565b6000546001600160a01b03166100fb565b6001546100fb906001600160a01b031681565b6101dd6105de565b60405161010f919061155b565b6101dd61066c565b61019c610200366004611513565b6106fe565b61013b6102133660046115a5565b610777565b61019c610226366004611621565b610f1f565b6001546040805163fe1a279160e01b815290516000926001600160a01b03169163fe1a27919160048083019260209291908290030181865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029991906116d2565b905090565b6000808080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103205760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b604080516379ddb87b60e11b8152309163f3bb70f6916103539189919082019060c08301906101008401906004016116eb565b602060405180830381865afa158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190611738565b6103d05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610317565b6103d861022b565b6101008601351461042b5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610317565b600061043e866101000160016004610f97565b9050600260405161044f91906117a4565b604051809103902081604051602001610468919061181a565b60405160208183030381529060405280519060200120146104cb5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610317565b6104e46104df876101000160046005610f97565b61106f565b6104f09061271061184c565b94506105066104df876101000160056007610f97565b6102008701356000818152600360205260409020549195506101e088013594509060ff16156105775760405162461bcd60e51b815260206004820152601b60248201527f456d61696c2068617320616c7265616479206265656e207573656400000000006044820152606401610317565b6000908152600360205260409020805460ff191660011790555092949193909250610220013590565b6105a861116b565b6105b260006111c5565b565b6105bc61116b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600280546105eb90611770565b80601f016020809104026020016040519081016040528092919081815260200182805461061790611770565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b505050505081565b60606002805461067b90611770565b80601f01602080910402602001604051908101604052809291908181526020018280546106a790611770565b80156106f45780601f106106c9576101008083540402835291602001916106f4565b820191906000526020600020905b8154815290600101906020018083116106d757829003601f168201915b5050505050905090565b61070661116b565b6001600160a01b03811661076b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610317565b610774816111c5565b50565b6000610e69565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610774576000805260206000f35b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816107e2576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91505080610813576000805260206000f35b5050505050565b7f0b9d69a0ce54b74c409d5f38ed1a8531415d5cb19f62a77f5d7d0033db77827185527f155cae396b1df6b00aad22b3aae5ebeab857840d914f8d2b1b530487cbb92c116020860152600060808601866108b787357f0b77d10547c45d25c9ddb7a483bf29b7ae542ea4f8303198ee4cd2abc573efcc7f2ff91f7f22fa9e5d7b79e17434d93278172f1475c92f4cf8fd9f5589f81a4b68846107af565b61090760208801357f24f7ff606f126ec3f17ae41d5f94c36dad0a9c229d5c6ccf1cfda0f5d2e3e1497f1c321b10d03ceec57e07a058969d440079a0525bc33216be5c64998a1b5954e4846107af565b61095760408801357f093dbba67ed89d6c6e2e8c247c08f08aefbb66d504cb54b64c9dcfd6e2b1b8957f2e15ba54c2b915f389c5fb22d8195e6daca4f493c77a769819ab345bb71da15c846107af565b6109a760608801357f0323528df077fc9265b0632e90a0c76462d4940cf363a93911bb1fce43fffe287f1353211795699463ad5e51abb335e09ab44c245b6e6c030fd243daa0eaad7390846107af565b6109f760808801357f1072f42e19a4b2ff987ee86889cf5ca0aa2e4edc757f977f88120bf371b545357f20d543f8e63ec796b24757a8da254d80c71c1b8615fc2e875c0fe57b8a01ad95846107af565b610a4760a08801357f14d80299afa8d5c816dda7189d1fa18f291d2f29c34a38679202ad3b584f17707f16fa34e5dae169ef821cbf6090bd5ba311631c855302997af3b17026434a3b72846107af565b610a9760c08801357f0b220bbfb69467b9c23901bea1390017c10e01ee1e4493c8d0aecf62db6cdb667f282f734b339ba716abffc54573e7034afba8afabe59000dc07f80033f9a9a7f6846107af565b610ae760e08801357f104c4d18fa9053f81f530e7bed240eee7079ef33aa69370f4fc728309d8737467f0d0c362d50e3348ecb4f3b4f99967526b8b03eb46e4746ab04daae00e4f16222846107af565b610b386101008801357f1e50b4287543b7ba89fae82c502a9e731260fb4d0a93bb67fdcea5b383b9ecd67f2cd9ea6ff08f9cd3ffb5bccdd619b503a6b7a557732085db67b6126dad163e97846107af565b610b896101208801357f29c9739c297ba9d319c99c123d1404c15965dcd4d365dfea45dd14bfbf7efaf97f10345156644e8d327e3d7ff0ac06ab950a7e944c3f230fc2af3064b24367b185846107af565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610e81600084013561077e565b610e8e602084013561077e565b610e9b604084013561077e565b610ea8606084013561077e565b610eb5608084013561077e565b610ec260a084013561077e565b610ecf60c084013561077e565b610edc60e084013561077e565b610eea61010084013561077e565b610ef861012084013561077e565b610f0661014084013561077e565b610f13818486888a61081a565b90508060005260206000f35b610f2761116b565b8051601514610f875760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b6064820152608401610317565b6002610f9382826118b2565b5050565b60606000610fa58484611972565b60ff1667ffffffffffffffff811115610fc057610fc061160b565b604051908082528060200260200182016040528015610fe9578160200160208202803683370190505b50905060ff84165b8360ff1681101561104e578581600a811061100e5761100e61175a565b60200201358261102160ff88168461198b565b815181106110315761103161175a565b6020908102919091010152806110468161199e565b915050610ff1565b5061106661105c8585611972565b829060ff16611215565b95945050505050565b6000818180805b83518110156111615760308482815181106110935761109361175a565b016020015160f81c108015906110c3575060398482815181106110b8576110b861175a565b016020015160f81c11155b1561114f5782915060308482815181106110df576110df61175a565b01602001516110f1919060f81c611972565b60ff166110ff84600a61184c565b61110991906119b7565b92508183101561114f5760405162461bcd60e51b815260206004820152601160248201527013dd995c999b1bddc819195d1958dd1959607a1b6044820152606401610317565b806111598161199e565b915050611076565b5090949350505050565b6000546001600160a01b031633146105b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610317565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061122460078461184c565b905060008085516007611237919061184c565b67ffffffffffffffff81111561124f5761124f61160b565b6040519080825280601f01601f191660200182016040528015611279576020820181803683370190505b5090506000805b87518161ffff161015611412576000888261ffff16815181106112a5576112a561175a565b6020908102919091018101516040805160078082526101008201909252919350600092820160e08036833701905050905060005b6007811015611326576112ed81600861184c565b83901c8282815181106113025761130261175a565b60ff909216602092830291909101909101528061131e8161199e565b9150506112d9565b5060005b60078110156113fc5760008282815181106113475761134761175a565b602002602001015160ff169050806000146113bf578060f81b8787815181106113725761137261175a565b60200101906001600160f81b031916908160001a905350856113938161199e565b96506113a290506002896119ca565b60ff166000036113ba576113b76001896119fa565b97505b6113e2565b6113ca6002896119ca565b60ff166001036113e2576113df6001896119fa565b97505b5060089290921c91806113f48161199e565b91505061132a565b505050808061140a90611a13565b915050611280565b508194508260ff1660021461147e5760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642066696e616c207374617465206f66207061636b656420627960448201526b1d195cc81a5b88195b585a5b60a21b6064820152608401610317565b838111156114c25760405162461bcd60e51b815260206004820152601160248201527056656e6d6f20696420746f6f206c6f6e6760781b6044820152606401610317565b5050505092915050565b6000602082840312156114de57600080fd5b5035919050565b600061024082840312156114f857600080fd5b50919050565b6001600160a01b038116811461077457600080fd5b60006020828403121561152557600080fd5b8135611530816114fe565b9392505050565b60005b8381101561155257818101518382015260200161153a565b50506000910152565b602081526000825180602084015261157a816040850160208701611537565b601f01601f19169190910160400192915050565b806040810183101561159f57600080fd5b92915050565b6000806000806102408086880312156115bd57600080fd5b6115c7878761158e565b945060c08601878111156115da57600080fd5b6040870194506115ea888261158e565b9350508681870111156115fc57600080fd5b50929591945092610100019150565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561163357600080fd5b813567ffffffffffffffff8082111561164b57600080fd5b818401915084601f83011261165f57600080fd5b8135818111156116715761167161160b565b604051601f8201601f19908116603f011681019083821181831017156116995761169961160b565b816040528281528760208487010111156116b257600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156116e457600080fd5b5051919050565b61024081016040808784378083018660005b600281101561171a578382843791830191908301906001016116fd565b505050808560c0850137506101408361010084013795945050505050565b60006020828403121561174a57600080fd5b8151801515811461153057600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061178457607f821691505b6020821081036114f857634e487b7160e01b600052602260045260246000fd5b60008083546117b281611770565b600182811680156117ca57600181146117df5761180e565b60ff198416875282151583028701945061180e565b8760005260208060002060005b858110156118055781548a8201529084019082016117ec565b50505082870194505b50929695505050505050565b6000825161182c818460208701611537565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761159f5761159f611836565b601f8211156118ad57600081815260208120601f850160051c8101602086101561188a5750805b601f850160051c820191505b818110156118a957828155600101611896565b5050505b505050565b815167ffffffffffffffff8111156118cc576118cc61160b565b6118e0816118da8454611770565b84611863565b602080601f83116001811461191557600084156118fd5750858301515b600019600386901b1c1916600185901b1785556118a9565b600085815260208120601f198616915b8281101561194457888601518255948401946001909101908401611925565b50858210156119625787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff828116828216039081111561159f5761159f611836565b8181038181111561159f5761159f611836565b6000600182016119b0576119b0611836565b5060010190565b8082018082111561159f5761159f611836565b600060ff8316806119eb57634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff818116838216019081111561159f5761159f611836565b600061ffff808316818103611a2a57611a2a611836565b600101939250505056fea26469706673582212200dc7b7c9968a0828cdb5223e368a3e1d9407e9a6f000454b958e5c7f525af9cb64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/processors/VenmoSendProcessor.sol:VenmoSendProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3021,
        "contract": "contracts/processors/VenmoSendProcessor.sol:VenmoSendProcessor",
        "label": "venmoMailserverKeyHashAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKeyHashAdapter)3778"
      },
      {
        "astId": 3023,
        "contract": "contracts/processors/VenmoSendProcessor.sol:VenmoSendProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3552,
        "contract": "contracts/processors/VenmoSendProcessor.sol:VenmoSendProcessor",
        "label": "isEmailNullified",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IKeyHashAdapter)3778": {
        "encoding": "inplace",
        "label": "contract IKeyHashAdapter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}