{
  "address": "0xAf0196f22a1383B779E3f833AD35BFf38722c8AD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_venmoMailserverKeyHashAdapter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVenmoMailserverKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[5]",
              "name": "signals",
              "type": "uint256[5]"
            }
          ],
          "internalType": "struct IRegistrationProcessor.RegistrationProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "userIdHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "name": "setEmailFromAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_venmoMailserverKeyHashAdapter",
          "type": "address"
        }
      ],
      "name": "setVenmoMailserverKeyHashAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "venmoMailserverKeyHashAdapter",
      "outputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[5]",
          "name": "_pubSignals",
          "type": "uint256[5]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1cb68cd30ecb26f2b2a914909d1f99de337c413fcc22ea296307b6caf906c40d",
  "receipt": {
    "to": null,
    "from": "0x4e39cF8578698131c57404e8bc3eEC820EDa51d8",
    "contractAddress": "0xAf0196f22a1383B779E3f833AD35BFf38722c8AD",
    "transactionIndex": 9,
    "gasUsed": "1367881",
    "logsBloom": "0x
    "blockHash": "0xb6ade7683e07f300ae5e6354dde76d750af7269711a86129da2610082741d2a2",
    "transactionHash": "0x1cb68cd30ecb26f2b2a914909d1f99de337c413fcc22ea296307b6caf906c40d",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 9850572,
        "transactionHash": "0x1cb68cd30ecb26f2b2a914909d1f99de337c413fcc22ea296307b6caf906c40d",
        "address": "0xAf0196f22a1383B779E3f833AD35BFf38722c8AD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e39cf8578698131c57404e8bc3eec820eda51d8"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xb6ade7683e07f300ae5e6354dde76d750af7269711a86129da2610082741d2a2"
      }
    ],
    "blockNumber": 9850572,
    "cumulativeGasUsed": "2275990",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x75422735DD94dfD04b7ef5D7044Aba0ce4E3a7A6",
    "0xaF4c9cb40eAFc51E39707aCDaA4eF3e6FF6e896c",
    "venmo@venmo.com\u0000\u0000\u0000\u0000\u0000\u0000"
  ],
  "numDeployments": 1,
  "solcInputHash": "0f6f733793778c923a11e6741a881b15",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_venmoMailserverKeyHashAdapter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVenmoMailserverKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"signals\",\"type\":\"uint256[5]\"}],\"internalType\":\"struct IRegistrationProcessor.RegistrationProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"userIdHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"name\":\"setEmailFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_venmoMailserverKeyHashAdapter\",\"type\":\"address\"}],\"name\":\"setVenmoMailserverKeyHashAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venmoMailserverKeyHashAdapter\",\"outputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_pubSignals\",\"type\":\"uint256[5]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/processors/VenmoRegistrationProcessor.sol\":\"VenmoRegistrationProcessor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IRegistrationProcessor {\\n\\n    struct RegistrationProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[5] signals;\\n    }\\n\\n    function processProof(\\n        RegistrationProof calldata _proof\\n    )\\n        external\\n        view\\n    returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc80e1b5561af1a8631547c72e6c6dcdf4e66c06b3eb34b1a8db1bb0f6d3ea90f\",\"license\":\"MIT\"},\"contracts/lib/ProofParsingUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nlibrary ProofParsingUtils {\\n\\n    /* ============ Constants ============ */\\n    uint16 private constant BYTES_IN_PACKED_BYTES = 7;  // 7 bytes in a packed item returned from circom\\n\\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\\n    // TODO: Remove console.logs and define this as a pure function instead of a view\\n    function convertPackedBytesToBytes(uint256[] memory packedBytes, uint256 signals) internal pure returns (string memory extractedString) {\\n        // Calculate max bytes as the amount of signals * 7 bytes per signal\\n        uint256 maxBytes = signals * BYTES_IN_PACKED_BYTES;\\n        uint8 state = 0;\\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * 7);\\n        uint256 nonzeroBytesArrayIndex = 0;\\n        for (uint16 i = 0; i < packedBytes.length; i++) {\\n            uint256 packedByte = packedBytes[i];\\n            uint8[] memory unpackedBytes = new uint8[](BYTES_IN_PACKED_BYTES);\\n            for (uint j = 0; j < BYTES_IN_PACKED_BYTES; j++) {\\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\\n            }\\n\\n            for (uint256 j = 0; j < BYTES_IN_PACKED_BYTES; j++) {\\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\\n                if (unpackedByte != 0) {\\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\\n                    nonzeroBytesArrayIndex++;\\n                    if (state % 2 == 0) {\\n                        state += 1;\\n                    }\\n                } else {\\n                    if (state % 2 == 1) {\\n                        state += 1;\\n                    }\\n                }\\n                packedByte = packedByte >> 8;\\n            }\\n        }\\n\\n        extractedString = string(nonzeroBytesArray);\\n        require(state == 2, \\\"Invalid final state of packed bytes in email\\\");\\n        // console.log(\\\"Characters in username: \\\", nonzeroBytesArrayIndex);\\n        require(nonzeroBytesArrayIndex <= maxBytes, \\\"Venmo id too long\\\");\\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\\n    }\\n\\n    // // Code example:\\n    function stringToUint256(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        uint256 oldResult = 0;\\n\\n        for (uint i = 0; i < b.length; i++) { // c = b[i] was not needed\\n            // UNSAFE: Check that the character is a number - we include padding 0s in Venmo ids\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                // store old value so we can check for overflows\\n                oldResult = result;\\n                result = result * 10 + (uint8(b[i]) - 48);\\n                // prevent overflows\\n                require(result >= oldResult, \\\"Overflow detected\\\");\\n            }\\n        }\\n        return result; \\n    }\\n}\\n\",\"keccak256\":\"0x04a2f3d02304e219b06a35409b7b3a146443a1de7e0d52c6eaa12750fbe43cda\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessor is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n    \\n    /* ============ Constants ============ */\\n    uint8 private constant EMAIL_ADDRESS_LENGTH = 21;   // 21 bytes in an email address\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    IKeyHashAdapter public venmoMailserverKeyHashAdapter;\\n    bytes public emailFromAddress;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\\n        string memory _emailFromAddress\\n    )\\n        Ownable()\\n    {\\n        require(bytes(_emailFromAddress).length == EMAIL_ADDRESS_LENGTH, \\\"Email from address not properly padded\\\");\\n\\n        ramp = _ramp;\\n        venmoMailserverKeyHashAdapter = _venmoMailserverKeyHashAdapter;\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setVenmoMailserverKeyHashAdapter(IKeyHashAdapter _venmoMailserverKeyHashAdapter) external onlyOwner {\\n        venmoMailserverKeyHashAdapter = _venmoMailserverKeyHashAdapter;\\n    }\\n\\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\\n        require(bytes(_emailFromAddress).length == EMAIL_ADDRESS_LENGTH, \\\"Email from address not properly padded\\\");\\n\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function getEmailFromAddress() external view returns (bytes memory) {\\n        return emailFromAddress;\\n    }\\n\\n    function getVenmoMailserverKeyHash() public view returns (bytes32) {\\n        return IKeyHashAdapter(venmoMailserverKeyHashAdapter).venmoMailserverKeyHash();\\n    }\\n}\\n\",\"keccak256\":\"0x7ec8a8a394d3c807ac28fcf5de0c2077b4d4b852fd2734bb6b435d880d330ed5\",\"license\":\"MIT\"},\"contracts/processors/VenmoRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { BaseProcessor } from \\\"./BaseProcessor.sol\\\";\\nimport { Groth16Verifier } from \\\"../verifiers/venmo_registration_verifier.sol\\\";\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\nimport { IRegistrationProcessor } from \\\"../interfaces/IRegistrationProcessor.sol\\\";\\nimport { ProofParsingUtils } from \\\"../lib/ProofParsingUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract VenmoRegistrationProcessor is Groth16Verifier, IRegistrationProcessor, BaseProcessor {\\n\\n    using ProofParsingUtils for string;\\n    using ProofParsingUtils for uint256[];\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\\n        string memory _emailFromAddress\\n    )\\n        Groth16Verifier()\\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _emailFromAddress)\\n    {}\\n\\n    /* ============ External Functions ============ */\\n\\n    function processProof(\\n        IRegistrationProcessor.RegistrationProof calldata _proof\\n    )\\n        public\\n        view\\n        override\\n        onlyRamp\\n        returns(bytes32 userIdHash)\\n    {\\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        require(bytes32(_proof.signals[0]) == getVenmoMailserverKeyHash(), \\\"Invalid mailserver key hash\\\");\\n\\n        // Signals [1:4] are the packed from email address\\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \\\"Invalid email from address\\\");\\n\\n        // Signals [4] is the packed onRamperIdHash\\n        userIdHash = bytes32(_proof.signals[4]);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _parseSignalArray(uint256[5] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\\n        uint256[] memory signalArray = new uint256[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) {\\n            signalArray[i - _from] = _signals[i];\\n        }\\n\\n        return signalArray.convertPackedBytesToBytes(_to - _from);\\n    }\\n}\\n\",\"keccak256\":\"0x1c8c0805ab6c0555222845e2ae304e9b66b4e5be2dbb8ebda698a784edf7b547\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapter {\\n    function setVenmoMailserverKeyHash(bytes32 _venmoMailserverKeyHash) external;\\n    function venmoMailserverKeyHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x67b994daa9cbc22d33c26057d40354a41eaa8579c5d2d81d258f6db4408f5144\",\"license\":\"MIT\"},\"contracts/verifiers/venmo_registration_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 3638055976240676950045914605184426186597004615745986686038953406245495055165;\\n    uint256 constant IC0y = 16580564302397884894686747371614621505423818050264105408618492724162463600258;\\n    \\n    uint256 constant IC1x = 13671799550941101337898911366005654157020554619411235724918392849720960126453;\\n    uint256 constant IC1y = 9063600987533983624206648551897772287475948902669090658947862707506221067536;\\n    \\n    uint256 constant IC2x = 10717460343505877625375213399740772334181119576331451830359099103494342280998;\\n    uint256 constant IC2y = 21392639189263189008410083767410230716792241451084607416269790595121148311396;\\n    \\n    uint256 constant IC3x = 4424627419458254518939352063068558728162230397785436024066659393088990984847;\\n    uint256 constant IC3y = 17495470518296234486945548814862132872393269764961428069427993893495233443459;\\n    \\n    uint256 constant IC4x = 20819625066663493543415726212141879670533970698639812938463547784617922895791;\\n    uint256 constant IC4y = 12155160903133221011449346469637692449020342959468404811727829377687555417180;\\n    \\n    uint256 constant IC5x = 909148778728537069800451405495423362225514068773347186404420088866799591084;\\n    uint256 constant IC5y = 8254929490013229888848574330702196604654492185521547568824138621285335703831;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[5] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n            checkField(calldataload(add(_pubSignals, 160)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x75e97ad51dceb87bb2aa5f54e48937bc011ad8e54390064ff2c87a2d61dfd911\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001a2238038062001a22833981016040819052620000349162000166565b8282826200004233620000e7565b8051601514620000a75760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b606482015260840160405180910390fd5b6001600160a01b03838116608052600180546001600160a01b0319169184169190911790556002620000da8282620002f5565b50505050505050620003c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200014d57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200017c57600080fd5b8351620001898162000137565b809350506020808501516200019e8162000137565b60408601519093506001600160401b0380821115620001bc57600080fd5b818701915087601f830112620001d157600080fd5b815181811115620001e657620001e662000150565b604051601f8201601f19908116603f0116810190838211818310171562000211576200021162000150565b816040528281528a868487010111156200022a57600080fd5b600093505b828410156200024e57848401860151818501870152928501926200022f565b60008684830101528096505050505050509250925092565b600181811c908216806200027b57607f821691505b6020821081036200029c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002f057600081815260208120601f850160051c81016020861015620002cb5750805b601f850160051c820191505b81811015620002ec57828155600101620002d7565b5050505b505050565b81516001600160401b0381111562000311576200031162000150565b620003298162000322845462000266565b84620002a2565b602080601f831160018114620003615760008415620003485750858301515b600019600386901b1c1916600185901b178555620002ec565b600085815260208120601f198616915b82811015620003925788860151825594840194600190910190840162000371565b5085821015620003b15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161163f620003e36000396000818160be01526101da015261163f6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101665780639563a25714610177578063c0d05fed1461018a578063ced1e9781461019f578063f2fde38b146101a7578063f6c7226b146101ba57600080fd5b806315d276e1146100b957806317c8ecf2146100fd57806334baeab91461011e57806355f65ba814610141578063715018a61461014957806389dd2db014610153575b600080fd5b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61011061010b3660046110ce565b6101cd565b6040519081526020016100f4565b61013161012c3660046110fe565b610401565b60405190151581526020016100f4565b6101106109d6565b610151610a49565b005b610151610161366004611179565b610a5d565b6000546001600160a01b03166100e0565b6001546100e0906001600160a01b031681565b610192610a87565b6040516100f491906111c1565b610192610b15565b6101516101b5366004611179565b610ba7565b6101516101c836600461120a565b610c1d565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461024c5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b604080516334baeab960e01b815230916334baeab99161027f9186919082019060c08301906101008401906004016112bb565b602060405180830381865afa15801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c09190611307565b6102fc5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610243565b6103046109d6565b610100830135146103575760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610243565b600061036a836101000160016004610c95565b9050600260405161037b9190611373565b60405180910390208160405160200161039491906113e9565b60405160208183030381529060405280519060200120146103f75760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610243565b5050610180013590565b6000610964565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610439576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa91508161046f576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806104a0576000805260206000f35b5050505050565b7f080b111409427857a11fb6d56017c4872f4767ef6a94a1cb31d99c8838f7233d85527f24a8444eec587e168d14532828d57b9468d81d7e1e208a889c5e76fb934d0e8260208601526000608086018661054487357f1409d0fd4daa1325d22e1c06cab97b1366eabf210a78f94a922d545cc58aad107f1e39f6ddda68dd040b54ab00326b5f1f19eeb27929e73748a4c6a54944088df58461043c565b61059460208801357f2f4bce009a3e9d5729eac702d31bf118b4a3e2dbb3db3366baab11693447b7647f17b1de1a42410fa13d92db3084d90a070d68b5480b5458a5b2328afa834187268461043c565b6105e460408801357f26ae15dc8e6cd97513416e56f21745bb37272fb4b8649edfb14e6ef080e1f6837f09c840186336539d4d22ef1369d4e3080550156b451a6a3fa882223e376fba8f8461043c565b61063460608801357f1adf93c7d84ff6c0cc7b994d84b54882e4d8038f7aa0d18e571e2ea1693c245c7f2e077d7d85d2731eff939448f410f081c6e3246f3910a40c0b378ecae4d39faf8461043c565b61068460808801357f12401fe060e41942a8461ee9011316390c477dcbf41bc16de3099eaf3e9e21177f02028f5a6b644079aa95025995b96653bc9fca169520c35421733e3fecbf9eac8461043c565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b604051610380810160405261097c6000840135610408565b6109896020840135610408565b6109966040840135610408565b6109a36060840135610408565b6109b06080840135610408565b6109bd60a0840135610408565b6109ca818486888a6104a7565b90508060005260206000f35b6001546040805163fe1a279160e01b815290516000926001600160a01b03169163fe1a27919160048083019260209291908290030181865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190611405565b905090565b610a51610d6d565b610a5b6000610dc7565b565b610a65610d6d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60028054610a949061133f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac09061133f565b8015610b0d5780601f10610ae257610100808354040283529160200191610b0d565b820191906000526020600020905b815481529060010190602001808311610af057829003601f168201915b505050505081565b606060028054610b249061133f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b509061133f565b8015610b9d5780601f10610b7257610100808354040283529160200191610b9d565b820191906000526020600020905b815481529060010190602001808311610b8057829003601f168201915b5050505050905090565b610baf610d6d565b6001600160a01b038116610c145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610243565b61043981610dc7565b610c25610d6d565b8051601514610c855760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b6064820152608401610243565b6002610c91828261146d565b5050565b60606000610ca38484611543565b60ff1667ffffffffffffffff811115610cbe57610cbe6111f4565b604051908082528060200260200182016040528015610ce7578160200160208202803683370190505b50905060ff84165b8360ff16811015610d4c57858160058110610d0c57610d0c611329565b602002013582610d1f60ff88168461155c565b81518110610d2f57610d2f611329565b602090810291909101015280610d448161156f565b915050610cef565b50610d64610d5a8585611543565b829060ff16610e17565b95945050505050565b6000546001600160a01b03163314610a5b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610243565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000610e26600784611588565b905060008085516007610e399190611588565b67ffffffffffffffff811115610e5157610e516111f4565b6040519080825280601f01601f191660200182016040528015610e7b576020820181803683370190505b5090506000805b87518161ffff161015611014576000888261ffff1681518110610ea757610ea7611329565b6020908102919091018101516040805160078082526101008201909252919350600092820160e08036833701905050905060005b6007811015610f2857610eef816008611588565b83901c828281518110610f0457610f04611329565b60ff9092166020928302919091019091015280610f208161156f565b915050610edb565b5060005b6007811015610ffe576000828281518110610f4957610f49611329565b602002602001015160ff16905080600014610fc1578060f81b878781518110610f7457610f74611329565b60200101906001600160f81b031916908160001a90535085610f958161156f565b9650610fa4905060028961159f565b60ff16600003610fbc57610fb96001896115cf565b97505b610fe4565b610fcc60028961159f565b60ff16600103610fe457610fe16001896115cf565b97505b5060089290921c9180610ff68161156f565b915050610f2c565b505050808061100c906115e8565b915050610e82565b508194508260ff166002146110805760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642066696e616c207374617465206f66207061636b656420627960448201526b1d195cc81a5b88195b585a5b60a21b6064820152608401610243565b838111156110c45760405162461bcd60e51b815260206004820152601160248201527056656e6d6f20696420746f6f206c6f6e6760781b6044820152606401610243565b5050505092915050565b60006101a082840312156110e157600080fd5b50919050565b80604081018310156110f857600080fd5b92915050565b6000806000806101a080868803121561111657600080fd5b61112087876110e7565b945060c086018781111561113357600080fd5b60408701945061114388826110e7565b93505086818701111561115557600080fd5b50929591945092610100019150565b6001600160a01b038116811461043957600080fd5b60006020828403121561118b57600080fd5b813561119681611164565b9392505050565b60005b838110156111b85781810151838201526020016111a0565b50506000910152565b60208152600082518060208401526111e081604085016020870161119d565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561121c57600080fd5b813567ffffffffffffffff8082111561123457600080fd5b818401915084601f83011261124857600080fd5b81358181111561125a5761125a6111f4565b604051601f8201601f19908116603f01168101908382118183101715611282576112826111f4565b8160405282815287602084870101111561129b57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6101a081016040808784378083018660005b60028110156112ea578382843791830191908301906001016112cd565b505050808560c08501375060a08361010084013795945050505050565b60006020828403121561131957600080fd5b8151801515811461119657600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061135357607f821691505b6020821081036110e157634e487b7160e01b600052602260045260246000fd5b60008083546113818161133f565b6001828116801561139957600181146113ae576113dd565b60ff19841687528215158302870194506113dd565b8760005260208060002060005b858110156113d45781548a8201529084019082016113bb565b50505082870194505b50929695505050505050565b600082516113fb81846020870161119d565b9190910192915050565b60006020828403121561141757600080fd5b5051919050565b601f82111561146857600081815260208120601f850160051c810160208610156114455750805b601f850160051c820191505b8181101561146457828155600101611451565b5050505b505050565b815167ffffffffffffffff811115611487576114876111f4565b61149b81611495845461133f565b8461141e565b602080601f8311600181146114d057600084156114b85750858301515b600019600386901b1c1916600185901b178555611464565b600085815260208120601f198616915b828110156114ff578886015182559484019460019091019084016114e0565b508582101561151d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156110f8576110f861152d565b818103818111156110f8576110f861152d565b6000600182016115815761158161152d565b5060010190565b80820281158282048414176110f8576110f861152d565b600060ff8316806115c057634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff81811683821601908111156110f8576110f861152d565b600061ffff8083168181036115ff576115ff61152d565b600101939250505056fea26469706673582212209444c8a7e77c427eb4b7861e08733365b4607443de34de1614f281a99300f98a64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101665780639563a25714610177578063c0d05fed1461018a578063ced1e9781461019f578063f2fde38b146101a7578063f6c7226b146101ba57600080fd5b806315d276e1146100b957806317c8ecf2146100fd57806334baeab91461011e57806355f65ba814610141578063715018a61461014957806389dd2db014610153575b600080fd5b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61011061010b3660046110ce565b6101cd565b6040519081526020016100f4565b61013161012c3660046110fe565b610401565b60405190151581526020016100f4565b6101106109d6565b610151610a49565b005b610151610161366004611179565b610a5d565b6000546001600160a01b03166100e0565b6001546100e0906001600160a01b031681565b610192610a87565b6040516100f491906111c1565b610192610b15565b6101516101b5366004611179565b610ba7565b6101516101c836600461120a565b610c1d565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461024c5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b604080516334baeab960e01b815230916334baeab99161027f9186919082019060c08301906101008401906004016112bb565b602060405180830381865afa15801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c09190611307565b6102fc5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610243565b6103046109d6565b610100830135146103575760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610243565b600061036a836101000160016004610c95565b9050600260405161037b9190611373565b60405180910390208160405160200161039491906113e9565b60405160208183030381529060405280519060200120146103f75760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610243565b5050610180013590565b6000610964565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610439576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa91508161046f576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806104a0576000805260206000f35b5050505050565b7f080b111409427857a11fb6d56017c4872f4767ef6a94a1cb31d99c8838f7233d85527f24a8444eec587e168d14532828d57b9468d81d7e1e208a889c5e76fb934d0e8260208601526000608086018661054487357f1409d0fd4daa1325d22e1c06cab97b1366eabf210a78f94a922d545cc58aad107f1e39f6ddda68dd040b54ab00326b5f1f19eeb27929e73748a4c6a54944088df58461043c565b61059460208801357f2f4bce009a3e9d5729eac702d31bf118b4a3e2dbb3db3366baab11693447b7647f17b1de1a42410fa13d92db3084d90a070d68b5480b5458a5b2328afa834187268461043c565b6105e460408801357f26ae15dc8e6cd97513416e56f21745bb37272fb4b8649edfb14e6ef080e1f6837f09c840186336539d4d22ef1369d4e3080550156b451a6a3fa882223e376fba8f8461043c565b61063460608801357f1adf93c7d84ff6c0cc7b994d84b54882e4d8038f7aa0d18e571e2ea1693c245c7f2e077d7d85d2731eff939448f410f081c6e3246f3910a40c0b378ecae4d39faf8461043c565b61068460808801357f12401fe060e41942a8461ee9011316390c477dcbf41bc16de3099eaf3e9e21177f02028f5a6b644079aa95025995b96653bc9fca169520c35421733e3fecbf9eac8461043c565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b604051610380810160405261097c6000840135610408565b6109896020840135610408565b6109966040840135610408565b6109a36060840135610408565b6109b06080840135610408565b6109bd60a0840135610408565b6109ca818486888a6104a7565b90508060005260206000f35b6001546040805163fe1a279160e01b815290516000926001600160a01b03169163fe1a27919160048083019260209291908290030181865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190611405565b905090565b610a51610d6d565b610a5b6000610dc7565b565b610a65610d6d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60028054610a949061133f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac09061133f565b8015610b0d5780601f10610ae257610100808354040283529160200191610b0d565b820191906000526020600020905b815481529060010190602001808311610af057829003601f168201915b505050505081565b606060028054610b249061133f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b509061133f565b8015610b9d5780601f10610b7257610100808354040283529160200191610b9d565b820191906000526020600020905b815481529060010190602001808311610b8057829003601f168201915b5050505050905090565b610baf610d6d565b6001600160a01b038116610c145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610243565b61043981610dc7565b610c25610d6d565b8051601514610c855760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b6064820152608401610243565b6002610c91828261146d565b5050565b60606000610ca38484611543565b60ff1667ffffffffffffffff811115610cbe57610cbe6111f4565b604051908082528060200260200182016040528015610ce7578160200160208202803683370190505b50905060ff84165b8360ff16811015610d4c57858160058110610d0c57610d0c611329565b602002013582610d1f60ff88168461155c565b81518110610d2f57610d2f611329565b602090810291909101015280610d448161156f565b915050610cef565b50610d64610d5a8585611543565b829060ff16610e17565b95945050505050565b6000546001600160a01b03163314610a5b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610243565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000610e26600784611588565b905060008085516007610e399190611588565b67ffffffffffffffff811115610e5157610e516111f4565b6040519080825280601f01601f191660200182016040528015610e7b576020820181803683370190505b5090506000805b87518161ffff161015611014576000888261ffff1681518110610ea757610ea7611329565b6020908102919091018101516040805160078082526101008201909252919350600092820160e08036833701905050905060005b6007811015610f2857610eef816008611588565b83901c828281518110610f0457610f04611329565b60ff9092166020928302919091019091015280610f208161156f565b915050610edb565b5060005b6007811015610ffe576000828281518110610f4957610f49611329565b602002602001015160ff16905080600014610fc1578060f81b878781518110610f7457610f74611329565b60200101906001600160f81b031916908160001a90535085610f958161156f565b9650610fa4905060028961159f565b60ff16600003610fbc57610fb96001896115cf565b97505b610fe4565b610fcc60028961159f565b60ff16600103610fe457610fe16001896115cf565b97505b5060089290921c9180610ff68161156f565b915050610f2c565b505050808061100c906115e8565b915050610e82565b508194508260ff166002146110805760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642066696e616c207374617465206f66207061636b656420627960448201526b1d195cc81a5b88195b585a5b60a21b6064820152608401610243565b838111156110c45760405162461bcd60e51b815260206004820152601160248201527056656e6d6f20696420746f6f206c6f6e6760781b6044820152606401610243565b5050505092915050565b60006101a082840312156110e157600080fd5b50919050565b80604081018310156110f857600080fd5b92915050565b6000806000806101a080868803121561111657600080fd5b61112087876110e7565b945060c086018781111561113357600080fd5b60408701945061114388826110e7565b93505086818701111561115557600080fd5b50929591945092610100019150565b6001600160a01b038116811461043957600080fd5b60006020828403121561118b57600080fd5b813561119681611164565b9392505050565b60005b838110156111b85781810151838201526020016111a0565b50506000910152565b60208152600082518060208401526111e081604085016020870161119d565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561121c57600080fd5b813567ffffffffffffffff8082111561123457600080fd5b818401915084601f83011261124857600080fd5b81358181111561125a5761125a6111f4565b604051601f8201601f19908116603f01168101908382118183101715611282576112826111f4565b8160405282815287602084870101111561129b57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6101a081016040808784378083018660005b60028110156112ea578382843791830191908301906001016112cd565b505050808560c08501375060a08361010084013795945050505050565b60006020828403121561131957600080fd5b8151801515811461119657600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061135357607f821691505b6020821081036110e157634e487b7160e01b600052602260045260246000fd5b60008083546113818161133f565b6001828116801561139957600181146113ae576113dd565b60ff19841687528215158302870194506113dd565b8760005260208060002060005b858110156113d45781548a8201529084019082016113bb565b50505082870194505b50929695505050505050565b600082516113fb81846020870161119d565b9190910192915050565b60006020828403121561141757600080fd5b5051919050565b601f82111561146857600081815260208120601f850160051c810160208610156114455750805b601f850160051c820191505b8181101561146457828155600101611451565b5050505b505050565b815167ffffffffffffffff811115611487576114876111f4565b61149b81611495845461133f565b8461141e565b602080601f8311600181146114d057600084156114b85750858301515b600019600386901b1c1916600185901b178555611464565b600085815260208120601f198616915b828110156114ff578886015182559484019460019091019084016114e0565b508582101561151d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156110f8576110f861152d565b818103818111156110f8576110f861152d565b6000600182016115815761158161152d565b5060010190565b80820281158282048414176110f8576110f861152d565b600060ff8316806115c057634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff81811683821601908111156110f8576110f861152d565b600061ffff8083168181036115ff576115ff61152d565b600101939250505056fea26469706673582212209444c8a7e77c427eb4b7861e08733365b4607443de34de1614f281a99300f98a64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/processors/VenmoRegistrationProcessor.sol:VenmoRegistrationProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3849,
        "contract": "contracts/processors/VenmoRegistrationProcessor.sol:VenmoRegistrationProcessor",
        "label": "venmoMailserverKeyHashAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKeyHashAdapter)4593"
      },
      {
        "astId": 3851,
        "contract": "contracts/processors/VenmoRegistrationProcessor.sol:VenmoRegistrationProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IKeyHashAdapter)4593": {
        "encoding": "inplace",
        "label": "contract IKeyHashAdapter",
        "numberOfBytes": "20"
      }
    }
  }
}