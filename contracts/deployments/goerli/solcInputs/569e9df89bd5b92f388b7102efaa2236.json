{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IPoseidon.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IPoseidon {\n    function poseidon(uint256[3] memory _a) external pure returns(uint256);\n}\n"
    },
    "contracts/interfaces/IReceiveProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IReceiveProcessor {\n\n    struct ReceiveProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[9] signals;\n    }\n\n    function processProof(\n        ReceiveProof calldata _proof\n    )\n        external\n    returns(uint256, bytes32, bytes32);\n}\n"
    },
    "contracts/interfaces/IRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IRegistrationProcessor {\n\n    struct RegistrationProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[5] signals;\n    }\n\n    function processProof(\n        RegistrationProof calldata _proof\n    )\n        external\n        view\n    returns (bytes32);\n}\n"
    },
    "contracts/interfaces/ISendProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface ISendProcessor {\n\n    struct SendProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[10] signals;\n    }\n\n    function processProof(\n        SendProof calldata _proof\n    )\n        external\n    returns(uint256, uint256, bytes32, bytes32);\n}\n"
    },
    "contracts/lib/Bytes32ArrayUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n/**\n * @title Bytes32ArrayUtils\n * @author ZKP2P\n *\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\n */\nlibrary Bytes32ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            bytes32 current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(bytes32[] memory A, bytes32 a)\n        internal\n        pure\n        returns (bytes32[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            (bytes32[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(bytes32[] storage A, bytes32 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(bytes32[] memory A, uint256 index)\n        internal\n        pure\n        returns (bytes32[] memory, bytes32)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        bytes32[] memory newBytes = new bytes32[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newBytes[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newBytes[j - 1] = A[j];\n        }\n        return (newBytes, A[index]);\n    }\n}\n"
    },
    "contracts/lib/ProofParsingUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nlibrary ProofParsingUtils {\n\n    /* ============ Constants ============ */\n    uint16 private constant BYTES_IN_PACKED_BYTES = 7;  // 7 bytes in a packed item returned from circom\n\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\n    // TODO: Remove console.logs and define this as a pure function instead of a view\n    function convertPackedBytesToBytes(uint256[] memory packedBytes, uint256 signals) internal pure returns (string memory extractedString) {\n        // Calculate max bytes as the amount of signals * 7 bytes per signal\n        uint256 maxBytes = signals * BYTES_IN_PACKED_BYTES;\n        uint8 state = 0;\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * 7);\n        uint256 nonzeroBytesArrayIndex = 0;\n        for (uint16 i = 0; i < packedBytes.length; i++) {\n            uint256 packedByte = packedBytes[i];\n            uint8[] memory unpackedBytes = new uint8[](BYTES_IN_PACKED_BYTES);\n            for (uint j = 0; j < BYTES_IN_PACKED_BYTES; j++) {\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\n            }\n\n            for (uint256 j = 0; j < BYTES_IN_PACKED_BYTES; j++) {\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\n                if (unpackedByte != 0) {\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\n                    nonzeroBytesArrayIndex++;\n                    if (state % 2 == 0) {\n                        state += 1;\n                    }\n                } else {\n                    if (state % 2 == 1) {\n                        state += 1;\n                    }\n                }\n                packedByte = packedByte >> 8;\n            }\n        }\n\n        extractedString = string(nonzeroBytesArray);\n        require(state == 2, \"Invalid final state of packed bytes in email\");\n        // console.log(\"Characters in username: \", nonzeroBytesArrayIndex);\n        require(nonzeroBytesArrayIndex <= maxBytes, \"Venmo id too long\");\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\n    }\n\n    // // Code example:\n    function stringToUint256(string memory s) internal pure returns (uint256) {\n        bytes memory b = bytes(s);\n        uint256 result = 0;\n        uint256 oldResult = 0;\n\n        for (uint i = 0; i < b.length; i++) { // c = b[i] was not needed\n            // UNSAFE: Check that the character is a number - we include padding 0s in Venmo ids\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\n                // store old value so we can check for overflows\n                oldResult = result;\n                result = result * 10 + (uint8(b[i]) - 48);\n                // prevent overflows\n                require(result >= oldResult, \"Overflow detected\");\n            }\n        }\n        return result; \n    }\n}\n"
    },
    "contracts/lib/Uint256ArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title Uint256ArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Uint256 Arrays\n */\nlibrary Uint256ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n     * Returns the combination of the two arrays\n     * @param A The first array\n     * @param B The second array\n     * @return Returns A extended by B\n     */\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\n        uint256 aLength = A.length;\n        uint256 bLength = B.length;\n        uint256[] memory newUints = new uint256[](aLength + bLength);\n        for (uint256 i = 0; i < aLength; i++) {\n            newUints[i] = A[i];\n        }\n        for (uint256 j = 0; j < bLength; j++) {\n            newUints[aLength + j] = B[j];\n        }\n        return newUints;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(uint256[] storage A, uint256 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"uint256 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}\n"
    },
    "contracts/processors/BaseProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapter } from \"./keyHashAdapters/IKeyHashAdapter.sol\";\n\npragma solidity ^0.8.18;\n\ncontract BaseProcessor is Ownable {\n\n    /* ============ Modifiers ============ */\n    modifier onlyRamp() {\n        require(msg.sender == ramp, \"Only Ramp can call this function\");\n        _;\n    }\n    \n    /* ============ Constants ============ */\n    uint8 private constant EMAIL_ADDRESS_LENGTH = 21;   // 21 bytes in an email address\n\n    /* ============ State Variables ============ */\n    address public immutable ramp;\n    IKeyHashAdapter public venmoMailserverKeyHashAdapter;\n    bytes public emailFromAddress;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\n        string memory _emailFromAddress\n    )\n        Ownable()\n    {\n        require(bytes(_emailFromAddress).length == EMAIL_ADDRESS_LENGTH, \"Email from address not properly padded\");\n\n        ramp = _ramp;\n        venmoMailserverKeyHashAdapter = _venmoMailserverKeyHashAdapter;\n        emailFromAddress = bytes(_emailFromAddress);\n    }\n\n    /* ============ External Functions ============ */\n\n    function setVenmoMailserverKeyHashAdapter(IKeyHashAdapter _venmoMailserverKeyHashAdapter) external onlyOwner {\n        venmoMailserverKeyHashAdapter = _venmoMailserverKeyHashAdapter;\n    }\n\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\n        require(bytes(_emailFromAddress).length == EMAIL_ADDRESS_LENGTH, \"Email from address not properly padded\");\n\n        emailFromAddress = bytes(_emailFromAddress);\n    }\n\n    /* ============ External Getters ============ */\n\n    function getEmailFromAddress() external view returns (bytes memory) {\n        return emailFromAddress;\n    }\n\n    function getVenmoMailserverKeyHash() public view returns (bytes32) {\n        return IKeyHashAdapter(venmoMailserverKeyHashAdapter).venmoMailserverKeyHash();\n    }\n}\n"
    },
    "contracts/processors/keyHashAdapters/IKeyHashAdapter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IKeyHashAdapter {\n    function setVenmoMailserverKeyHash(bytes32 _venmoMailserverKeyHash) external;\n    function venmoMailserverKeyHash() external view returns (bytes32);\n}\n"
    },
    "contracts/processors/keyHashAdapters/ManagedKeyHashAdapter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapter } from \"./IKeyHashAdapter.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ManagedKeyHashAdapter is Ownable , IKeyHashAdapter {\n    \n    /* ============ State Variables ============ */\n\n    bytes32 public venmoMailserverKeyHash;\n\n    /* ============ Constructor ============ */\n\n    constructor(\n        bytes32 _venmoMailserverKeyHash\n    )\n        Ownable()\n    {\n        venmoMailserverKeyHash = _venmoMailserverKeyHash;\n    }\n\n    /* ============ External Functions ============ */\n\n    function setVenmoMailserverKeyHash(bytes32 _venmoMailserverKeyHash) external onlyOwner {\n        venmoMailserverKeyHash = _venmoMailserverKeyHash;\n    }\n}\n"
    },
    "contracts/processors/VenmoReceiveProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { BaseProcessor } from \"./BaseProcessor.sol\";\nimport { IKeyHashAdapter } from \"./keyHashAdapters/IKeyHashAdapter.sol\";\nimport { IReceiveProcessor } from \"../interfaces/IReceiveProcessor.sol\";\nimport { Groth16Verifier } from \"../verifiers/venmo_receive_verifier.sol\";\nimport { ProofParsingUtils } from \"../lib/ProofParsingUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoReceiveProcessor is Groth16Verifier, IReceiveProcessor, BaseProcessor {\n\n    using ProofParsingUtils for string;\n    using ProofParsingUtils for uint256[];\n\n    /* ============ State Variables ============ */\n\n    mapping(bytes32 => bool) public isEmailNullified;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\n        string memory _emailFromAddress\n    )\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _emailFromAddress)\n        Groth16Verifier()\n    {}\n    \n    /* ============ External Functions ============ */\n    function processProof(\n        IReceiveProcessor.ReceiveProof calldata _proof\n    )\n        public\n        override\n        onlyRamp\n        returns(uint256 timestamp, bytes32 onRamperIdHash, bytes32 intentHash)\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(bytes32(_proof.signals[0]) == getVenmoMailserverKeyHash(), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        // Signals [4:6] are the packed timestamp\n        timestamp = _parseSignalArray(_proof.signals, 4, 6).stringToUint256();\n\n        // Signals [6] is the packed onRamperIdHsdh\n        onRamperIdHash = bytes32(_proof.signals[6]);\n\n        // Check if email has been used previously, if not nullify it so it can't be used again\n        bytes32 nullifier = bytes32(_proof.signals[7]);\n        require(!isEmailNullified[nullifier], \"Email has already been used\");\n        isEmailNullified[nullifier] = true;\n\n        // Signals [8] is intentHash\n        intentHash = bytes32(_proof.signals[8]);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[9] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToBytes(_to - _from);\n    }\n}\n"
    },
    "contracts/processors/VenmoRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { BaseProcessor } from \"./BaseProcessor.sol\";\nimport { Groth16Verifier } from \"../verifiers/venmo_registration_verifier.sol\";\nimport { IKeyHashAdapter } from \"./keyHashAdapters/IKeyHashAdapter.sol\";\nimport { IRegistrationProcessor } from \"../interfaces/IRegistrationProcessor.sol\";\nimport { ProofParsingUtils } from \"../lib/ProofParsingUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoRegistrationProcessor is Groth16Verifier, IRegistrationProcessor, BaseProcessor {\n\n    using ProofParsingUtils for string;\n    using ProofParsingUtils for uint256[];\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\n        string memory _emailFromAddress\n    )\n        Groth16Verifier()\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _emailFromAddress)\n    {}\n\n    /* ============ External Functions ============ */\n\n    function processProof(\n        IRegistrationProcessor.RegistrationProof calldata _proof\n    )\n        public\n        view\n        override\n        onlyRamp\n        returns(bytes32 userIdHash)\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(bytes32(_proof.signals[0]) == getVenmoMailserverKeyHash(), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        // Signals [4] is the packed onRamperIdHash\n        userIdHash = bytes32(_proof.signals[4]);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[5] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToBytes(_to - _from);\n    }\n}\n"
    },
    "contracts/processors/VenmoSendProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { BaseProcessor } from \"./BaseProcessor.sol\";\nimport { Groth16Verifier } from \"../verifiers/venmo_send_verifier.sol\";\nimport { IKeyHashAdapter } from \"./keyHashAdapters/IKeyHashAdapter.sol\";\nimport { ISendProcessor } from \"../interfaces/ISendProcessor.sol\";\nimport { ProofParsingUtils } from \"../lib/ProofParsingUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoSendProcessor is Groth16Verifier, ISendProcessor, BaseProcessor {\n    \n    using ProofParsingUtils for string;\n    using ProofParsingUtils for uint256[];\n\n    /* ============ State Variables ============ */\n\n    mapping(bytes32 => bool) public isEmailNullified;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\n        string memory _emailFromAddress\n    )\n        Groth16Verifier()\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _emailFromAddress)\n    {}\n    \n    /* ============ External Functions ============ */\n    function processProof(\n        ISendProcessor.SendProof calldata _proof\n    )\n        public\n        override\n        onlyRamp\n        returns(uint256 amount, uint256 timestamp, bytes32 offRamperIdHash, bytes32 intentHash)\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\"); // checks effects iteractions, this should come first\n\n        require(bytes32(_proof.signals[0]) == getVenmoMailserverKeyHash(), \"Invalid mailserver key hash\");\n\n        // Signals [1:4] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \"Invalid email from address\");\n\n        // Signals [4:5] is the packed amount, multiply by 1e4 since venmo only gives us two decimals instead of 6\n        amount = _parseSignalArray(_proof.signals, 4, 5).stringToUint256() * 1e4;\n\n        // Signals [5:7] are the packed timestamp\n        timestamp = _parseSignalArray(_proof.signals, 5, 7).stringToUint256();\n\n        // Signals [8] is the packed offRamperIdHsdh\n        offRamperIdHash = bytes32(_proof.signals[7]);\n\n        // Check if email has been used previously, if not nullify it so it can't be used again\n        bytes32 nullifier = bytes32(_proof.signals[8]);\n        require(!isEmailNullified[nullifier], \"Email has already been used\");\n        isEmailNullified[nullifier] = true;\n\n        // Signals [9] is intentHash\n        intentHash = bytes32(_proof.signals[9]);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[10] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToBytes(_to - _from);\n    }\n}\n"
    },
    "contracts/Ramp.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { Bytes32ArrayUtils } from \"./lib/Bytes32ArrayUtils.sol\";\nimport { Uint256ArrayUtils } from \"./lib/Uint256ArrayUtils.sol\";\n\nimport { IPoseidon } from \"./interfaces/IPoseidon.sol\";\nimport { IReceiveProcessor } from \"./interfaces/IReceiveProcessor.sol\";\nimport { IRegistrationProcessor } from \"./interfaces/IRegistrationProcessor.sol\";\nimport { ISendProcessor } from \"./interfaces/ISendProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract Ramp is Ownable {\n\n    using Bytes32ArrayUtils for bytes32[];\n    using Uint256ArrayUtils for uint256[];\n\n    /* ============ Events ============ */\n    event AccountRegistered(address indexed accountOwner, bytes32 indexed venmoIdHash);\n    event DepositReceived(\n        uint256 indexed depositId,\n        bytes32 indexed venmoId,\n        uint256 amount,\n        uint256 conversionRate\n    );\n    event IntentSignaled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        bytes32 indexed venmoId,\n        address to,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event IntentPruned(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId\n    );\n    // Do we want to emit the onRamper or the venmoId\n    event IntentFulfilled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        address indexed onRamper,\n        address to,\n        uint256 amount\n    );\n    // Do we want to emit the depositor or the venmoId\n    event DepositWithdrawn(\n        uint256 indexed depositId,\n        address indexed depositor,\n        uint256 amount\n    );\n\n    event DepositClosed(uint256 depositId, address depositor);\n    event UserAddedToDenylist(bytes32 listOwner, bytes32 deniedUser);\n    event UserRemovedFromDenylist(bytes32 listOwner, bytes32 approvedUser);\n    event MinDepositAmountSet(uint256 minDepositAmount);\n    event NewSendProcessorSet(address sendProcessor);\n    event NewRegistrationProcessorSet(address registrationProcessor);\n    event NewReceiveProcessorSet(address receiveProcessor);\n\n    /* ============ Structs ============ */\n\n    struct AccountInfo {\n        bytes32 venmoIdHash;\n        uint256[] deposits;\n    }\n\n    struct Deposit {\n        address depositor;\n        uint256[3] packedVenmoId;\n        uint256 depositAmount;              // Amount of USDC deposited\n        uint256 remainingDeposits;          // Amount of remaining deposited liquidity\n        uint256 outstandingIntentAmount;    // Amount of outstanding intents (may include expired intents)\n        uint256 conversionRate;             // Conversion required by off-ramper between USDC/USD\n        bytes32[] intentHashes;             // Array of hashes of all open intents (may include some expired if not pruned)\n    }\n\n    struct DepositWithAvailableLiquidity {\n        uint256 depositId;\n        Deposit deposit;\n        uint256 availableLiquidity;\n    }\n\n    struct Intent {\n        address onRamper;\n        address to;\n        uint256 deposit;\n        uint256 amount;\n        uint256 intentTimestamp;\n    }\n\n    struct IntentWithOnRamperId {\n        Intent intent;\n        bytes32 onRamperIdHash;\n    }\n\n    struct DenyList {\n        bytes32[] deniedUsers;\n        mapping(bytes32 => bool) isDenied;\n    }\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n    uint256 internal constant MAX_DEPOSITS = 5;       // An account can only have max 5 different deposit parameterizations to prevent locking funds\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    \n    /* ============ State Variables ============ */\n    IERC20 public immutable usdc;\n    IPoseidon public immutable poseidon;\n    IReceiveProcessor public receiveProcessor;\n    IRegistrationProcessor public registrationProcessor;\n    ISendProcessor public sendProcessor;\n\n    bool internal isInitialized;\n\n    mapping(bytes32 => DenyList) internal userDenylist;                 // Mapping of venmoIdHash to user's deny list. User's on deny list cannot\n                                                                        // signal an intent on their deposit\n    mapping(address => AccountInfo) internal accounts;\n    mapping(bytes32 => bytes32) public venmoIdIntent;                   // Mapping of venmoIdHash to intentHash, we limit one intent per venmoId\n    mapping(uint256 => Deposit) public deposits;\n    mapping(bytes32 => Intent) public intents;\n\n    uint256 public minDepositAmount;\n    uint256 public depositCounter;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        IERC20 _usdc,\n        IPoseidon _poseidon,\n        uint256 _minDepositAmount\n    )\n        Ownable()\n    {\n        usdc = _usdc;\n        poseidon = _poseidon;\n        minDepositAmount = _minDepositAmount;\n\n        transferOwnership(_owner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Initialize Ramp with the addresses of the Processors\n     *\n     * @param _receiveProcessor         Receive processor address\n     * @param _registrationProcessor    Registration processor address\n     * @param _sendProcessor            Send processor address\n     */\n    function initialize(\n        IReceiveProcessor _receiveProcessor,\n        IRegistrationProcessor _registrationProcessor,\n        ISendProcessor _sendProcessor\n    )\n        external\n        onlyOwner\n    {\n        require(!isInitialized, \"Already initialized\");\n\n        receiveProcessor = _receiveProcessor;\n        registrationProcessor = _registrationProcessor;\n        sendProcessor = _sendProcessor;\n\n        isInitialized = true;\n    }\n\n    /**\n     * @notice Registers a new account by pulling the hash of the account id from the proof and assigning the account owner to the\n     * sender of the transaction.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, userIdHash\n     */\n    function register(\n        uint[2] memory _a,\n        uint[2][2] memory _b,\n        uint[2] memory _c,\n        uint[5] memory _signals\n    )\n        external\n    {\n        require(accounts[msg.sender].venmoIdHash == bytes32(0), \"Account already associated with venmoId\");\n        bytes32 venmoIdHash = _verifyRegistrationProof(_a, _b, _c, _signals);\n\n        accounts[msg.sender].venmoIdHash = venmoIdHash;\n\n        emit AccountRegistered(msg.sender, venmoIdHash);\n    }\n\n    /**\n     * @notice Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to\n     * previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\n     * of USDC.\n     *\n     * @param _packedVenmoId    The packed venmo id of the account owner (we pack for easy use with poseidon)\n     * @param _depositAmount    The amount of USDC to off-ramp\n     * @param _receiveAmount    The amount of USD to receive\n     */\n    function offRamp(\n        uint256[3] memory _packedVenmoId,\n        uint256 _depositAmount,\n        uint256 _receiveAmount\n    ) external {\n        bytes32 _venmoIdHash = bytes32(poseidon.poseidon(_packedVenmoId));\n\n        require(accounts[msg.sender].deposits.length < MAX_DEPOSITS, \"Maximum deposit amount reached\");\n        require(accounts[msg.sender].venmoIdHash == _venmoIdHash, \"Sender must be the account owner\");\n        require(_depositAmount >= minDepositAmount, \"Deposit amount must be greater than min deposit amount\");\n        require(_receiveAmount > 0, \"Receive amount must be greater than 0\");\n\n        uint256 conversionRate = (_depositAmount * PRECISE_UNIT) / _receiveAmount;\n        uint256 depositId = depositCounter++;\n\n        usdc.transferFrom(msg.sender, address(this), _depositAmount);\n        accounts[msg.sender].deposits.push(depositId);\n\n        deposits[depositId] = Deposit({\n            depositor: msg.sender,\n            packedVenmoId: _packedVenmoId,\n            depositAmount: _depositAmount,\n            remainingDeposits: _depositAmount,\n            outstandingIntentAmount: 0,\n            conversionRate: conversionRate,\n            intentHashes: new bytes32[](0)\n        });\n\n        emit DepositReceived(depositId, _venmoIdHash, _depositAmount, conversionRate);\n    }\n\n    /**\n     * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\n     * in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of\n     * address (tracked using venmoId). Caller must not be on the depositor's deny list. If there are prunable intents then\n     * they will be deleted from the deposit to be able to maintain state hygiene.\n     *\n     * @param _depositId    The ID of the deposit the on-ramper intends to use for \n     * @param _amount       The amount of USDC the user wants to on-ramp\n     */\n    function signalIntent(uint256 _depositId, uint256 _amount, address _to) external {\n        bytes32 venmoIdHash = accounts[msg.sender].venmoIdHash;\n        Deposit storage deposit = deposits[_depositId];\n        bytes32 depositorVenmoIdHash = accounts[deposit.depositor].venmoIdHash;\n\n        require(!userDenylist[depositorVenmoIdHash].isDenied[venmoIdHash], \"Onramper on depositor's denylist\");\n        require(_amount > 0, \"Signaled amount must be greater than 0\");\n        require(venmoIdIntent[venmoIdHash] == bytes32(0), \"Intent still outstanding\");\n\n        bytes32 intentHash = _calculateIntentHash(venmoIdHash, _depositId);\n\n        if (deposit.remainingDeposits < _amount) {\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(_depositId);\n\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \"Not enough liquidity\");\n\n            _pruneIntents(deposit, prunableIntents);\n            deposit.remainingDeposits += reclaimableAmount;\n            deposit.outstandingIntentAmount -= reclaimableAmount;\n        }\n\n        intents[intentHash] = Intent({\n            onRamper: msg.sender,\n            to: _to,\n            deposit: _depositId,\n            amount: _amount,\n            intentTimestamp: block.timestamp\n        });\n\n        venmoIdIntent[venmoIdHash] = intentHash;\n\n        deposit.remainingDeposits -= _amount;\n        deposit.outstandingIntentAmount += _amount;\n        deposit.intentHashes.push(intentHash);\n\n        emit IntentSignaled(intentHash, _depositId, venmoIdHash, _to, _amount, block.timestamp);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new\n     * intent. Deposit state is updated to reflect the cancelled intent.\n     *\n     * @param _intentHash    Hash of intent being cancelled\n     */\n    function cancelIntent(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        require(intent.intentTimestamp != 0, \"Intent does not exist\");\n\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(intent.onRamper == msg.sender, \"Sender must be the on-ramper\");\n\n        _pruneIntent(deposit, _intentHash);\n\n        deposit.remainingDeposits += intent.amount;\n        deposit.outstandingIntentAmount -= intent.amount;\n    }\n\n    /**\n     * @notice ONLY OFF-RAMPER: Must be submitted by off-ramper. Upon submission the proof is validated, intent is removed,\n     * and deposit state is updated. USDC is transferred to the on-ramper and the defined convenience fee is sent to the off-\n     * ramper.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, timestamp, onRamperIdHash,\n     *                  nullifier, intentHash\n     */\n    function onRampWithReceiveEmail(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[9] memory _signals\n    )\n        external\n    {\n        (\n            Intent memory intent,\n            bytes32 intentHash\n        ) = _verifyOnRampWithReceiveEmailProof(_a, _b, _c, _signals);\n\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(deposit.depositor == msg.sender, \"Sender must be the account owner\");\n\n        _pruneIntent(deposit, intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        usdc.transfer(intent.to, intent.amount);\n\n        emit IntentFulfilled(intentHash, intent.deposit, intent.onRamper, intent.to, intent.amount);\n    }\n\n    /**\n     * @notice Upon submission the proof is validated, intent is removed, and deposit state is updated. USDC is transferred\n     * to the on-ramper.\n     *\n     * @param _a        Parameter of zk proof\n     * @param _b        Parameter of zk proof\n     * @param _c        Parameter of zk proof\n     * @param _signals  Encoded public signals of the zk proof, contains mailserverHash, fromEmail, timestamp, onRamperIdHash,\n     *                  nullifier, intentHash\n     */\n    function onRamp(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[10] memory _signals\n    )\n        external\n    {\n        (\n            Intent memory intent,\n            Deposit storage deposit,\n            bytes32 intentHash\n        ) = _verifyOnRampProof(_a, _b, _c, _signals);\n\n        _pruneIntent(deposit, intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        usdc.transfer(intent.to, intent.amount);\n        \n        emit IntentFulfilled(intentHash, intent.deposit, intent.onRamper, intent.to, intent.amount);\n    }\n\n    /**\n     * @notice Caller must be the depositor for each depositId in the array. Depositor is returned all remaining deposits\n     * and any outstanding intents that are expired. If an intent is not expired then those funds will not be returned. Deposit\n     * will be deleted as long as there are no more outstanding intents.\n     *\n     * @param _depositIds   Array of depositIds the depositor is attempting to withdraw\n     */\n    function withdrawDeposit(uint256[] memory _depositIds) external {\n        uint256 returnAmount;\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit storage deposit = deposits[depositId];\n\n            require(deposit.depositor == msg.sender, \"Sender must be the depositor\");\n\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(depositId);\n\n            _pruneIntents(deposit, prunableIntents);\n\n            returnAmount += deposit.remainingDeposits + reclaimableAmount;\n            \n            deposit.outstandingIntentAmount -= reclaimableAmount;\n\n            emit DepositWithdrawn(depositId, deposit.depositor, deposit.remainingDeposits + reclaimableAmount);\n            \n            delete deposit.remainingDeposits;\n            _closeDepositIfNecessary(depositId, deposit);\n        }\n\n        usdc.transfer(msg.sender, returnAmount);\n    }\n\n    /**\n     * @notice Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to\n     * signal an intent on the user's deposit they will be denied.\n     *\n     * @param _deniedUser   Poseidon hash of the venmoId being banned\n     */\n    function addAccountToDenylist(bytes32 _deniedUser) external {\n        bytes32 denyingUser = accounts[msg.sender].venmoIdHash;\n\n        require(!userDenylist[denyingUser].isDenied[_deniedUser], \"User already on denylist\");\n\n        userDenylist[denyingUser].isDenied[_deniedUser] = true;\n        userDenylist[denyingUser].deniedUsers.push(_deniedUser);\n\n        emit UserAddedToDenylist(denyingUser, _deniedUser);\n    }\n\n    /**\n     * @notice Removes a venmoId from a depositor's deny list.\n     *\n     * @param _approvedUser   Poseidon hash of the venmoId being approved\n     */\n    function removeAccountFromDenylist(bytes32 _approvedUser) external {\n        bytes32 approvingUser = accounts[msg.sender].venmoIdHash;\n\n        require(userDenylist[approvingUser].isDenied[_approvedUser], \"User not on denylist\");\n\n        userDenylist[approvingUser].isDenied[_approvedUser] = false;\n        userDenylist[approvingUser].deniedUsers.removeStorage(_approvedUser);\n\n        emit UserRemovedFromDenylist(approvingUser, _approvedUser);\n    }\n\n    /* ============ Governance Functions ============ */\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the send processor address used for validating and interpreting zk proofs.\n     *\n     * @param _sendProcessor   New send proccesor address\n     */\n    function setSendProcessor(ISendProcessor _sendProcessor) external onlyOwner {\n        sendProcessor = _sendProcessor;\n        emit NewSendProcessorSet(address(_sendProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the receive processor address used for validating and interpreting zk proofs.\n     *\n     * @param _receiveProcessor   New receive proccesor address\n     */\n    function setReceiveProcessor(IReceiveProcessor _receiveProcessor) external onlyOwner {\n        receiveProcessor = _receiveProcessor;\n        emit NewReceiveProcessorSet(address(_receiveProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the registration processor address used for validating and interpreting zk proofs.\n     *\n     * @param _registrationProcessor   New registration proccesor address\n     */\n    function setRegistrationProcessor(IRegistrationProcessor _registrationProcessor) external onlyOwner {\n        registrationProcessor = _registrationProcessor;\n        emit NewRegistrationProcessorSet(address(_registrationProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\n     *\n     * @param _minDepositAmount   The new minimum deposit amount\n     */\n    function setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\n        require(_minDepositAmount != 0, \"Minimum deposit cannot be zero\");\n\n        minDepositAmount = _minDepositAmount;\n        emit MinDepositAmountSet(_minDepositAmount);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\n        return deposits[_depositId];\n    }\n\n    function getAccountInfo(address _account) external view returns (AccountInfo memory) {\n        return accounts[_account];\n    }\n\n    function getDeniedUsers(address _account) external view returns (bytes32[] memory) {\n        return userDenylist[accounts[_account].venmoIdHash].deniedUsers;\n    }\n\n    function isDeniedUser(address _account, bytes32 _deniedUser) external view returns (bool) {\n        return userDenylist[accounts[_account].venmoIdHash].isDenied[_deniedUser];\n    }\n\n    function getIntentsWithOnRamperId(bytes32[] calldata _intentHashes) external view returns (IntentWithOnRamperId[] memory) {\n        IntentWithOnRamperId[] memory intentsWithOnRamperId = new IntentWithOnRamperId[](_intentHashes.length);\n\n        for (uint256 i = 0; i < _intentHashes.length; ++i) {\n            Intent memory intent = intents[_intentHashes[i]];\n            intentsWithOnRamperId[i] = IntentWithOnRamperId({\n                intent: intent,\n                onRamperIdHash: accounts[intent.onRamper].venmoIdHash\n            });\n        }\n\n        return intentsWithOnRamperId;\n    }\n\n    function getAccountDeposits(address _account) external view returns (DepositWithAvailableLiquidity[] memory accountDeposits) {\n        uint256[] memory accountDepositIds = accounts[_account].deposits;\n        accountDeposits = new DepositWithAvailableLiquidity[](accountDepositIds.length);\n        \n        for (uint256 i = 0; i < accountDepositIds.length; ++i) {\n            uint256 depositId = accountDepositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            accountDeposits[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n    }\n\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositWithAvailableLiquidity[] memory depositArray) {\n        depositArray = new DepositWithAvailableLiquidity[](_depositIds.length);\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            depositArray[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n\n        return depositArray;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates the intentHash of new intent\n     */\n    function _calculateIntentHash(\n        bytes32 _venmoId,\n        uint256 _depositId\n    )\n        internal\n        view\n        virtual\n        returns (bytes32 intentHash)\n    {\n        // Mod with circom prime field to make sure it fits in a 254-bit field\n        uint256 intermediateHash = uint256(keccak256(abi.encodePacked(_venmoId, _depositId, block.timestamp)));\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\n    }\n\n    /**\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\n     * the outstanding amounts are summed and returned alongside the intentHashes\n     */\n    function _getPrunableIntents(\n        uint256 _depositId\n    )\n        internal\n        view\n        returns(bytes32[] memory prunableIntents, uint256 reclaimedAmount)\n    {\n        bytes32[] memory intentHashes = deposits[_depositId].intentHashes;\n        prunableIntents = new bytes32[](intentHashes.length);\n\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\n            Intent memory intent = intents[intentHashes[i]];\n            if (intent.intentTimestamp + 1 days < block.timestamp) {\n                prunableIntents[i] = intentHashes[i];\n                reclaimedAmount += intent.amount;\n            }\n        }\n    }\n\n    function _pruneIntents(Deposit storage _deposit, bytes32[] memory _intents) internal {\n        for (uint256 i = 0; i < _intents.length; ++i) {\n            if (_intents[i] != bytes32(0)) {\n                _pruneIntent(_deposit, _intents[i]);\n            }\n        }\n    }\n\n    /**\n     * @notice Pruning an intent involves deleting its state from the intents mapping, zeroing out the intendee's venmoIdIntent\n     * mapping, and deleting the intentHash from the deposit's intentHashes array.\n     */\n    function _pruneIntent(Deposit storage _deposit, bytes32 _intentHash) internal {\n        Intent memory intent = intents[_intentHash];\n\n        delete venmoIdIntent[accounts[intent.onRamper].venmoIdHash];\n        delete intents[_intentHash];\n        _deposit.intentHashes.removeStorage(_intentHash);\n\n        emit IntentPruned(_intentHash, intent.deposit);\n    }\n\n    /**\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\n     * deposits mapping and removes tracking it in the user's accounts mapping.\n     */\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\n        if (openDepositAmount == 0) {\n            accounts[_deposit.depositor].deposits.removeStorage(_depositId);\n            emit DepositClosed(_depositId, _deposit.depositor);\n            delete deposits[_depositId];\n        }\n    }\n\n    /**\n     * @notice Validate venmo receive payment email and check that it hasn't already been used (done on ReciveProcessor).\n     * Additionally, we validate that the onRamperIdHash matches the one from the specified intent and indicate if the \n     * convenience reward should be distributed.\n     */\n    function _verifyOnRampWithReceiveEmailProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[9] memory _signals\n    )\n        internal\n        returns(Intent memory, bytes32)\n    {\n        (\n            uint256 timestamp,\n            bytes32 onRamperIdHash,\n            bytes32 intentHash\n        ) = receiveProcessor.processProof(\n            IReceiveProcessor.ReceiveProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        Intent memory intent = intents[intentHash];\n\n        require(intent.intentTimestamp <= timestamp, \"Intent was not created before send\");\n        require(accounts[intent.onRamper].venmoIdHash == onRamperIdHash, \"Onramper id does not match\");\n\n        return (intent, intentHash);\n    }\n\n    /**\n     * @notice Validate venmo send payment email and check that it hasn't already been used (done on SendProcessor).\n     * Additionally, we validate that the offRamperIdHash matches the one from the specified intent and that enough\n     * was paid off-chain inclusive of the conversionRate.\n     */\n    function _verifyOnRampProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[10] memory _signals\n    )\n        internal\n        returns(Intent memory, Deposit storage, bytes32)\n    {\n        (\n            uint256 amount,\n            uint256 timestamp,\n            bytes32 offRamperIdHash,\n            bytes32 intentHash\n        ) = sendProcessor.processProof(\n            ISendProcessor.SendProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        Intent memory intent = intents[intentHash];\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(intent.intentTimestamp <= timestamp, \"Intent was not created before send\");\n        require(accounts[deposit.depositor].venmoIdHash == offRamperIdHash, \"Offramper id does not match\");\n        require(amount >= (intent.amount * PRECISE_UNIT) / deposit.conversionRate, \"Payment was not enough\");\n\n        return (intent, deposit, intentHash);\n    }\n\n    /**\n     * @notice Validate the user has a venmo account, we do not nullify this email since it can be reused to register under\n     * different addresses.\n     */\n    function _verifyRegistrationProof(\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[5] memory _signals\n    )\n        internal\n        view\n        returns(bytes32)\n    {\n        bytes32 venmoIdHash = registrationProcessor.processProof(\n            IRegistrationProcessor.RegistrationProof({\n                a: _a,\n                b: _b,\n                c: _c,\n                signals: _signals\n            })\n        );\n\n        return venmoIdHash;\n    }\n}\n"
    },
    "contracts/verifiers/venmo_receive_verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\n    \n    uint256 constant IC0x = 1998521002598360388602661849137828971082850022179201276259957576869158385496;\n    uint256 constant IC0y = 10182634046043222599993239701715375786290314885136482885786308640672320063319;\n    \n    uint256 constant IC1x = 17534604985489915275336573121119366129424505037158539751180910676090781339173;\n    uint256 constant IC1y = 11889803877151783685507076831622499352707945684590463546176362002343744945830;\n    \n    uint256 constant IC2x = 9992336274403644311989910445413010872439938683072324873139062537581346554658;\n    uint256 constant IC2y = 17094363607428777440816989951269265250921868684073483076453812477644688878594;\n    \n    uint256 constant IC3x = 10270071836597960189366517867315391458230172881550979668669794056985954263107;\n    uint256 constant IC3y = 882841555683691900016726901755870260971983361621028119775541009388834222791;\n    \n    uint256 constant IC4x = 11471609645746435874975532346432696334497909214217742363023787985217925334917;\n    uint256 constant IC4y = 1635599707674569034333064936217670195841550852796067614373892269396810315430;\n    \n    uint256 constant IC5x = 453880842082142026510201738485953652902535436557854428092884808069943783522;\n    uint256 constant IC5y = 13309879914231159275700902574924268857776766743986319950361610474455348909711;\n    \n    uint256 constant IC6x = 7733670325634241662139843022276639438709392013627892452418403505675410985349;\n    uint256 constant IC6y = 3366840747495307624435768593282486082491478573721269681014867559578192484122;\n    \n    uint256 constant IC7x = 1326045473593465419666979597452282057157439663740914872249936072649484571382;\n    uint256 constant IC7y = 18463487243925669876804192815336506936268656265022969607605759184392699401434;\n    \n    uint256 constant IC8x = 12923538748190222120446215895986091677252590732594483518761895669182373086398;\n    uint256 constant IC8y = 21740637604174493220884716839308238986759517939830112847392760106777577362333;\n    \n    uint256 constant IC9x = 5143826820555728840672719202395505210358925097032580108302952338855713225528;\n    uint256 constant IC9y = 14156260496275258914843777346654479003779949393688540183087995288131227296874;\n    \n \n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[9] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, q)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n            \n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n                \n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n                \n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n                \n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n                \n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n                \n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n                \n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\n                \n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\n                \n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\n                \n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\n                \n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n            \n            checkField(calldataload(add(_pubSignals, 0)))\n            \n            checkField(calldataload(add(_pubSignals, 32)))\n            \n            checkField(calldataload(add(_pubSignals, 64)))\n            \n            checkField(calldataload(add(_pubSignals, 96)))\n            \n            checkField(calldataload(add(_pubSignals, 128)))\n            \n            checkField(calldataload(add(_pubSignals, 160)))\n            \n            checkField(calldataload(add(_pubSignals, 192)))\n            \n            checkField(calldataload(add(_pubSignals, 224)))\n            \n            checkField(calldataload(add(_pubSignals, 256)))\n            \n            checkField(calldataload(add(_pubSignals, 288)))\n            \n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }\n"
    },
    "contracts/verifiers/venmo_registration_verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\n    \n    uint256 constant IC0x = 3638055976240676950045914605184426186597004615745986686038953406245495055165;\n    uint256 constant IC0y = 16580564302397884894686747371614621505423818050264105408618492724162463600258;\n    \n    uint256 constant IC1x = 13671799550941101337898911366005654157020554619411235724918392849720960126453;\n    uint256 constant IC1y = 9063600987533983624206648551897772287475948902669090658947862707506221067536;\n    \n    uint256 constant IC2x = 10717460343505877625375213399740772334181119576331451830359099103494342280998;\n    uint256 constant IC2y = 21392639189263189008410083767410230716792241451084607416269790595121148311396;\n    \n    uint256 constant IC3x = 4424627419458254518939352063068558728162230397785436024066659393088990984847;\n    uint256 constant IC3y = 17495470518296234486945548814862132872393269764961428069427993893495233443459;\n    \n    uint256 constant IC4x = 20819625066663493543415726212141879670533970698639812938463547784617922895791;\n    uint256 constant IC4y = 12155160903133221011449346469637692449020342959468404811727829377687555417180;\n    \n    uint256 constant IC5x = 909148778728537069800451405495423362225514068773347186404420088866799591084;\n    uint256 constant IC5y = 8254929490013229888848574330702196604654492185521547568824138621285335703831;\n    \n \n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[5] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, q)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n            \n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n                \n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n                \n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n                \n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n                \n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n                \n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n                \n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n            \n            checkField(calldataload(add(_pubSignals, 0)))\n            \n            checkField(calldataload(add(_pubSignals, 32)))\n            \n            checkField(calldataload(add(_pubSignals, 64)))\n            \n            checkField(calldataload(add(_pubSignals, 96)))\n            \n            checkField(calldataload(add(_pubSignals, 128)))\n            \n            checkField(calldataload(add(_pubSignals, 160)))\n            \n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }\n"
    },
    "contracts/verifiers/venmo_send_verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\n    \n    uint256 constant IC0x = 5253565342273198592883897010320130582847516807731630949558916452692574831217;\n    uint256 constant IC0y = 9662322202070248628213725915817479757570062267514896029379486038336369929233;\n    \n    uint256 constant IC1x = 21698866184277031621793740117837253040456393749773762188162546274869786069864;\n    uint256 constant IC1y = 5187138742468722685128672611961368023418558888401698543487693126541304393676;\n    \n    uint256 constant IC2x = 12753288914010911036918268717867698157960192904293862522762135152271065437412;\n    uint256 constant IC2y = 16721436319168409689932533872234980619515097317190763083505777888444171936073;\n    \n    uint256 constant IC3x = 20844780833153347465501410407587748645067767399246884156186156356505404547420;\n    uint256 constant IC3y = 4179888423477334488134092046921383865686183896272435474253976436725039347861;\n    \n    uint256 constant IC4x = 8740820822901849117277579595955759924566093227561988642503491844674763453328;\n    uint256 constant IC4y = 1419347962894269139497613263726715789708033059967614143311781818735095971368;\n    \n    uint256 constant IC5x = 14850818706781981842294122727739017505456137841658056100020237006026576080277;\n    uint256 constant IC5y = 7440111411683722231975351364348053501250216974156752728042829353731317122357;\n    \n    uint256 constant IC6x = 10392959522715085960429506171746219298280155010169025671574975948047369517938;\n    uint256 constant IC6y = 9427913884521098205021380028834311206518142250038733528217666552228391884656;\n    \n    uint256 constant IC7x = 18176351483636079227216569428150507502179399901366010587347513740646448474102;\n    uint256 constant IC7y = 5035595222405910894229259092909024127683934701873402387973042552718635096934;\n    \n    uint256 constant IC8x = 5901643112378580547255961564763945918950839587811019165578030635674449830434;\n    uint256 constant IC8y = 7371818062150288322598341713424125891159053618617631138472591678845714118470;\n    \n    uint256 constant IC9x = 20286789177253888335044432842039693807640974783023344368779084850963089342103;\n    uint256 constant IC9y = 13711976627769946952216324205179456239846467270080081050292212510571569474774;\n    \n    uint256 constant IC10x = 7329442995273785010671533581965386367698796421098341665913955720449703260549;\n    uint256 constant IC10y = 18900760962884614285066622591546223052323667430440329182440003040714923375353;\n    \n \n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[10] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, q)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n            \n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n                \n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n                \n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n                \n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n                \n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n                \n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n                \n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\n                \n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\n                \n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\n                \n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\n                \n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\n                \n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n            \n            checkField(calldataload(add(_pubSignals, 0)))\n            \n            checkField(calldataload(add(_pubSignals, 32)))\n            \n            checkField(calldataload(add(_pubSignals, 64)))\n            \n            checkField(calldataload(add(_pubSignals, 96)))\n            \n            checkField(calldataload(add(_pubSignals, 128)))\n            \n            checkField(calldataload(add(_pubSignals, 160)))\n            \n            checkField(calldataload(add(_pubSignals, 192)))\n            \n            checkField(calldataload(add(_pubSignals, 224)))\n            \n            checkField(calldataload(add(_pubSignals, 256)))\n            \n            checkField(calldataload(add(_pubSignals, 288)))\n            \n            checkField(calldataload(add(_pubSignals, 320)))\n            \n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}