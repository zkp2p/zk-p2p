{
  "address": "0xF05627d52F3b4b173002Ee64E90FEc169db77057",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_venmoMailserverKeyHashAdapter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVenmoMailserverKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isEmailNullified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[9]",
              "name": "signals",
              "type": "uint256[9]"
            }
          ],
          "internalType": "struct IReceiveProcessor.ReceiveProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "onRamperIdHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_emailFromAddress",
          "type": "string"
        }
      ],
      "name": "setEmailFromAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "_venmoMailserverKeyHashAdapter",
          "type": "address"
        }
      ],
      "name": "setVenmoMailserverKeyHashAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "venmoMailserverKeyHashAdapter",
      "outputs": [
        {
          "internalType": "contract IKeyHashAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[9]",
          "name": "_pubSignals",
          "type": "uint256[9]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3f21d18eaa372fa066847136e9aa5dc5058e2f442c2928c946e320f1b494875",
  "receipt": {
    "to": null,
    "from": "0x4e39cF8578698131c57404e8bc3eEC820EDa51d8",
    "contractAddress": "0xF05627d52F3b4b173002Ee64E90FEc169db77057",
    "transactionIndex": 11,
    "gasUsed": "1568866",
    "logsBloom": "0x
    "blockHash": "0x722ccebc68490e71f60879a6d0253a07dc57e8fc15ce03f02c78d0fbaf49ef57",
    "transactionHash": "0xb3f21d18eaa372fa066847136e9aa5dc5058e2f442c2928c946e320f1b494875",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 9850574,
        "transactionHash": "0xb3f21d18eaa372fa066847136e9aa5dc5058e2f442c2928c946e320f1b494875",
        "address": "0xF05627d52F3b4b173002Ee64E90FEc169db77057",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e39cf8578698131c57404e8bc3eec820eda51d8"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x722ccebc68490e71f60879a6d0253a07dc57e8fc15ce03f02c78d0fbaf49ef57"
      }
    ],
    "blockNumber": 9850574,
    "cumulativeGasUsed": "3593007",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x75422735DD94dfD04b7ef5D7044Aba0ce4E3a7A6",
    "0xaF4c9cb40eAFc51E39707aCDaA4eF3e6FF6e896c",
    "venmo@venmo.com\u0000\u0000\u0000\u0000\u0000\u0000"
  ],
  "numDeployments": 1,
  "solcInputHash": "0f6f733793778c923a11e6741a881b15",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_venmoMailserverKeyHashAdapter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVenmoMailserverKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isEmailNullified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[9]\",\"name\":\"signals\",\"type\":\"uint256[9]\"}],\"internalType\":\"struct IReceiveProcessor.ReceiveProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"onRamperIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_emailFromAddress\",\"type\":\"string\"}],\"name\":\"setEmailFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"_venmoMailserverKeyHashAdapter\",\"type\":\"address\"}],\"name\":\"setVenmoMailserverKeyHashAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venmoMailserverKeyHashAdapter\",\"outputs\":[{\"internalType\":\"contract IKeyHashAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[9]\",\"name\":\"_pubSignals\",\"type\":\"uint256[9]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/processors/VenmoReceiveProcessor.sol\":\"VenmoReceiveProcessor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IReceiveProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IReceiveProcessor {\\n\\n    struct ReceiveProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[9] signals;\\n    }\\n\\n    function processProof(\\n        ReceiveProof calldata _proof\\n    )\\n        external\\n    returns(uint256, bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0x2ab1827b4e258d0381a03545f1d47fbec5d26b23c7857b280bc202e06d8b06c8\",\"license\":\"MIT\"},\"contracts/lib/ProofParsingUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nlibrary ProofParsingUtils {\\n\\n    /* ============ Constants ============ */\\n    uint16 private constant BYTES_IN_PACKED_BYTES = 7;  // 7 bytes in a packed item returned from circom\\n\\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\\n    // TODO: Remove console.logs and define this as a pure function instead of a view\\n    function convertPackedBytesToBytes(uint256[] memory packedBytes, uint256 signals) internal pure returns (string memory extractedString) {\\n        // Calculate max bytes as the amount of signals * 7 bytes per signal\\n        uint256 maxBytes = signals * BYTES_IN_PACKED_BYTES;\\n        uint8 state = 0;\\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * 7);\\n        uint256 nonzeroBytesArrayIndex = 0;\\n        for (uint16 i = 0; i < packedBytes.length; i++) {\\n            uint256 packedByte = packedBytes[i];\\n            uint8[] memory unpackedBytes = new uint8[](BYTES_IN_PACKED_BYTES);\\n            for (uint j = 0; j < BYTES_IN_PACKED_BYTES; j++) {\\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\\n            }\\n\\n            for (uint256 j = 0; j < BYTES_IN_PACKED_BYTES; j++) {\\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\\n                if (unpackedByte != 0) {\\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\\n                    nonzeroBytesArrayIndex++;\\n                    if (state % 2 == 0) {\\n                        state += 1;\\n                    }\\n                } else {\\n                    if (state % 2 == 1) {\\n                        state += 1;\\n                    }\\n                }\\n                packedByte = packedByte >> 8;\\n            }\\n        }\\n\\n        extractedString = string(nonzeroBytesArray);\\n        require(state == 2, \\\"Invalid final state of packed bytes in email\\\");\\n        // console.log(\\\"Characters in username: \\\", nonzeroBytesArrayIndex);\\n        require(nonzeroBytesArrayIndex <= maxBytes, \\\"Venmo id too long\\\");\\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\\n    }\\n\\n    // // Code example:\\n    function stringToUint256(string memory s) internal pure returns (uint256) {\\n        bytes memory b = bytes(s);\\n        uint256 result = 0;\\n        uint256 oldResult = 0;\\n\\n        for (uint i = 0; i < b.length; i++) { // c = b[i] was not needed\\n            // UNSAFE: Check that the character is a number - we include padding 0s in Venmo ids\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                // store old value so we can check for overflows\\n                oldResult = result;\\n                result = result * 10 + (uint8(b[i]) - 48);\\n                // prevent overflows\\n                require(result >= oldResult, \\\"Overflow detected\\\");\\n            }\\n        }\\n        return result; \\n    }\\n}\\n\",\"keccak256\":\"0x04a2f3d02304e219b06a35409b7b3a146443a1de7e0d52c6eaa12750fbe43cda\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessor is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n    \\n    /* ============ Constants ============ */\\n    uint8 private constant EMAIL_ADDRESS_LENGTH = 21;   // 21 bytes in an email address\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    IKeyHashAdapter public venmoMailserverKeyHashAdapter;\\n    bytes public emailFromAddress;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\\n        string memory _emailFromAddress\\n    )\\n        Ownable()\\n    {\\n        require(bytes(_emailFromAddress).length == EMAIL_ADDRESS_LENGTH, \\\"Email from address not properly padded\\\");\\n\\n        ramp = _ramp;\\n        venmoMailserverKeyHashAdapter = _venmoMailserverKeyHashAdapter;\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setVenmoMailserverKeyHashAdapter(IKeyHashAdapter _venmoMailserverKeyHashAdapter) external onlyOwner {\\n        venmoMailserverKeyHashAdapter = _venmoMailserverKeyHashAdapter;\\n    }\\n\\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\\n        require(bytes(_emailFromAddress).length == EMAIL_ADDRESS_LENGTH, \\\"Email from address not properly padded\\\");\\n\\n        emailFromAddress = bytes(_emailFromAddress);\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function getEmailFromAddress() external view returns (bytes memory) {\\n        return emailFromAddress;\\n    }\\n\\n    function getVenmoMailserverKeyHash() public view returns (bytes32) {\\n        return IKeyHashAdapter(venmoMailserverKeyHashAdapter).venmoMailserverKeyHash();\\n    }\\n}\\n\",\"keccak256\":\"0x7ec8a8a394d3c807ac28fcf5de0c2077b4d4b852fd2734bb6b435d880d330ed5\",\"license\":\"MIT\"},\"contracts/processors/VenmoReceiveProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { BaseProcessor } from \\\"./BaseProcessor.sol\\\";\\nimport { IKeyHashAdapter } from \\\"./keyHashAdapters/IKeyHashAdapter.sol\\\";\\nimport { IReceiveProcessor } from \\\"../interfaces/IReceiveProcessor.sol\\\";\\nimport { Groth16Verifier } from \\\"../verifiers/venmo_receive_verifier.sol\\\";\\nimport { ProofParsingUtils } from \\\"../lib/ProofParsingUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract VenmoReceiveProcessor is Groth16Verifier, IReceiveProcessor, BaseProcessor {\\n\\n    using ProofParsingUtils for string;\\n    using ProofParsingUtils for uint256[];\\n\\n    /* ============ State Variables ============ */\\n\\n    mapping(bytes32 => bool) public isEmailNullified;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        IKeyHashAdapter _venmoMailserverKeyHashAdapter,\\n        string memory _emailFromAddress\\n    )\\n        BaseProcessor(_ramp, _venmoMailserverKeyHashAdapter, _emailFromAddress)\\n        Groth16Verifier()\\n    {}\\n    \\n    /* ============ External Functions ============ */\\n    function processProof(\\n        IReceiveProcessor.ReceiveProof calldata _proof\\n    )\\n        public\\n        override\\n        onlyRamp\\n        returns(uint256 timestamp, bytes32 onRamperIdHash, bytes32 intentHash)\\n    {\\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        require(bytes32(_proof.signals[0]) == getVenmoMailserverKeyHash(), \\\"Invalid mailserver key hash\\\");\\n\\n        // Signals [1:4] are the packed from email address\\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 4);\\n        require(keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \\\"Invalid email from address\\\");\\n\\n        // Signals [4:6] are the packed timestamp\\n        timestamp = _parseSignalArray(_proof.signals, 4, 6).stringToUint256();\\n\\n        // Signals [6] is the packed onRamperIdHsdh\\n        onRamperIdHash = bytes32(_proof.signals[6]);\\n\\n        // Check if email has been used previously, if not nullify it so it can't be used again\\n        bytes32 nullifier = bytes32(_proof.signals[7]);\\n        require(!isEmailNullified[nullifier], \\\"Email has already been used\\\");\\n        isEmailNullified[nullifier] = true;\\n\\n        // Signals [8] is intentHash\\n        intentHash = bytes32(_proof.signals[8]);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _parseSignalArray(uint256[9] calldata _signals, uint8 _from, uint8 _to) internal pure returns (string memory) {\\n        uint256[] memory signalArray = new uint256[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) {\\n            signalArray[i - _from] = _signals[i];\\n        }\\n\\n        return signalArray.convertPackedBytesToBytes(_to - _from);\\n    }\\n}\\n\",\"keccak256\":\"0x4dc3f7fac3b9239a84aff4356eeab5143c8d127fa0c19a94d127386800c1c35b\",\"license\":\"MIT\"},\"contracts/processors/keyHashAdapters/IKeyHashAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapter {\\n    function setVenmoMailserverKeyHash(bytes32 _venmoMailserverKeyHash) external;\\n    function venmoMailserverKeyHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x67b994daa9cbc22d33c26057d40354a41eaa8579c5d2d81d258f6db4408f5144\",\"license\":\"MIT\"},\"contracts/verifiers/venmo_receive_verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 1998521002598360388602661849137828971082850022179201276259957576869158385496;\\n    uint256 constant IC0y = 10182634046043222599993239701715375786290314885136482885786308640672320063319;\\n    \\n    uint256 constant IC1x = 17534604985489915275336573121119366129424505037158539751180910676090781339173;\\n    uint256 constant IC1y = 11889803877151783685507076831622499352707945684590463546176362002343744945830;\\n    \\n    uint256 constant IC2x = 9992336274403644311989910445413010872439938683072324873139062537581346554658;\\n    uint256 constant IC2y = 17094363607428777440816989951269265250921868684073483076453812477644688878594;\\n    \\n    uint256 constant IC3x = 10270071836597960189366517867315391458230172881550979668669794056985954263107;\\n    uint256 constant IC3y = 882841555683691900016726901755870260971983361621028119775541009388834222791;\\n    \\n    uint256 constant IC4x = 11471609645746435874975532346432696334497909214217742363023787985217925334917;\\n    uint256 constant IC4y = 1635599707674569034333064936217670195841550852796067614373892269396810315430;\\n    \\n    uint256 constant IC5x = 453880842082142026510201738485953652902535436557854428092884808069943783522;\\n    uint256 constant IC5y = 13309879914231159275700902574924268857776766743986319950361610474455348909711;\\n    \\n    uint256 constant IC6x = 7733670325634241662139843022276639438709392013627892452418403505675410985349;\\n    uint256 constant IC6y = 3366840747495307624435768593282486082491478573721269681014867559578192484122;\\n    \\n    uint256 constant IC7x = 1326045473593465419666979597452282057157439663740914872249936072649484571382;\\n    uint256 constant IC7y = 18463487243925669876804192815336506936268656265022969607605759184392699401434;\\n    \\n    uint256 constant IC8x = 12923538748190222120446215895986091677252590732594483518761895669182373086398;\\n    uint256 constant IC8y = 21740637604174493220884716839308238986759517939830112847392760106777577362333;\\n    \\n    uint256 constant IC9x = 5143826820555728840672719202395505210358925097032580108302952338855713225528;\\n    uint256 constant IC9y = 14156260496275258914843777346654479003779949393688540183087995288131227296874;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[9] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                \\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                \\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                \\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                \\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n            checkField(calldataload(add(_pubSignals, 160)))\\n            \\n            checkField(calldataload(add(_pubSignals, 192)))\\n            \\n            checkField(calldataload(add(_pubSignals, 224)))\\n            \\n            checkField(calldataload(add(_pubSignals, 256)))\\n            \\n            checkField(calldataload(add(_pubSignals, 288)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x6f36391c9bf6cb09af7c22210249812afdc21e46af471fefd8e3bad633b1ca3f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001dc438038062001dc4833981016040819052620000349162000166565b8282826200004233620000e7565b8051601514620000a75760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b606482015260840160405180910390fd5b6001600160a01b03838116608052600180546001600160a01b0319169184169190911790556002620000da8282620002f5565b50505050505050620003c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200014d57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200017c57600080fd5b8351620001898162000137565b809350506020808501516200019e8162000137565b60408601519093506001600160401b0380821115620001bc57600080fd5b818701915087601f830112620001d157600080fd5b815181811115620001e657620001e662000150565b604051601f8201601f19908116603f0116810190838211818310171562000211576200021162000150565b816040528281528a868487010111156200022a57600080fd5b600093505b828410156200024e57848401860151818501870152928501926200022f565b60008684830101528096505050505050509250925092565b600181811c908216806200027b57607f821691505b6020821081036200029c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002f057600081815260208120601f850160051c81016020861015620002cb5750805b601f850160051c820191505b81811015620002ec57828155600101620002d7565b5050505b505050565b81516001600160401b0381111562000311576200031162000150565b620003298162000322845462000266565b84620002a2565b602080601f831160018114620003615760008415620003485750858301515b600019600386901b1c1916600185901b178555620002ec565b600085815260208120601f198616915b82811015620003925788860151825594840194600190910190840162000371565b5085821015620003b15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516119e1620003e36000396000818160d901526102a801526119e16000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c542c93b11610066578063c542c93b146101e5578063ced1e978146101f8578063f2fde38b14610200578063f6c7226b1461021357600080fd5b80638da5cb5b146101ac5780639563a257146101bd578063c0d05fed146101d057600080fd5b806315d276e1146100d457806327644b3f1461011857806355f65ba81461014b5780635a0d40d014610161578063715018a61461018f57806389dd2db014610199575b600080fd5b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b610126366004611443565b60036020526000908152604090205460ff1681565b604051901515815260200161010f565b610153610226565b60405190815260200161010f565b61017461016f36600461145c565b610299565b6040805193845260208401929092529082015260600161010f565b610197610576565b005b6101976101a736600461148a565b61058a565b6000546001600160a01b03166100fb565b6001546100fb906001600160a01b031681565b6101d86105b4565b60405161010f91906114d2565b61013b6101f336600461151c565b610642565b6101d8610d8e565b61019761020e36600461148a565b610e20565b610197610221366004611598565b610e96565b6001546040805163fe1a279160e01b815290516000926001600160a01b03169163fe1a27919160048083019260209291908290030181865afa158015610270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102949190611649565b905090565b60008080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461031a5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b6040805163c542c93b60e01b8152309163c542c93b9161034d9188919082019060c0830190610100840190600401611662565b602060405180830381865afa15801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e91906116af565b6103ca5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610311565b6103d2610226565b610100850135146104255760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610311565b6000610438856101000160016004610f0e565b90506002604051610449919061171b565b6040518091039020816040516020016104629190611791565b60405160208183030381529060405280519060200120146104c55760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610311565b6104de6104d9866101000160046006610f0e565b610fe6565b6101e08601356000818152600360205260409020549195506101c087013594509060ff161561054f5760405162461bcd60e51b815260206004820152601b60248201527f456d61696c2068617320616c7265616479206265656e207573656400000000006044820152606401610311565b6000908152600360205260409020805460ff19166001179055509193909261020001359150565b61057e6110e2565b610588600061113c565b565b6105926110e2565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600280546105c1906116e7565b80601f01602080910402602001604051908101604052809291908181526020018280546105ed906116e7565b801561063a5780601f1061060f5761010080835404028352916020019161063a565b820191906000526020600020905b81548152906001019060200180831161061d57829003601f168201915b505050505081565b6000610ce6565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811061067a576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816106b0576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806106e1576000805260206000f35b5050505050565b7f046b1f6ff37f1c517167dd65f3117b65a3d504301dee0fa7803d954c4afcf75885527f16832aa8567bcea698e1156145cc2162ab777c81c0af4cbcdb79f1a89708075760208601526000608086018661078587357f1a4963f8b74ad2b68e4d35c79f61a56f7f5a79a8cc84af1d1807a3e077c6bea67f26c43c169edb64936f35b0d03566a7de5c2f5784124457feb2a1955c95268e258461067d565b6107d560208801357f25cb112258fda6375ff57c509e3a48bee3aef73fa7570be21722d1d22e146c027f1617763fb0034c0379397367bea418561184e3dca6bd1f87889929d7283203228461067d565b61082560408801357f01f3abad48c437417be02a73d05ba69ffdf74faf1e3e335da858622d19b972c77f16b4a7983e3c561dadc1ed34e34db843237c205242565f0d1c6fd943e00ca0438461067d565b61087560608801357f039db774f52b360975aaabcd5946d16e03e2cec58c5a6c5e39a5845c5448b6a67f195cb3729018cb00d3b1c244d39a8c328d1279432970ce02351da7dcff8ec7858461067d565b6108c560808801357f1d6d20046d8274a8ca0cf6bdd3e2bdac1ba08c53d0a0bd739d2c73648049968f7f0100e3301c7e55011a1d6d8a75a6e876a4360387b1c140289b486617a8d5f0628461067d565b61091560a08801357f077190781706b89508d280a15fed9d7b0119c1f86f749830b7b655f033be971a7f11191a2f646ea3aa1979997d85a8c7fb3efd89794aa99ca7202e6ca8f781d1858461067d565b61096560c08801357f28d1f6a47bab06cd55a0461d9e7a545a2ebec068187c75571abcaf7adb9254da7f02ee83e0447702d87ebebe409337b7777234076204d445a6da5e4f72cfc092f68461067d565b6109b560e08801357f3010c3cb3673b001beadca3f88ac8a3ba6e8c525103a43421a6a5223895d939d7f1c9276b622645ca8626de8a34be1e5128a1dd6fb45d2fee53d46b5915ea0c4be8461067d565b610a066101008801357f1f4c28d50901446a5c84182ed47659f13e10e13561c2ec8d93674f959a53246a7f0b5f4d84cf0b0c3394bc154ad8abf4f967973550929bc62ee8f3aed0280ebb388461067d565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610cfe6000840135610649565b610d0b6020840135610649565b610d186040840135610649565b610d256060840135610649565b610d326080840135610649565b610d3f60a0840135610649565b610d4c60c0840135610649565b610d5960e0840135610649565b610d67610100840135610649565b610d75610120840135610649565b610d82818486888a6106e8565b90508060005260206000f35b606060028054610d9d906116e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc9906116e7565b8015610e165780601f10610deb57610100808354040283529160200191610e16565b820191906000526020600020905b815481529060010190602001808311610df957829003601f168201915b5050505050905090565b610e286110e2565b6001600160a01b038116610e8d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610311565b61067a8161113c565b610e9e6110e2565b8051601514610efe5760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b6064820152608401610311565b6002610f0a82826117fc565b5050565b60606000610f1c84846118d2565b60ff1667ffffffffffffffff811115610f3757610f37611582565b604051908082528060200260200182016040528015610f60578160200160208202803683370190505b50905060ff84165b8360ff16811015610fc557858160098110610f8557610f856116d1565b602002013582610f9860ff8816846118eb565b81518110610fa857610fa86116d1565b602090810291909101015280610fbd816118fe565b915050610f68565b50610fdd610fd385856118d2565b829060ff1661118c565b95945050505050565b6000818180805b83518110156110d857603084828151811061100a5761100a6116d1565b016020015160f81c1080159061103a5750603984828151811061102f5761102f6116d1565b016020015160f81c11155b156110c6578291506030848281518110611056576110566116d1565b0160200151611068919060f81c6118d2565b60ff1661107684600a611917565b611080919061192e565b9250818310156110c65760405162461bcd60e51b815260206004820152601160248201527013dd995c999b1bddc819195d1958dd1959607a1b6044820152606401610311565b806110d0816118fe565b915050610fed565b5090949350505050565b6000546001600160a01b031633146105885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610311565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061119b600784611917565b9050600080855160076111ae9190611917565b67ffffffffffffffff8111156111c6576111c6611582565b6040519080825280601f01601f1916602001820160405280156111f0576020820181803683370190505b5090506000805b87518161ffff161015611389576000888261ffff168151811061121c5761121c6116d1565b6020908102919091018101516040805160078082526101008201909252919350600092820160e08036833701905050905060005b600781101561129d57611264816008611917565b83901c828281518110611279576112796116d1565b60ff9092166020928302919091019091015280611295816118fe565b915050611250565b5060005b60078110156113735760008282815181106112be576112be6116d1565b602002602001015160ff16905080600014611336578060f81b8787815181106112e9576112e96116d1565b60200101906001600160f81b031916908160001a9053508561130a816118fe565b96506113199050600289611941565b60ff166000036113315761132e600189611971565b97505b611359565b611341600289611941565b60ff1660010361135957611356600189611971565b97505b5060089290921c918061136b816118fe565b9150506112a1565b50505080806113819061198a565b9150506111f7565b508194508260ff166002146113f55760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642066696e616c207374617465206f66207061636b656420627960448201526b1d195cc81a5b88195b585a5b60a21b6064820152608401610311565b838111156114395760405162461bcd60e51b815260206004820152601160248201527056656e6d6f20696420746f6f206c6f6e6760781b6044820152606401610311565b5050505092915050565b60006020828403121561145557600080fd5b5035919050565b6000610220828403121561146f57600080fd5b50919050565b6001600160a01b038116811461067a57600080fd5b60006020828403121561149c57600080fd5b81356114a781611475565b9392505050565b60005b838110156114c95781810151838201526020016114b1565b50506000910152565b60208152600082518060208401526114f18160408501602087016114ae565b601f01601f19169190910160400192915050565b806040810183101561151657600080fd5b92915050565b60008060008061022080868803121561153457600080fd5b61153e8787611505565b945060c086018781111561155157600080fd5b6040870194506115618882611505565b93505086818701111561157357600080fd5b50929591945092610100019150565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156115aa57600080fd5b813567ffffffffffffffff808211156115c257600080fd5b818401915084601f8301126115d657600080fd5b8135818111156115e8576115e8611582565b604051601f8201601f19908116603f0116810190838211818310171561161057611610611582565b8160405282815287602084870101111561162957600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561165b57600080fd5b5051919050565b61022081016040808784378083018660005b600281101561169157838284379183019190830190600101611674565b505050808560c0850137506101208361010084013795945050505050565b6000602082840312156116c157600080fd5b815180151581146114a757600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806116fb57607f821691505b60208210810361146f57634e487b7160e01b600052602260045260246000fd5b6000808354611729816116e7565b60018281168015611741576001811461175657611785565b60ff1984168752821515830287019450611785565b8760005260208060002060005b8581101561177c5781548a820152908401908201611763565b50505082870194505b50929695505050505050565b600082516117a38184602087016114ae565b9190910192915050565b601f8211156117f757600081815260208120601f850160051c810160208610156117d45750805b601f850160051c820191505b818110156117f3578281556001016117e0565b5050505b505050565b815167ffffffffffffffff81111561181657611816611582565b61182a8161182484546116e7565b846117ad565b602080601f83116001811461185f57600084156118475750858301515b600019600386901b1c1916600185901b1785556117f3565b600085815260208120601f198616915b8281101561188e5788860151825594840194600190910190840161186f565b50858210156118ac5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115611516576115166118bc565b81810381811115611516576115166118bc565b600060018201611910576119106118bc565b5060010190565b8082028115828204841417611516576115166118bc565b80820180821115611516576115166118bc565b600060ff83168061196257634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff8181168382160190811115611516576115166118bc565b600061ffff8083168181036119a1576119a16118bc565b600101939250505056fea264697066735822122089a3db271304c82f22cdca210d1fe253cbf4bd70de9f14a379f31f1582911df364736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c542c93b11610066578063c542c93b146101e5578063ced1e978146101f8578063f2fde38b14610200578063f6c7226b1461021357600080fd5b80638da5cb5b146101ac5780639563a257146101bd578063c0d05fed146101d057600080fd5b806315d276e1146100d457806327644b3f1461011857806355f65ba81461014b5780635a0d40d014610161578063715018a61461018f57806389dd2db014610199575b600080fd5b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b610126366004611443565b60036020526000908152604090205460ff1681565b604051901515815260200161010f565b610153610226565b60405190815260200161010f565b61017461016f36600461145c565b610299565b6040805193845260208401929092529082015260600161010f565b610197610576565b005b6101976101a736600461148a565b61058a565b6000546001600160a01b03166100fb565b6001546100fb906001600160a01b031681565b6101d86105b4565b60405161010f91906114d2565b61013b6101f336600461151c565b610642565b6101d8610d8e565b61019761020e36600461148a565b610e20565b610197610221366004611598565b610e96565b6001546040805163fe1a279160e01b815290516000926001600160a01b03169163fe1a27919160048083019260209291908290030181865afa158015610270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102949190611649565b905090565b60008080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461031a5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b6040805163c542c93b60e01b8152309163c542c93b9161034d9188919082019060c0830190610100840190600401611662565b602060405180830381865afa15801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e91906116af565b6103ca5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610311565b6103d2610226565b610100850135146104255760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61696c736572766572206b6579206861736800000000006044820152606401610311565b6000610438856101000160016004610f0e565b90506002604051610449919061171b565b6040518091039020816040516020016104629190611791565b60405160208183030381529060405280519060200120146104c55760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656d61696c2066726f6d20616464726573730000000000006044820152606401610311565b6104de6104d9866101000160046006610f0e565b610fe6565b6101e08601356000818152600360205260409020549195506101c087013594509060ff161561054f5760405162461bcd60e51b815260206004820152601b60248201527f456d61696c2068617320616c7265616479206265656e207573656400000000006044820152606401610311565b6000908152600360205260409020805460ff19166001179055509193909261020001359150565b61057e6110e2565b610588600061113c565b565b6105926110e2565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600280546105c1906116e7565b80601f01602080910402602001604051908101604052809291908181526020018280546105ed906116e7565b801561063a5780601f1061060f5761010080835404028352916020019161063a565b820191906000526020600020905b81548152906001019060200180831161061d57829003601f168201915b505050505081565b6000610ce6565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811061067a576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816106b0576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806106e1576000805260206000f35b5050505050565b7f046b1f6ff37f1c517167dd65f3117b65a3d504301dee0fa7803d954c4afcf75885527f16832aa8567bcea698e1156145cc2162ab777c81c0af4cbcdb79f1a89708075760208601526000608086018661078587357f1a4963f8b74ad2b68e4d35c79f61a56f7f5a79a8cc84af1d1807a3e077c6bea67f26c43c169edb64936f35b0d03566a7de5c2f5784124457feb2a1955c95268e258461067d565b6107d560208801357f25cb112258fda6375ff57c509e3a48bee3aef73fa7570be21722d1d22e146c027f1617763fb0034c0379397367bea418561184e3dca6bd1f87889929d7283203228461067d565b61082560408801357f01f3abad48c437417be02a73d05ba69ffdf74faf1e3e335da858622d19b972c77f16b4a7983e3c561dadc1ed34e34db843237c205242565f0d1c6fd943e00ca0438461067d565b61087560608801357f039db774f52b360975aaabcd5946d16e03e2cec58c5a6c5e39a5845c5448b6a67f195cb3729018cb00d3b1c244d39a8c328d1279432970ce02351da7dcff8ec7858461067d565b6108c560808801357f1d6d20046d8274a8ca0cf6bdd3e2bdac1ba08c53d0a0bd739d2c73648049968f7f0100e3301c7e55011a1d6d8a75a6e876a4360387b1c140289b486617a8d5f0628461067d565b61091560a08801357f077190781706b89508d280a15fed9d7b0119c1f86f749830b7b655f033be971a7f11191a2f646ea3aa1979997d85a8c7fb3efd89794aa99ca7202e6ca8f781d1858461067d565b61096560c08801357f28d1f6a47bab06cd55a0461d9e7a545a2ebec068187c75571abcaf7adb9254da7f02ee83e0447702d87ebebe409337b7777234076204d445a6da5e4f72cfc092f68461067d565b6109b560e08801357f3010c3cb3673b001beadca3f88ac8a3ba6e8c525103a43421a6a5223895d939d7f1c9276b622645ca8626de8a34be1e5128a1dd6fb45d2fee53d46b5915ea0c4be8461067d565b610a066101008801357f1f4c28d50901446a5c84182ed47659f13e10e13561c2ec8d93674f959a53246a7f0b5f4d84cf0b0c3394bc154ad8abf4f967973550929bc62ee8f3aed0280ebb388461067d565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610cfe6000840135610649565b610d0b6020840135610649565b610d186040840135610649565b610d256060840135610649565b610d326080840135610649565b610d3f60a0840135610649565b610d4c60c0840135610649565b610d5960e0840135610649565b610d67610100840135610649565b610d75610120840135610649565b610d82818486888a6106e8565b90508060005260206000f35b606060028054610d9d906116e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc9906116e7565b8015610e165780601f10610deb57610100808354040283529160200191610e16565b820191906000526020600020905b815481529060010190602001808311610df957829003601f168201915b5050505050905090565b610e286110e2565b6001600160a01b038116610e8d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610311565b61067a8161113c565b610e9e6110e2565b8051601514610efe5760405162461bcd60e51b815260206004820152602660248201527f456d61696c2066726f6d2061646472657373206e6f742070726f7065726c79206044820152651c185919195960d21b6064820152608401610311565b6002610f0a82826117fc565b5050565b60606000610f1c84846118d2565b60ff1667ffffffffffffffff811115610f3757610f37611582565b604051908082528060200260200182016040528015610f60578160200160208202803683370190505b50905060ff84165b8360ff16811015610fc557858160098110610f8557610f856116d1565b602002013582610f9860ff8816846118eb565b81518110610fa857610fa86116d1565b602090810291909101015280610fbd816118fe565b915050610f68565b50610fdd610fd385856118d2565b829060ff1661118c565b95945050505050565b6000818180805b83518110156110d857603084828151811061100a5761100a6116d1565b016020015160f81c1080159061103a5750603984828151811061102f5761102f6116d1565b016020015160f81c11155b156110c6578291506030848281518110611056576110566116d1565b0160200151611068919060f81c6118d2565b60ff1661107684600a611917565b611080919061192e565b9250818310156110c65760405162461bcd60e51b815260206004820152601160248201527013dd995c999b1bddc819195d1958dd1959607a1b6044820152606401610311565b806110d0816118fe565b915050610fed565b5090949350505050565b6000546001600160a01b031633146105885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610311565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061119b600784611917565b9050600080855160076111ae9190611917565b67ffffffffffffffff8111156111c6576111c6611582565b6040519080825280601f01601f1916602001820160405280156111f0576020820181803683370190505b5090506000805b87518161ffff161015611389576000888261ffff168151811061121c5761121c6116d1565b6020908102919091018101516040805160078082526101008201909252919350600092820160e08036833701905050905060005b600781101561129d57611264816008611917565b83901c828281518110611279576112796116d1565b60ff9092166020928302919091019091015280611295816118fe565b915050611250565b5060005b60078110156113735760008282815181106112be576112be6116d1565b602002602001015160ff16905080600014611336578060f81b8787815181106112e9576112e96116d1565b60200101906001600160f81b031916908160001a9053508561130a816118fe565b96506113199050600289611941565b60ff166000036113315761132e600189611971565b97505b611359565b611341600289611941565b60ff1660010361135957611356600189611971565b97505b5060089290921c918061136b816118fe565b9150506112a1565b50505080806113819061198a565b9150506111f7565b508194508260ff166002146113f55760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642066696e616c207374617465206f66207061636b656420627960448201526b1d195cc81a5b88195b585a5b60a21b6064820152608401610311565b838111156114395760405162461bcd60e51b815260206004820152601160248201527056656e6d6f20696420746f6f206c6f6e6760781b6044820152606401610311565b5050505092915050565b60006020828403121561145557600080fd5b5035919050565b6000610220828403121561146f57600080fd5b50919050565b6001600160a01b038116811461067a57600080fd5b60006020828403121561149c57600080fd5b81356114a781611475565b9392505050565b60005b838110156114c95781810151838201526020016114b1565b50506000910152565b60208152600082518060208401526114f18160408501602087016114ae565b601f01601f19169190910160400192915050565b806040810183101561151657600080fd5b92915050565b60008060008061022080868803121561153457600080fd5b61153e8787611505565b945060c086018781111561155157600080fd5b6040870194506115618882611505565b93505086818701111561157357600080fd5b50929591945092610100019150565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156115aa57600080fd5b813567ffffffffffffffff808211156115c257600080fd5b818401915084601f8301126115d657600080fd5b8135818111156115e8576115e8611582565b604051601f8201601f19908116603f0116810190838211818310171561161057611610611582565b8160405282815287602084870101111561162957600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561165b57600080fd5b5051919050565b61022081016040808784378083018660005b600281101561169157838284379183019190830190600101611674565b505050808560c0850137506101208361010084013795945050505050565b6000602082840312156116c157600080fd5b815180151581146114a757600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806116fb57607f821691505b60208210810361146f57634e487b7160e01b600052602260045260246000fd5b6000808354611729816116e7565b60018281168015611741576001811461175657611785565b60ff1984168752821515830287019450611785565b8760005260208060002060005b8581101561177c5781548a820152908401908201611763565b50505082870194505b50929695505050505050565b600082516117a38184602087016114ae565b9190910192915050565b601f8211156117f757600081815260208120601f850160051c810160208610156117d45750805b601f850160051c820191505b818110156117f3578281556001016117e0565b5050505b505050565b815167ffffffffffffffff81111561181657611816611582565b61182a8161182484546116e7565b846117ad565b602080601f83116001811461185f57600084156118475750858301515b600019600386901b1c1916600185901b1785556117f3565b600085815260208120601f198616915b8281101561188e5788860151825594840194600190910190840161186f565b50858210156118ac5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115611516576115166118bc565b81810381811115611516576115166118bc565b600060018201611910576119106118bc565b5060010190565b8082028115828204841417611516576115166118bc565b80820180821115611516576115166118bc565b600060ff83168061196257634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff8181168382160190811115611516576115166118bc565b600061ffff8083168181036119a1576119a16118bc565b600101939250505056fea264697066735822122089a3db271304c82f22cdca210d1fe253cbf4bd70de9f14a379f31f1582911df364736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/processors/VenmoReceiveProcessor.sol:VenmoReceiveProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3849,
        "contract": "contracts/processors/VenmoReceiveProcessor.sol:VenmoReceiveProcessor",
        "label": "venmoMailserverKeyHashAdapter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKeyHashAdapter)4593"
      },
      {
        "astId": 3851,
        "contract": "contracts/processors/VenmoReceiveProcessor.sol:VenmoReceiveProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3979,
        "contract": "contracts/processors/VenmoReceiveProcessor.sol:VenmoReceiveProcessor",
        "label": "isEmailNullified",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IKeyHashAdapter)4593": {
        "encoding": "inplace",
        "label": "contract IKeyHashAdapter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}