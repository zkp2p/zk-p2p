import chai from "chai";
import path from "path";
import { F1Field, Scalar } from "ffjavascript";

export const p = Scalar.fromString("21888242871839275222246405745257275088548364400416034343698204186575808495617");
const Fr = new F1Field(p);

const assert = chai.assert;

const wasm_tester = require("circom_tester").wasm;

const fs = require('fs');

describe("Venmo Amount", function () {
    jest.setTimeout(10 * 60 * 1000); // 10 minutes

    let cir;

    beforeAll(async () => {
        cir = await wasm_tester(
            path.join(__dirname, "../mocks/test_venmo_amount.circom"),
            {
                include: path.join(__dirname, "../../node_modules"),
                output: path.join(__dirname, "../../build/test_venmo_amount"),
                recompile: true,
                verbose: true,
            }
        );
    });


    it("Should generate witnesses", async () => {
        const input = {
            "msg": ["61","13","10","50","48","53","53","51","38","97","99","116","111","114","95","105","100","61","51","68","50","55","52","52","51","50","53","53","50","49","53","53","53","53","52","53","53","53","53","34","62","13","10","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","61","50","48","13","10","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32"] 
        };
        const witness = await cir.calculateWitness(
            input,
            true
        );

        assert(Fr.eq(Fr.e(witness[0]), Fr.e(1)));
    });

    it("Should match regex once", async () => {
        const input = {
            "msg": ["61","13","10","50","48","53","53","51","38","97","99","116","111","114","95","105","100","61","51","68","50","55","52","52","51","50","53","53","50","49","53","53","53","53","52","53","53","53","53","34","62","13","10","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","61","50","48","13","10","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32"] 
        };
        const witness = await cir.calculateWitness(
            input,
            true
        );

        assert(Fr.eq(Fr.e(witness[1]), Fr.e(1)));
    });

    it("Should reveal regex correctly", async () => {
        const input = {
            "msg": ["61","13","10","50","48","53","53","51","38","97","99","116","111","114","95","105","100","61","51","68","50","55","52","52","51","50","53","53","50","49","53","53","53","53","52","53","53","53","53","34","62","13","10","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","61","50","48","13","10","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32"] 
        };
        const witness = await cir.calculateWitness(
            input,
            true
        );
        const expected = ["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","50","55","52","52","51","50","53","53","50","49","53","53","53","53","52","53","53","53","53","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"];
        const result = witness.slice(2, 87 + 2);

        assert.equal(JSON.stringify(result), JSON.stringify(expected), true);
    });

    it("Should fail to match regex", async () => {
        const input = {
            "msg": [
                "61","13","10","50","48","53","53","51","38","97","99","116","111","114","95","105","100","61","51","68",
                "50","55","52","52","51","50","53","53","68","49","53","53","53","53","52","53","53","53","53", // Update a number to 68
                "34","62","13","10","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","61","50","48","13","10","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32","32"
            ] 
        };
        const witness = await cir.calculateWitness(
            input,
            true
        );

        assert(Fr.eq(Fr.e(witness[1]), Fr.e(0)));
    });
});
